Start: 11July2024
End: 

Typescript is a superset of Javascript - all valid JS will work as TS
TS enhances coding experience by enabling you to write code with greater confidence in the stability and longevity of projects, Makes your code less error prone

Lesson 1: Introduction = 0:30 =========================================================================================================================================================================================================
Checks code during compile time - in real time with a linter - dramatically reduces the amount of app crashing run time errors that can occur -TS catches alot of errors before they even pop up/pushed live
Adds productivity - Takes slightly more time to write than regular JS, but TS has autocomplete/refactoring capabilities, immediate error checking, improves DX and more
Improves Employability - Learning TS is considered "Table Steaks" - even as a junior/mid level developer, you should know TS - will set you aparat from other juniors
The Course Covers:
  Basic, Literal, and Custom types / Optional Properties / Unions / Type Narrowing / Utility Types(built in types) / Generics(custom utility types)  
It is discouraging to see the wall of red errors pop up when you convert a '.js' into a '.tsx' : 'Typescript is not making your life terrible. It's showing you how terrible your life already is.' (vs living(surviving) in canada)
TS doesn't solve every programming problem - It's main purpose is fixing possible runtime errors / type errors - Not every error in your code is a runtime type error - Won't protect against logical errors

Lesson 2: Intro To Pizza App = 6:45 ====================================================================================================================================================================================================
Pizza Restaurant Menu - Will have an array of items, each of those items will have a name 

Lesson 3: Move code to TS = 16:55 ======================================================================================================================================================================================================
simply change the extension from '.js' to '.ts' - greeted with a wall of red text, 5 errors
every time you see the red squigglie lines, just hover the mouse over to see the problem/intellisense - sometimes recomendations for fixes
when you use Typescript, you aren't introducing new bugs, it's just showing you where they currently are - they already existed

Lesson 4: Defensive Coding = 20:00 =====================================================================================================================================================================================================
Assume that code pushed to production will take the 'sad path' - it assumes that problems will occur, edge cases will happen, and address the problems in the code from the start instead of in production = Defensive Coding
if one of our variables is undefined we can use an if else statement : if selectedPizza exists run the code, else it doesn't - return null
'completeOrder("1")' #typescript could not detect this bug in the code, it should be just a number

Lesson 5: Obligatory types basics lesson = 24:35 ========================================================================================================================================================================================
The very basics of TS = How to type a variable :
  let myName = "Sean" #{ myName: string; }
  let myName: string = "Sean" #how to type a variable in JS, it's new syntax ': string' - but once you know it, then you know what you're looking at
  myName = 5 #will give you an error after above code, trying to reassign this variable to a number as it was originally assigned as a string
TypeScript is smart, and able to infer what dataType the above variable is, it is able to figure out the datatype simply from what you assigned to it
JS Dynamic typing nature, is considered a strength by some because the above code would not be a problem, but in a strongly typed JS superset it is, in practice though TS prevents alot of errors
I could rewrite any project that is done in original JS and redo it in TS and it would be a new project, or do any old leetcode I already did in JS and redo it in TS to review it
Primitive Data Types = string / number / boolean #all in in non caps - not like the JS String / Number constructors

Lesson 6: Add type to orderId = 28:30 ===================================================================================================================================================================================================
function completeOrder(orderId: number) { } #using typescript inside of a function

Lesson 7: Defining Custom Types = 30:00 =================================================================================================================================================================================================
We can also create our own Custom Types by using the 'type' keyword - convention is that types start with a capital letter
  type Food = string #creates a custom type of Food that is a string
  let favoriteFood: Food = "pizza" #will assign favoriteFood variable the type of 'Food'
You can also create types around objects {name: value}
One of the benefits of TS is it forces you to stay consistent, if you mistype something it will catch it (sometimes) like 'isstudent' vs 'isStudent'
to create a type for an object, instead of supplying a value to the name, supply it with a type, so it will check if the name is spelled correctly and that the value of the type is consistent/correct:
  type Person = {
    name: string,
    age: number;
    isStudent: boolean
  } #you can use ',' ';' or ' '(leave blank) inbetween each property when writing the type TS
let person1: Person = { name: "Sean", Age: 66, isStudent: false } #how to use the newly created type






































