Start: 11July2024
End: 

Typescript is a superset of Javascript - all valid JS will work as TS
TS enhances coding experience by enabling you to write code with greater confidence in the stability and longevity of projects, Makes your code less error prone
I could rewrite any project that is done in original JS and redo it in TS and it would be a new project, or do any old leetcode I already did in JS and redo it in TS to review it

Lesson 1: Introduction = 0:30 =========================================================================================================================================================================================================
Checks code during compile time - in real time with a linter - dramatically reduces the amount of app crashing run time errors that can occur -TS catches alot of errors before they even pop up/pushed live
Adds productivity - Takes slightly more time to write than regular JS, but TS has autocomplete/refactoring capabilities, immediate error checking, improves DX and more
Improves Employability - Learning TS is considered "Table Steaks" - even as a junior/mid level developer, you should know TS - will set you aparat from other juniors
The Course Covers:
  Basic, Literal, and Custom types / Optional Properties / Unions / Type Narrowing / Utility Types(built in types) / Generics(custom utility types)  
It is discouraging to see the wall of red errors pop up when you convert a '.js' into a '.tsx' : 'Typescript is not making your life terrible. It's showing you how terrible your life already is.' (vs living(surviving) in canada)
TS doesn't solve every programming problem - It's main purpose is fixing possible runtime errors / type errors - Not every error in your code is a runtime type error - Won't protect against logical errors

Lesson 2: Intro To Pizza App = 6:45 ====================================================================================================================================================================================================
Pizza Restaurant Menu - Will have an array of items, each of those items will have a name 

Lesson 3: Move code to TS = 16:55 ======================================================================================================================================================================================================
simply change the extension from '.js' to '.ts' - greeted with a wall of red text, 5 errors
every time you see the red squigglie lines, just hover the mouse over to see the problem/intellisense - sometimes recomendations for fixes
when you use Typescript, you aren't introducing new bugs, it's just showing you where they currently are - they already existed

Lesson 4: Defensive Coding = 20:00 =====================================================================================================================================================================================================
Assume that code pushed to production will take the 'sad path' - it assumes that problems will occur, edge cases will happen, and address the problems in the code from the start instead of in production = Defensive Coding
if one of our variables is undefined we can use an if else statement : if selectedPizza exists run the code, else it doesn't - return null
'completeOrder("1")' #typescript could not detect this bug in the code, it should be just a number

Lesson 5: Obligatory types basics lesson = 24:35 ========================================================================================================================================================================================
The very basics of TS = How to type a variable :
  let myName = "Sean" #{ myName: string; }
  let myName: string = "Sean" #how to type a variable in JS, it's new syntax ': string' - but once you know it, then you know what you're looking at
  myName = 5 #will give you an error after above code, trying to reassign this variable to a number as it was originally assigned as a string
TypeScript is smart, and able to infer what dataType the above variable is, it is able to figure out the datatype simply from what you assigned to it
JS Dynamic typing nature, is considered a strength by some because the above code would not be a problem, but in a strongly typed JS superset it is, in practice though TS prevents alot of errors
Primitive Data Types = string / number / boolean #all in in non caps - not like the JS String / Number constructors

Lesson 6: Add type to orderId = 28:30 ===================================================================================================================================================================================================
function completeOrder(orderId: number) { } #using typescript inside of a function

Lesson 7: Defining Custom Types = 30:00 =================================================================================================================================================================================================
We can also create our own Custom Types by using the 'type' keyword - convention is that types start with a capital letter
  type Food = string #creates a custom type of Food that is a string
  let favoriteFood: Food = "pizza" #will assign favoriteFood variable the type of 'Food'
You can also create types around objects {name: value}
One of the benefits of TS is it forces you to stay consistent, if you mistype something it will catch it (sometimes) like 'isstudent' vs 'isStudent'
to create a type for an object, instead of supplying a value to the name, supply it with a type, so it will check if the name is spelled correctly and that the value of the type is consistent/correct:
  type Person = {
    name: string,
    age: number;
    isStudent: boolean
  } #you can use ',' ';' or ' '(leave blank) inbetween each property when writing the type TS
let person1: Person = { name: "Sean", Age: 66, isStudent: false } #how to use the newly created type

Lesson 8: Adding a Pizza Type = 33:45 ===================================================================================================================================================================================================
When you hover over an object without a type it will implicitly have an 'any' type, you 

Lesson 9: Nested object types (5) = 38:00 ===============================================================================================================================================================================================
Let's say you wanted to add an address object to the person object - the easiest way to do this would be to add a nested object 
type Person = {
  name: string
  age: number
  isStudent: boolean
  address: { 
    street: string
    city: string
    country: string
  }
} #after adding the address property, the other 'person1' variables went red, because when you add a new property to a type definition, you have to update all of the old ones, this can be made optional
you can also create a seperate type for the address instead of nesting it like above
type Address { ... }
type Person { ... address: Address } #'...' is to demonstrate take all the old values, and take the properties from the old one, simply refer to the 'type Address' in the old person object schema

Lesson 10: Optional Properties - 6 = 43:15 ==============================================================================================================================================================================================
When you want to create an object type with optional properties, You can define them to be optional, there are many ways to go about that in TS
increased flexibility is decreased typesafety
'?' when defining your type simply put a '?' questionmark after your type to make it optional/nullable
  type Person = { ... address?: Address }
console.log(`${person.name} lives at ${person.address?.street}`) #will throw the error if no street address 'Joe lives at undefined' but won't crash the program with a type error - work around

Lesson 11: Adding an Order type = 46:00 =================================================================================================================================================================================================
When trying to apply the newly created 'type Order = {}' to the orderQeue, it ran into an array, because we were trying to type an array 'let orderQeue = []'

Lesson 12: Typing Arrays = 47:20 ========================================================================================================================================================================================================
when trying to assign 'let ages: number = [101, 102]' it will give you an error when you hover over it 'the type [] is not assignable to type number' to get TS to realize it's an array only of number use below syntax
  let ages: number[] = [101, 102] #correct way to assign TS to an array, notice the '[]' after number
you actually don't even need to put in the ':number[]', TS is able to infer it from the context
to create an array of people objects(multiple data types - strings, numbers, boolean), create a 'type Person = { ... }' and then add 'let people: Person[] = [ ... ]' #TS can also infer this as well
  let people: Array<Person> = [ ... ] #you can also use this syntax to accomplish the same thing

Lesson 13: Type orderQeue = 52:00 =======================================================================================================================================================================================================
Just because all the errors are gone in your TS doesn't mean that there are no errors - program might still break, might still have edge cases

Lesson 14: Literal Types = 56:20 ========================================================================================================================================================================================================
Literal Type = when the type isn't a generic(string/number/boolean) - It's a literal type, an actual value type 'const myName = "Sean"' #value will not be reassigned with const, so the value is literally "Sean"
  const myName: "Sean" = "Sean" #manually typing a Literal Type for the const variable

Lesson 15: Unions = 59:00 ===============================================================================================================================================================================================================
Literal Types are often combined with Unions :
Let's say you had an app where you wanted to designate the user as one of three categories 'Guest' Vs 'Member' Vs 'Admin' We can use unions to teach TS that the User Role should only be allowed one of a certain # of strings
'|' Pipe Character = Union, syntax below:
  type UserRole = "guest" | "admin" | "member" #UserRole must be one of these three string literals
  let userRole: UserRole = "admin" #would be valid TS, won't allow you to use "h4ck3r" as a UserRole

Lesson 16: Update order status to use literal type unions = 1:02:00 =====================================================================================================================================================================

Lesson 17: Add ids to pizzas = 1:05:00 ==================================================================================================================================================================================================
TS is good at inferring primitive types(numbers, strings, booleans)
After updating the 'type Pizza' with an 'id: number' it immediately showed us where all the problems in the code were, TS can actually save you time once it is established in the codebase

Lesson 18: Type Narrowing = 1:07:45 =====================================================================================================================================================================================================
You can also use '|' unions with more generic types like below(instead of string literals) :
  function getPizzaDetail(identifier: string | number) {
    if (typeof identifier === 'string') {
        return menu.find(pizza => pizza.name.toLowerCase() === identifier.toLowerCase()); #will put it to lower case to avoid capitalization errors
    } else {
        return menu.find(pizza => pizza.id === identifier);
    }
  } #will find the pizza by name if the identifier is a string, else it will search for it's ID number, could do a catch error block or if/else for edge cases/wrong inputs
.toLowerCase() #TS will parse and understand the code and tell us that .toLowerCase() is not usable on numbers, because we told it to look for either a string or a number
Type Narrowing = When we are writing a function and don't neccesarily know what the datatype of that function is, TS will expect us to narrow down the type and handle each usecase and potentially provide a default

Lesson 19: Be explicit whenever you can = 1:12:45 =======================================================================================================================================================================================
Be as explicit as you can when writing your code - 
In some instances, your code will be in just plain JS file, and the TS won't be there to protect it, you can add 'export'(like React?) in front of function and import it into JS - 
He just did what I thought, premonISean - added a new else if and else clause to throw a type error - Yaassss Slay Sean - Getting good enough to know where the instructor is missing stuff - Still can't git a job though ~ Escape.

Lesson 20: Function return types = 1:15:00 ==============================================================================================================================================================================================
Function Return Types = Will tell you what the return type should be (properties) this one will return a 'User' with the nested 'UserRole' while taking in a string as argument
  type UserRole = "guest" | "admin" | "member" #UserRole must be one of these three string literals
  type User = [ username: string, role: UserRole ]  
  function fetchUserDetails(username: string): User { ... } #notice how it takes a username as a string and returns a 'User' object with above properties
 
Lesson 21: TS-specific types: any = 1:18:00 =============================================================================================================================================================================================
: void = another typescript specific type, a function that doesn't return anything, like null
: any = when you apply 'any' in typescript, you are essentially turning off typescript for that object/value, use this as a ghetto fix (this isn't a good idea) to get rid of red, better ded than red 
  1 legitimate use is when you are transitioning a JS code base to TS and don't immediately have the time to write all your complex types, so you just need a way to 'get around TS' for now - Temporary fix
: unknown = use when you don't know which type to use instead of 'any'

Lesson 22: Add return type to getPizzaDetail = 1:20:55 ==================================================================================================================================================================================
export function getPizzaDetail(identifier: string | number): Pizza | undefined { ... } #will return either a type Pizza or undefined

Lesson 23: Void return type = 1:24:20 ===================================================================================================================================================================================================
: void = another typescript specific type, a function that doesn't return anything, like null
hover over an object/function/value to see what the inferred type typescript is using for each
 function addNewPizza(pizza: Pizza): void { menu.push(pizza);} #explicitly tells TS to return nothing, since you are adding a pizza, this makes sense

Lesson 24: Add automatic ids to menu items = 1:26:15 ====================================================================================================================================================================================
Typescript can also help with refactoring code, it can also detect when scope (positioning) is messed up, if you declare a variable after you use it, TS will yell at you to hoist it up
'nextPizzaId++' You can use this for an ID when declaring the array of pizzas, it will automatically increment the id number as the pizza objects go on the array, instead of manually filling it in
for the 'function addNewPizza' it wasn't automatically putting in the ID, here is the fixed code for adding ID below
 function addNewPizza(pizza: Pizza): void {
    pizza.id = nextPizzaId++;
    menu.push(pizza);
  }

Lesson 25: Utility Types & Partial = 1:30:40 ===========================================================================================================================================================================================
Utility Types = in TS there are a number of types that can take other types in like a function as a parameter and return a new type, with some changes made to it
  built in to TypeScript; perform commonly needed modifications to existing types, uses <Generics Syntax>
<Generics Syntax> = Uses angle brackets <>
Partial Type = takes in a type that you pass in and turns all the properties into optional properties '?'
  type UpdatedUser = Partial<User> #passed in the custom 'type User' and it will turn it into a partial type that allows all properties to be optional, so when updating you don't need to update everything and can just update one part

Lesson 26: Omit Utility Type = 1:37:45 ==================================================================================================================================================================================================
'...' = spread operator - you can use the spread operator to spread the rest of a types properties onto a newly created type
Omit Type = Omit takes in a type AND a string(or union of strings) propert name(s), and returns a new type with those properties removed - will return a brand new type with properties specified removed
// This function adds a new user to the users array.
function addNewUser(newUser: Omit<User, "id">): User { //will ignore the 'id' and add it through the below increment
  // Create a new user object with the next available user ID.
  const user: User = {
    id: nextUserId++, // Increment the nextUserId counter and assign it to the user's ID.
    ...newUser, // Spread the properties from the newUser object into the user object.
  }
  // Push the new user object to the users array.
  users.push(user)
  // Return the newly created user object.
  return user
}






















