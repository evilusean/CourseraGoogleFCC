Start : 28May2025

NPM - Managing Packages with NPM ==================================================================================================================================================
First - Download/Clone boilerplate for course :
https://github.com/freeCodeCamp/boilerplate-npm/
The 'package.json' file is the center of any Node.js project or npm package. It stores information about your project.
  It consists of a single JSON object where information is stored in key-value pairs. 
  There are only two required fields; 'name' and 'version', but it’s good practice to provide additional information.
'npm init' #You can create the package.json file from the terminal using the npm init command.
  This will run a guided setup. Using npm init with the -y flag will generate the file without having it ask any questions, npm init -y
If you look at the file tree of your project, you will find the package.json file on the top level of the tree.
  This is the file that you will be improving in the next couple of challenges.
One of the most common pieces of information in this file is the 'author' field. 
  It specifies who created the project, and can consist of a string or an object with contact or other details. 
  An object is recommended for bigger projects, but a simple string like the following example will do for this project.
-- Error -- Tester isn't working, uploaded to github pages, still won't work, read the forums and they said making a glitch account might work
https://graceful-brass-cemetery.glitch.me
Hours Later, got it to pass. - At least I know it works, github pages doesn't work at all, either from repo or pages
'description' field; where a short, but informative description about your project belongs.
  If some day you plan to publish a package to npm, this is the string that should sell your idea to the user when they decide whether to install your package or not.
  However, that’s not the only use case for the description, it’s a great way to summarize what a project does. 
  It’s just as important in any Node.js project to help other developers, future maintainers or even your future self understand the project quickly.
'keywords' field is where you can describe your project using related keywords. Here's an example:
  "keywords": [ "descriptive", "related", "words" ],
'license' field is where you inform users of what they are allowed to do with your project. Some common licenses for open source projects include MIT and BSD. 
  License information is not required, and copyright laws in most countries will give you ownership of what you create by default. 
  However, it’s always a good practice to explicitly state what users can and can’t do. Here's an example of the license field:
  "license": "MIT",
'version' is one of the required fields of your package.json file. This field describes the current version of your project. Here's an example:
  "version": "1.2.0",
'dependencies' One of the biggest reasons to use a package manager, is their powerful dependency management. 
  Instead of manually having to make sure that you get all dependencies whenever you set up a project on a new computer, npm automatically installs everything for you.
  "dependencies": {
    "package-name": "version",
    "express": "4.14.0"}
Versions of the npm packages in the dependencies section of your package.json file follow what’s called Semantic Versioning (SemVer), 
  an industry standard for software versioning aiming to make it easier to manage dependencies. Libraries, frameworks or other tools published on npm should use SemVer in order to clearly 
  communicate what kind of changes projects can expect if they update.
Knowing SemVer can be useful when you develop software that uses external dependencies (which you almost always do).
  One day, your understanding of these numbers will save you from accidentally introducing breaking changes to your project without understanding 
  why things that worked yesterday suddenly don’t work today. This is how Semantic Versioning works according to the official website:
The MAJOR version should increment when you make incompatible API changes. The MINOR version should increment when you add functionality in a backwards-compatible manner. 
  The PATCH version should increment when you make backwards-compatible bug fixes. 
  This means that PATCHes are bug fixes and MINORs add new features but neither of them break what worked before. 
  Finally, MAJORs add changes that won’t work with earlier versions.
"package": "MAJOR.MINOR.PATCH" # basic syntax for versioning (verSeaning?)
'~' Use the Tilde-Character to Always Use the Latest Patch Version of a Dependency
In the last challenge, you told npm to only include a specific version of a package. 
  That’s a useful way to freeze your dependencies if you need to make sure that different parts of your project stay compatible with each other. 
  But in most use cases, you don’t want to miss bug fixes since they often include important security patches and (hopefully) don’t break things in doing so.
To allow an npm dependency to update to the latest PATCH version, you can prefix the dependency’s version with the tilde (~) character. 
  Here's an example of how to allow updates to any 1.3.x version.
  "package": "~1.3.8"
'^' Use the Caret-Character to Use the Latest Minor Version of a Dependency
Similar to how the tilde we learned about in the last challenge allows npm to install the latest PATCH for a dependency, the caret (^) allows npm to install future updates as well. 
  The difference is that the caret will allow both MINOR updates and PATCHes.
Remove a Package from Your Dependencies = Simply remove it from your dependancies

Basic Node and Express ==================================================================================================================================================================
Node.js = is a JavaScript runtime that allows developers to write backend (server-side) programs in JavaScript. 
  Node.js comes with a handful of built-in modules — small, independent programs — that help with this. 
  Some of the core modules include HTTP, which acts like a server, and File System, a module to read and modify files.
Express = is a lightweight web application framework, and is one of the most popular packages on npm. 
  Express makes it much easier to create a server and handle routing for your application, 
  which handles things like directing people to the correct page when they visit a certain endpoint like /blog.
'git clone https://github.com/freeCodeCamp/boilerplate-express/' #cloned repo locally, added to glitch so the FCC tester works
https://necessary-garrulous-bamboo.glitch.me
'npm run' = using a run script in the package.json file with 'npm run'.  
  For example, the '"start": "node server.js"' script would be 'run' from the terminal using 'npm run start'.
To implement server auto restarting on file save Node provides the '--watch' flag you can add to your start script 
  '"start": "node --watch server.js"' or you can install an npm package like 'nodemon'
- Error - First Test is failing on glitch = https://www.freecodecamp.org/news/how-to-run-the-freecodecamp-backend-challenges-locally/ 
In the first two lines of the file 'myApp.js', you can see how easy it is to create an Express app object. 
  let express = require("express");
  let app = express();
One fundamental method is 'app.listen(port)'. It tells your server to listen on a given port, putting it in running state. 
'app.METHOD(PATH, HANDLER)' #Let’s serve our first string! In Express, routes takes the following structure. 
  METHOD is an http method in lowercase. 
  PATH is a relative path on the server (it can be a string, or even a regular expression). 
  HANDLER is a function that Express calls when the route is matched. 
Handlers take the form 'function(req, res) {...}', where req is the request object, and res is the response object.
  function(req, res) {
    res.send('Response String');
  }
'res.sendFile(path)' #You can respond to requests with a file using the 'res.sendFile(path)' method. You can put it inside the 'app.get('/', ...)' route handler. 
Behind the scenes, this method will set the appropriate headers to instruct your browser on how to handle the file you want to send, according to its type.
  Then it will read and send the file. This method needs an absolute file path. We recommend you to use the Node global variable '__dirname' to calculate the path like this:
    absolutePath = __dirname + '/relativePath/file.ext'
Send the '/views/index.html' file as a response to GET requests to the / path. 
  If you view your live app, you should see a big HTML heading (and a form that we will use later…), with no style applied.
    app.get("/", (req, res) => {
      res.sendFile(path.join(__dirname, "views", "index.html")); #or this 'res.sendFile(path.join(__dirname, "views/index.html"));' you can use '/' slashes or ',' commas
    });
An HTML server usually has one or more directories that are accessible by the user. You can place there the static assets needed by your application (stylesheets, scripts, images).
'express.static(path)' #In Express, you can put in place this functionality using the middleware 'express.static(path)', 
  where the 'path' parameter is the absolute path of the folder containing the assets.
Middlewar = Basically, middleware are functions that intercept route handlers, adding some kind of information. A middleware needs to be mounted using the method :
'app.use(path, middlewareFunction)' #The first path argument is optional. If you don’t pass it, the middleware will be executed for all requests.
Mount the 'express.static()' middleware to the path'/public' with 'app.use()'. The absolute path to the assets folder is '__dirname + /public'.
'app.use("/public", express.static(__dirname + "/public"));' # will now load the assets in '/public' (css stylesheets for this instance)
While an HTML server serves HTML, an API serves data. 
REST(REpresentational State Transfer) API = allows data exchange in a simple way, without the need for clients to know any detail about the server. 
  The client only needs to know where the resource is (the URL), and the action it wants to perform on it (the verb). 
  The GET verb is used when you are fetching some information, without modifying anything. 
  These days, the preferred data format for moving information around the web is JSON. 
  Simply put, JSON is a convenient way to represent a JavaScript object as a string, so it can be easily transmitte
Let's create a simple API by creating a route that responds with JSON at the path '/json'. 
  You can do it as usual, with the 'app.get()' method. Inside the route handler, use the method 'res.json()', passing in an object as an argument.
  This method closes the request-response loop, returning the data. Behind the scenes, it converts a valid JavaScript object into a string,
  then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back.
  A valid object has the usual structure {key: data}. data can be a number, a string, a nested object or an array. 
  data can also be a variable or the result of a function call, in which case it will be evaluated before being converted into a string.
Serve the object {"message": "Hello json"} as a response, in JSON format, to GET requests to the /json route. 
  Then point your browser to your-app-url/json, you should see the message on the screen.
  app.get("/json", (req, res) => {
    res.json({ message: "Hello json" });
  });
'.env' # file is a hidden file that is used to pass environment variables to your application. 
  This file is secret, no one but you can access it, and it can be used to store data that you want to keep private or hidden.
  For example, you can store API keys from external services or your database URI. You can also use it to store configuration options.
  By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.
The environment variables are accessible from the app as 'process.env.VAR_NAME'. 
  The process.env object is a global Node object, and variables are passed as strings.
  By convention, the variable names are all uppercase, with words separated by an underscore.
  The '.env' is a shell file, so you don’t need to wrap names or values in quotes. 
  It is also important to note that there cannot be space around the equals sign when you are assigning values to your variables, e.g. 'VAR_NAME=value'. 
  Usually, you will put each variable definition on a separate line.
Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function in the application’s request-response cycle. 
  These functions execute some code that can have side effects on the app, and usually add information to the request or response objects. 
  They can also end the cycle by sending a response when some condition is met. If they don’t send the response when they are done, 
  they start the execution of the next function in the stack. This triggers calling the 3rd argument, 'next()'.
  function(req, res, next) {
    console.log("I'm a middleware...");
    next();
  }
'app.use(<mware-function>)' #To mount a middleware function at root level, you can use the app.use(<mware-function>) method. 
  In this case, the function will be executed for all the requests, but you can also set more specific conditions. 
  For example, if you want a function to be executed only for POST requests, you could use 'app.post(<mware-function>)'.
  Analogous methods exist for all the HTTP verbs ('GET', 'DELETE', 'PUT', …).
Note: Express evaluates functions in the order they appear in the code. This is true for middleware too. If you want it to work for all the routes, it should be mounted before them.
Build a simple logger. For every request, it should log to the console a string taking the following format: 'method path - ip'. 
  An example would look like this: 'GET /json - ::ffff:127.0.0.1'.
  Note that there is a space between method and path and that the dash separating path and ip is surrounded by a space on both sides. 
  You can get the request method (http verb), the relative route path, and the caller’s ip from the request object using 'req.method', 'req.path' and 'req.ip'. 
  Remember to call next() when you are done, or your server will be stuck forever. Be sure to have the ‘Logs’ opened, and see what happens when some request arrives.
// Logger middleware
app.use((req, res, next) => {
  console.log(`${req.method} ${req.path} - ${req.ip}`);
  next();
});
'app.METHOD(path, middlewareFunction)' #Middleware can be mounted at a specific route using app.METHOD(path, middlewareFunction). Middleware can also be chained within a route definition.
  app.get('/user', function(req, res, next) {
    req.user = getTheUserSync();  // Hypothetical synchronous operation
    next();
  }, function(req, res) {
    res.send(req.user);
  });
This approach is useful to split the server operations into smaller units. 
  That leads to a better app structure, and the possibility to reuse code in different places. This approach can also be used to perform some validation on the data. 
  At each point of the middleware stack you can block the execution of the current chain and pass control to functions specifically designed to handle errors. 
  Or you can pass control to the next matching route, to handle special cases. We will see how in the advanced Express section.
  app.get(
    "/now",
    (req, res, next) => {
      req.time = new Date().toString();
      next();
    },
    (req, res) => {
      res.json({ time: req.time });
    }
  );
# In the route 'app.get('/now', ...)' chain a middleware function and the final handler. 
  In the middleware function you should add the current time to the request object in the req.time key. 
  You can use new 'Date().toString()'. In the handler, respond with a JSON object, taking the structure '{time: req.time}'.































