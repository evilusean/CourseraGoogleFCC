Managing Packages with NPM
npm (Node Package Manager), is a command line tool to install, create, and share packages of JavaScript code written for Node.js. 
  There are many open source packages available on npm, so before starting a project, take some time to explore so you don't end up recreating the wheel for things like working with dates or 
  fetching data from an API.

In this course, you'll learn the basics of using npm, including how to work with the package.json and how to manage your installed dependencies.


Managing Packages with NPM :
How to Use package.json, the Core of Any Node.js Project or npm Package
Add a Description to Your package.json
Add Keywords to Your package.json
Add a License to Your package.json
Add a Version to Your package.json
Expand Your Project with External Packages from npm
Manage npm Dependencies By Understanding Semantic Versioning
Use the Tilde-Character to Always Use the Latest Patch Version of a Dependency
Use the Caret-Character to Use the Latest Minor Version of a Dependency
Remove a Package from Your Dependencies

Basic Node and Express
Node.js is a JavaScript runtime that allows developers to write backend (server-side) programs in JavaScript. Node.js comes with a handful of built-in modules — 
  small, independent programs — that help with this. Some of the core modules include HTTP, which acts like a server, and File System, a module to read and modify files.

In the last set of courses you learned to install and manage packages from npm, which are collections of smaller modules. These packages can help you build larger, 
  more complex applications.

Express is a lightweight web application framework, and is one of the most popular packages on npm. Express makes it much easier to create a server and handle routing for
  your application, which handles things like directing people to the correct page when they visit a certain endpoint like /blog.

In this course, you'll learn the basics of Node and Express including how to create a server, serve different files, and handle different requests from the browser.

Basic Node and Express
Meet the Node console
Start a Working Express Server
Serve an HTML File
Serve Static Assets
Serve JSON on a Specific Route
Use the .env File
Implement a Root-Level Request Logger Middleware
Chain Middleware to Create a Time Server
Get Route Parameter Input from the Client
Get Query Parameter Input from the Client
Use body-parser to Parse POST Requests
Get Data from POST Requests

MongoDB and Mongoose
MongoDB is a database application that stores JSON documents (or records) that you can use in your application. Unlike SQL, another type of database, 
  MongoDB is a non-relational or "NoSQL" database. This means MongoDB stores all associated data within one record, instead of storing it across many preset tables as in a SQL database.

Mongoose is a popular npm package for interacting with MongoDB. With Mongoose, you can use plain JavaScript objects instead of JSON, which makes it easier to work with MongoDB. 
  Also, it allows you to create blueprints for your documents called schemas, so you don't accidentally save the wrong type of data and cause bugs later.

In the MongoDB and Mongoose courses, you'll learn the fundamentals of working with persistent data including how to set up a model, and save, delete, and find documents in the database.

MongoDB and Mongoose
Install and Set Up Mongoose
Create a Model
Create and Save a Record of a Model
Create Many Records with model.create()
Use model.find() to Search Your Database
Use model.findOne() to Return a Single Matching Document from Your Database
Use model.findById() to Search Your Database By _id
Perform Classic Updates by Running Find, Edit, then Save
Perform New Updates on a Document Using model.findOneAndUpdate()
Delete One Document Using model.findByIdAndRemove
Delete Many Documents with model.remove()
Chain Search Query Helpers to Narrow Search Results

Back End Development and APIs Projects

You've worked with APIs before, but now that you know npm, Node, Express, MongoDB, and Mongoose, it's time to build your own.
  Draw on everything you've learned up to this point to create 5 different microservices, which are smaller applications that are limited in scope.

After creating these, you'll have 5 cool microservice APIs you can show off to friends, family, and potential employers. Oh,
  and you'll have a shiny new Back End Development and APIs Certification, too.

Microservice
Request Header Parser Microservice
URL Shortener Microservice
Exercise Tracker
File Metadata Microservice
