Start : 2025-1-11

Install Visual Studio + C# SDK
'dotnet new console -n <My New Project>' #used to create a new C# project
'dotnet build' #will build current app
'dotnet run' #will run app
C# is case sensitive
namespace HelloWorld {class Program {Static void Main(string[] args){console.WriteLine("Hello World!"}} } #same as in Java, except 'string' isn't capitlized 'Main' must be capitalized, required for .NET
using System; # declare dependancies with 'using' keyword 'using System' unused dependancies will be greyed out
System.Console.WriteLine("Hello World!"); #if you delete the 'using System' at the top, you can still call it by adding a 'System.', you don't have to define that you are using 'System' can just be used
'Console.ReadLine();' #will wait for an input from the user, if put before the end of a function, will wait till enter is pressed before closing

Numeric Data Types = 11:00 ===================================================================================================================================================================================
int age = 23; #integer, 'initializing and declaring in the same line' or just initialize first then declare later like 'int age;' 'age = 23' 
declare = creating the variable, initialize = first time assigning value to a variable, assignment = second+ time when you give a value to a variable
Console.WriteLine(age); #prints variable 'age' to console, nothing groundbreaking here
long bigNumber = 1234567890123456789L; #saves as int 32(4 bytes), notice the capital 'L' at the end, this tells the compiler to read it as a long number (int 64 = 8 bytes), same as Java
float negative = -123.456F; #float: Single-precision floating-point. It typically has 7 decimal digits of precision., notice the 'F' at end of number, this declares it as a float Size: 4 bytes (32 bits)
double negative = -123.456; #double: Double-precision floating-point. It typically has 15-16 decimal digits of precision. Size: 8 bytes (64 bits)
decimal money = 3.50M; //decimal Precision: 28-29 significant digits Size: 16 bytes (128 bits), Notice the 'M' at the end, this makes it explicit for the compiler
int x, y, z; #will allow you to declare multiple variable integers at once instead of each taking up a line, you can declare them the same way as well 'int x=10, y=20, z=30;' will work

Text Based Data Types = 18:00 =================================================================================================================================================================================
string name = "Sean"; //it's a string.. I've Sean this so many times before, only thing to note is it must be in '"' quotaSean marks (the double kind) 
char letter = 'Z'; #char - use single quotes for characters ''', you also can't store an empty char like ''

Converting Strings to Numbers = 20:30 =========================================================================================================================================================================
int convertedAge = Convert.ToInt32(textAge); #will convert a number that is text to an Int32 "33", can be done for any number datatype
'Convert.ToInt64(textAge);' 'Convert.ToDouble()' 'Convert.ToSingle()' 'Convert.ToDecimal()' #same as above, any numeric datatype
If there is a letter inside, it will create a runtime error when compiling, create a try pass block to escape these errors

Boolean DataType = 24:30 ======================================================================================================================================================================================
bool isTrue = true; #boolean

Operators = 25:40 =============================================================================================================================================================================================
currentYear++; #will add 1 to variable 'currentYear'
currentYear--; #will subtract one
age = age + 1;
age += 1;
when dividing, it will default go to an integer, so decimal places will be truncated - if you add divide multiply or whatever 2 integers it will return an integer, at least one value must be a float4decimals
name += " is brogramming"; #you can concatonate strings(add together), but can't subtract
when you add 2 chars together, it will add the unicode values as integer variables
'i++' #will use the value, then increment
'++i' #will increment, then use the value

%Modulo/Remainder = 31:35 =======================================================================================================================================================================================
If you were to divide 10/3 = it would return 3 (.333333 gets truncated because of the integer) 
console.WriteLine(firstNum % secondNum); //will return the remainder of 'firstNum' divided by 'secondNum' 10/3 = 9 (remainder of 1), will return 1
console.WriteLine(firstNum % 2); //will return 0 if firstNum is even
The best way to determine if a number is odd or even is to divide it by 2, fizzbuzz, if the value returned by 'firstNum % 2' is 0, it means it is an even number

Var Keyword = 35:10 ==============================================================================================================================================================================================
define a variable by specifying type followed by name with value 'int numberName = 123;'
var = 123; #compiler will figure out what type it is based on the value initialized with it
for numbers it will default to int32, explicitly pick a larger type like int64 'long' by adding an 'L' at the end like 'var bigNumber = 999L', you might need to explicitly define each type using characters

Cont keyword = 39:15 =============================================================================================================================================================================================
const int myConst = 10; #Const Keyword = constant value that cannot be changed, if you want to disable the ability for something to change a variable, use const
'cw' + <TAB> + <TAB> = Console.WriteLine() #hotkey in VScode, instead of typing out
all instances of a 'const' in your code will be a simple find and replace, every time the compiler sees a const, will take the value and replace the variable with it

Exercise1: Storing User Data = 43:15 ===============================================================================================================================================================================
if an int starts with '0' it won't print out, '0123450' would return '123450' - if you want to store leading zeros, store it as a string

Exercise2: Odd/Even Checker = 45:00 ===============================================================================================================================================================================
Fizzbuzz did it better - if 'checkEm' is 0, it's even, if 1 odd,

Console Input/Output = 47:00 ======================================================================================================================================================================================
System.Console.WriteLine(); #to output
string userName = Console.ReadLine(); #will take the users input 'Readline()' and stores it as a string variable
Console.WriteLine("Hello " + userName); #will print newly saved variable
System.Console.Write("Enter your name: "); #allows user to enter input after the ':' colon and not on a new line. give them your colon, the right line to write.
Try to combine everything with concatonation on the same line, instead of writing multiple lines of code for each string

If Statements = 55:30 ==============================================================================================================================================================================================
string ageInput = Console.ReadLine(); //will be read in as a string
int userAge = Convert.ToInt32(ageInput); //store variables correctly, to store a string to int, convert the string
You should always save the values in the appropriate variable datatype, it will be taken in as a string, and converted into an int32
if (true) {do this} #if statements are same as any other coding language, 
Operators are '>=' = greater than equal to, '<' = less than, '<=' less than equal to, and 
  '==' = equals to
  '!=' = not equal to
  '||' = or operator
  '&&' = and operator
            if (userAge <= 0 || userAge > 120) {
                Console.WriteLine("Invalid age.");
            }
            else 
            {
            if (userAge >= 65) {
                Console.WriteLine("You are a senior citizen.");
            }
            else if (userAge >= 18) {
                Console.WriteLine("You are an adult.");
            } else if (userAge >= 13 && userAge <= 17) {
                Console.WriteLine("You are a teenager.");
            } else {
                Console.WriteLine("You are a child.");}}
Above you can see that the initial age check, else check the age nested if statement, 
'int numberA = Convert.ToInt32(Console.ReadLine());' #one liner for getting a string number from user and converting to an int and saving to a variable 'numberA'

Switch Statements = 1:09:15 =======================================================================================================================================================================================
Another method to decide different paths in your code 
switch (day)            {                case 1: Console.WriteLine("Monday");                    break;                case 2: Console.WriteLine("Tuesday");                    break;}
#basic switch statement, 'day' is whatever variable you are creating if statements for 'case 1'(if the number is 1, print Monday.... etc. main keywords are 'switch(variable)' 'case #' 'break'
break #will break out of the loop, if you don't put in will get a syntax error
if you don't use a 'break' you can stack cases like : 'case 2 case 3: <action>' and then if either case 2 or 3 happen the <action> will be taken for either, similar to '||' or operator
'default: <action> break;' #will perform a default action if none of the cases are met, similar to 'else' statement

For Loops = 1:14:30 ===============================================================================================================================================================================================
iteration in code is the ability to loop and do a certain task, for loops will loop for a certain amount of times given the parameters
for (int i = 0; i < 5; i++) {} #same as every other programming language
for (int i = 0; i < loop; i++) {} #you don't need to use '.length' like in python, if it is an integer, it will just know

While Loops = 1:22:30 =============================================================================================================================================================================================
also iterates through code, while loops will do something while a condition is truee
while (condition) {do} #basic syntax for a while loop
'do while loop' is similar to a 'while loop' but except the while only happens if the condition turns true, the 'do while' will always activate at least once and check the condition at the end
do {<will always do once>} while (condition) {<will run if condition is true>} #basic syntax for 'do while loop'

Conditional Operator = 1:32:55 ====================================================================================================================================================================================
Conditional Operator = Ternary Operator = if you have 'if statements' that are pretty basic, you can use a conditional operator instead - one liner
'condition ? true : false' #basic syntax for a conditional operator 'condition' is the condition '?' is the ternary operator 'true' is what happens if it returns true and 'false' is what happens if it is false
Console.WriteLine(ageTest >= 0 ? "Valid age" : "Invalid age"); #if 'ageTest' variable is lesss than 0 will return 'Invalid' and if over 0  will return 'valid'

Numeric Formatting = 1:36:20 ======================================================================================================================================================================================
If you only want a certain number of decimals(close enough), use numeric formatting patterns to acheive this.
double value = 1000D / 12.34D; # returns '81.0372771474878' 
Console.WriteLine(string.Format("{0:0.00}", value)); # returns '81.04' the first '0' in '{0:0.00}' tells it to start from the first number from the left, and the '0.00' tells it to take the 2 decimal places
  Future Sean, just remember the term 'Numeric Formatting' and get AI to do it, similar to GREP but with numbers
It will default round the number, but will only affect the appearance to the user and won't affect the actual variable
Console.WriteLine(string.Format("{0:0.#}", value)); # '#' hashtags will remove any trailing 0's but will allow any other digit to appear
you can add anything in between the '""' quotes, it won't mess up the pattern, it's similar to a normal string outside the '{}'
Also, the above method will automatically format '-' negatives out, use the below method for '-' currencies in our fiat fractional reserve debt based economies, that liability is someones asset (P < P + I)
Console.WriteLine(money.ToString("C")); //will display a currency string format, 
the program will check UTC data(timecode) and add the correct currency symbol, to display a different currency, if you are running this code on a cloud computer, it will use their localized time
Console.WriteLine(money.ToString("C", new System.Globalization.CultureInfo("en-GB"))); #will display the currency in british pounds, or whatever you want

TryParse Function = 1:49:35 ========================================================================================================================================================================================
As soon as your program hits an exception error/fatal error(typo or whatever) it will close the program, to fix this, use a 'Try Parse function', even if the parse fails, the program won't
int.TryParse(<string>, out <Integer>) #will convert a string to it's 32 bit integer equivalent, and return an integer
#you can wrap a TryParse in a while loop, so while the boolean 'success' is false(no valid number' it will ask again, and won't create a fatal exception closing the program, losing all data

Exercise : Times Table = 1:59:45 ===================================================================================================================================================================================

























