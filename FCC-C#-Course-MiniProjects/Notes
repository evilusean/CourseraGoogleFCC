Start : 2025-1-11

Install Visual Studio + C# SDK
'dotnet new console -n <My New Project>' #used to create a new C# project
'dotnet build' #will build current app
'dotnet run' #will run app
C# is case sensitive
namespace HelloWorld {class Program {Static void Main(string[] args){console.WriteLine("Hello World!"}} } #same as in Java, except 'string' isn't capitlized 'Main' must be capitalized, required for .NET
using System; # declare dependancies with 'using' keyword 'using System' unused dependancies will be greyed out
System.Console.WriteLine("Hello World!"); #if you delete the 'using System' at the top, you can still call it by adding a 'System.', you don't have to define that you are using 'System' can just be used
'Console.ReadLine();' #will wait for an input from the user, if put before the end of a function, will wait till enter is pressed before closing

Numeric Data Types = 11:00 ===================================================================================================================================================================================
int age = 23; #integer, 'initializing and declaring in the same line' or just initialize first then declare later like 'int age;' 'age = 23' 
declare = creating the variable, initialize = first time assigning value to a variable, assignment = second+ time when you give a value to a variable
Console.WriteLine(age); #prints variable 'age' to console, nothing groundbreaking here
long bigNumber = 1234567890123456789L; #saves as int 32(4 bytes), notice the capital 'L' at the end, this tells the compiler to read it as a long number (int 64 = 8 bytes), same as Java
float negative = -123.456F; #float: Single-precision floating-point. It typically has 7 decimal digits of precision., notice the 'F' at end of number, this declares it as a float Size: 4 bytes (32 bits)
double negative = -123.456; #double: Double-precision floating-point. It typically has 15-16 decimal digits of precision. Size: 8 bytes (64 bits)
decimal money = 3.50M; //decimal Precision: 28-29 significant digits Size: 16 bytes (128 bits), Notice the 'M' at the end, this makes it explicit for the compiler
int x, y, z; #will allow you to declare multiple variable integers at once instead of each taking up a line, you can declare them the same way as well 'int x=10, y=20, z=30;' will work

Text Based Data Types = 18:00 =================================================================================================================================================================================
string name = "Sean"; //it's a string.. I've Sean this so many times before, only thing to note is it must be in '"' quotaSean marks (the double kind) 
char letter = 'Z'; #char - use single quotes for characters ''', you also can't store an empty char like ''

Converting Strings to Numbers = 20:30 =========================================================================================================================================================================
int convertedAge = Convert.ToInt32(textAge); #will convert a number that is text to an Int32 "33", can be done for any number datatype
'Convert.ToInt64(textAge);' 'Convert.ToDouble()' 'Convert.ToSingle()' 'Convert.ToDecimal()' #same as above, any numeric datatype
If there is a letter inside, it will create a runtime error when compiling, create a try pass block to escape these errors

Boolean DataType = 24:30 ======================================================================================================================================================================================
bool isTrue = true; #boolean

Operators = 25:40 =============================================================================================================================================================================================
currentYear++; #will add 1 to variable 'currentYear'
currentYear--; #will subtract one
age = age + 1;
age += 1;
when dividing, it will default go to an integer, so decimal places will be truncated - if you add divide multiply or whatever 2 integers it will return an integer, at least one value must be a float4decimals
name += " is brogramming"; #you can concatonate strings(add together), but can't subtract
when you add 2 chars together, it will add the unicode values as integer variables
'i++' #will use the value, then increment
'++i' #will increment, then use the value

%Modulo/Remainder = 31:35 =======================================================================================================================================================================================
If you were to divide 10/3 = it would return 3 (.333333 gets truncated because of the integer) 
console.WriteLine(firstNum % secondNum); //will return the remainder of 'firstNum' divided by 'secondNum' 10/3 = 9 (remainder of 1), will return 1
console.WriteLine(firstNum % 2); //will return 0 if firstNum is even
The best way to determine if a number is odd or even is to divide it by 2, fizzbuzz, if the value returned by 'firstNum % 2' is 0, it means it is an even number

Var Keyword = 35:10 ==============================================================================================================================================================================================
define a variable by specifying type followed by name with value 'int numberName = 123;'
var = 123; #compiler will figure out what type it is based on the value initialized with it
for numbers it will default to int32, explicitly pick a larger type like int64 'long' by adding an 'L' at the end like 'var bigNumber = 999L', you might need to explicitly define each type using characters

Cont keyword = 39:15 =============================================================================================================================================================================================
const int myConst = 10; #Const Keyword = constant value that cannot be changed, if you want to disable the ability for something to change a variable, use const
'cw' + <TAB> + <TAB> = Console.WriteLine() #hotkey in VScode, instead of typing out
all instances of a 'const' in your code will be a simple find and replace, every time the compiler sees a const, will take the value and replace the variable with it

Exercise1: Storing User Data = 43:15 ===============================================================================================================================================================================
if an int starts with '0' it won't print out, '0123450' would return '123450' - if you want to store leading zeros, store it as a string

Exercise2: Odd/Even Checker = 45:00 ===============================================================================================================================================================================
Fizzbuzz did it better - if 'checkEm' is 0, it's even, if 1 odd,

Console Input/Output = 47:00 ======================================================================================================================================================================================
System.Console.WriteLine(); #to output
string userName = Console.ReadLine(); #will take the users input 'Readline()' and stores it as a string variable
Console.WriteLine("Hello " + userName); #will print newly saved variable
System.Console.Write("Enter your name: "); #allows user to enter input after the ':' colon and not on a new line. give them your colon, the right line to write.
Try to combine everything with concatonation on the same line, instead of writing multiple lines of code for each string

If Statements = 55:30 ==============================================================================================================================================================================================
string ageInput = Console.ReadLine(); //will be read in as a string
int userAge = Convert.ToInt32(ageInput); //store variables correctly, to store a string to int, convert the string
You should always save the values in the appropriate variable datatype, it will be taken in as a string, and converted into an int32
if (true) {do this} #if statements are same as any other coding language, 
Operators are '>=' = greater than equal to, '<' = less than, '<=' less than equal to, and 
  '==' = equals to
  '!=' = not equal to
  '||' = or operator
  '&&' = and operator
            if (userAge <= 0 || userAge > 120) {
                Console.WriteLine("Invalid age.");
            }
            else 
            {
            if (userAge >= 65) {
                Console.WriteLine("You are a senior citizen.");
            }
            else if (userAge >= 18) {
                Console.WriteLine("You are an adult.");
            } else if (userAge >= 13 && userAge <= 17) {
                Console.WriteLine("You are a teenager.");
            } else {
                Console.WriteLine("You are a child.");}}
Above you can see that the initial age check, else check the age nested if statement, 
'int numberA = Convert.ToInt32(Console.ReadLine());' #one liner for getting a string number from user and converting to an int and saving to a variable 'numberA'

Switch Statements = 1:09:15 =======================================================================================================================================================================================
Another method to decide different paths in your code 
switch (day)            {                case 1: Console.WriteLine("Monday");                    break;                case 2: Console.WriteLine("Tuesday");                    break;}
#basic switch statement, 'day' is whatever variable you are creating if statements for 'case 1'(if the number is 1, print Monday.... etc. main keywords are 'switch(variable)' 'case #' 'break'
break #will break out of the loop, if you don't put in will get a syntax error
if you don't use a 'break' you can stack cases like : 'case 2 case 3: <action>' and then if either case 2 or 3 happen the <action> will be taken for either, similar to '||' or operator
'default: <action> break;' #will perform a default action if none of the cases are met, similar to 'else' statement

For Loops = 1:14:30 ===============================================================================================================================================================================================
iteration in code is the ability to loop and do a certain task, for loops will loop for a certain amount of times given the parameters
for (int i = 0; i < 5; i++) {} #same as every other programming language
for (int i = 0; i < loop; i++) {} #you don't need to use '.length' like in python, if it is an integer, it will just know

While Loops = 1:22:30 =============================================================================================================================================================================================
also iterates through code, while loops will do something while a condition is truee
while (condition) {do} #basic syntax for a while loop
'do while loop' is similar to a 'while loop' but except the while only happens if the condition turns true, the 'do while' will always activate at least once and check the condition at the end
do {<will always do once>} while (condition) {<will run if condition is true>} #basic syntax for 'do while loop'

Conditional Operator = 1:32:55 ====================================================================================================================================================================================
Conditional Operator = Ternary Operator = if you have 'if statements' that are pretty basic, you can use a conditional operator instead - one liner
'condition ? true : false' #basic syntax for a conditional operator 'condition' is the condition '?' is the ternary operator 'true' is what happens if it returns true and 'false' is what happens if it is false
Console.WriteLine(ageTest >= 0 ? "Valid age" : "Invalid age"); #if 'ageTest' variable is lesss than 0 will return 'Invalid' and if over 0  will return 'valid'

Numeric Formatting = 1:36:20 ======================================================================================================================================================================================
If you only want a certain number of decimals(close enough), use numeric formatting patterns to acheive this.
double value = 1000D / 12.34D; # returns '81.0372771474878' 
Console.WriteLine(string.Format("{0:0.00}", value)); # returns '81.04' the first '0' in '{0:0.00}' tells it to start from the first number from the left, and the '0.00' tells it to take the 2 decimal places
  Future Sean, just remember the term 'Numeric Formatting' and get AI to do it, similar to GREP but with numbers
It will default round the number, but will only affect the appearance to the user and won't affect the actual variable
Console.WriteLine(string.Format("{0:0.#}", value)); # '#' hashtags will remove any trailing 0's but will allow any other digit to appear
you can add anything in between the '""' quotes, it won't mess up the pattern, it's similar to a normal string outside the '{}'
Also, the above method will automatically format '-' negatives out, use the below method for '-' currencies in our fiat fractional reserve debt based economies, that liability is someones asset (P < P + I)
Console.WriteLine(money.ToString("C")); //will display a currency string format, 
the program will check UTC data(timecode) and add the correct currency symbol, to display a different currency, if you are running this code on a cloud computer, it will use their localized time
Console.WriteLine(money.ToString("C", new System.Globalization.CultureInfo("en-GB"))); #will display the currency in british pounds, or whatever you want

TryParse Function = 1:49:35 ========================================================================================================================================================================================
As soon as your program hits an exception error/fatal error(typo or whatever) it will close the program, to fix this, use a 'Try Parse function', even if the parse fails, the program won't
int.TryParse(<string>, out <Integer>) #will convert a string to it's 32 bit integer equivalent, and return an integer
#you can wrap a TryParse in a while loop, so while the boolean 'success' is false(no valid number' it will ask again, and won't create a fatal exception closing the program, losing all data

Exercise : Times Table = 1:59:45 ===================================================================================================================================================================================
for (int i = 1; i <= 10; i++){Console.WriteLine($"{number} x {i} = {number * i}");} #will loo through, take each 'number' user input and multiply it by 'i' the iteration, and print in an easy to read format

Exercise : FizzBuzz = 2:03:10 ======================================================================================================================================================================================
function fizzbuzz(n) {
for i=1..n:
if (i % 3 == 0 && i % 5 == 0) print "fizzbuzz"
else if (i % 3 == 0) print "fizz"
else if (i % 5 == 0) print "buzz"
else print i
} #this is in JS, not C#,
for (int i = 1; i <= 15; i++)            {
                if (i % 3 == 0 && i % 5 == 0)                {
                    System.Console.WriteLine("FizzBuzz");                }
                else if (i % 3 == 0)                {
                    System.Console.WriteLine("Fizz");                }
                else if (i % 5 == 0)                {
                    System.Console.WriteLine("Buzz");                }
                else                {
                    System.Console.WriteLine(i);                }
#saved a more memory efficient way by using stored boolean variables
class Program{
    static void Main(string[] args)    {
        for (int i = 1; i <= 15; i++)        {
            bool threeDiv = i % 3 == 0;
            bool fiveDiv = i % 5 == 0;
            if (threeDiv && fiveDiv)            {
                Console.WriteLine("FizzBuzz");            }
            else if (threeDiv)            {
                Console.WriteLine("Fizz");            }
            else if (fiveDiv)            {
                Console.WriteLine("Buzz");            }            
            else            {
                Console.WriteLine(i);            }        }    }}

Verbatim String Literal (@) = 2:08:25 =========================================================================================================================================================================
in C#, when you are constructing strings with '/' backslashes, you will need to use '//' double backslashes - first backslash is used for an escape character followed by the character you want to display
Other Escape Characters: \t #tab, \n #new line, \" #quote marks
@"" = Verbatim identifier, whatever you see is whatever happens, no need for escape characters, will negate all '/' escape characters, '/n' new lines won't work for formatting 
  @"""doubles""" = '"' quotation marks can still be used if you double up, '""' use ""double""" speech marks

String Formatting ({0}) = 2:17:00 =============================================================================================================================================================================
This is the most common for outputting values to the console is using this format, type something in as a static string and add a variable to it
Console.WriteLine($"Hello, my name is {name} and I am {age} years old."); #notice the '$' dollar sign, lets the compiler know to swap out the '{variables}'
Console.WriteLine("Hello, my name is {0} and I am {1} years old.", name, age); // Composite Formatting = same way as above, but with a format string, name replaces {0}, age replaces {1} 

String Interpolation ($) = 2:22:35 ============================================================================================================================================================================
'$' = uses a dollar sign as a reference, wrapping variables in {curly braces} :
Console.WriteLine($"Hello, my name is {name} and I am {age} years old.");
String interpolation, probably the easiest method to work with for humans, because you can see the spaces in the strings, easier readability

String Concationation (+) = 2:26:00 ===========================================================================================================================================================================
string test = string.Concat("Hello, my name is ", firstName, "."); #another way to add words and variables together 'string.Concat' using ',' instead of '+'
You can also use an array instead of arguments for 'string.Concat' method
How many ways can you concat a cat? 

Empty String = 2:30:40 ========================================================================================================================================================================================
When you create a string you might want to jjust initialize the value with '""' empty quotes 'string name = "";' or 'string name = string.Empty;'
string name = ""; //initialize with an empty string
string name2 = string.Empty; //initialize with an empty string
# both do the same thing, bottom is just more readable for future sean

String Equals Function = 2:33:00 ==============================================================================================================================================================================
Console.WriteLine(name == name2); //'==' comparison easy way to compare strings, true
Console.WriteLine(name.Equals(name2)); //'.Equals()' new function to compare strings for equlas, true
if (name != "") #empty string check using '!=' not equals to empty string 
if (!name4.Equals("")) #empty string check, new function
Best Practice : using '.Equals' because it checks the reference in the memory, will check the values comparison

String Iteration (looping) = 2:38:00 ===========================================================================================================================================================================
If you want to return only a subsection of a string or an element, use '[]' square bracket indexing to pull out the part you want, you can grab a char from a string from indexing 
for (int i = 0; i < message.Length; i++) {                Console.WriteLine(message[i]);} #similar to JS, you have access to '.length' for writing a for loop
Thread.Sleep(100); //typewriter aeffect, 1000MS = 1 second, 100MS=0.1 second #'.Sleep' adds a delay for each cycle of the loop

String IsNullOrEmpty function = 2:47:55 ========================================================================================================================================================================
string.IsNullOrEmpty(name) #used to check if string 'name' is null or empty/valid before performing any actions on it
!string.IsNullOrEmpty(name) #use the '!' not operator to check if there is something inside, when used in an 'if' statement 
string name = null; null is not empty = it literally means there is no value, at all. empty would be "" an empty string or blank. null is null
  Your code will crash if it is ran on something with a null variable, it is best to use 2 nested if statements to run this check like this : 'if (!string.IsNullOrEmpty(name)) { if ...}}' to improve stability

Exercise : Print String in Reverse = 2:53:05 ===================================================================================================================================================================
for (int i = message.Length - 1; i >= 0; i--){Console.Write(message[i]);} # since C# is [0] bound indexing, you need to subtract 1, then 'i--' to go backwards till '0', that's the trick for this one
  similar to python, sort of, where you can just do [-1], but you need to do '.Length -1'

Exercise: Password Checker = 3:01:45 ===========================================================================================================================================================================
just a rehash of what I just learned

Arrays [] = 3:11:00 ============================================================================================================================================================================================
Arrays = Arrays are a collection of elements of the same type, Arrays are fixed in size, Arrays are zero-based, Arrays are reference types
int[] numbers = new int[3]; #basic syntax, declare the type 'int' declare an array '[]' array name 'numbers', 'new int[3]' = new instance of integers with 3 positions - instantiate = new class
Arrays start at [0] so 'new int[3]' is really new int '[2]'
type[] name = new type[size]; #basic syntax
for (int i = 0; i < numbers.Length; i++) {Console.WriteLine("Enter a number: ");numbers[i] = Convert.ToInt32(Console.ReadLine());} 
//just change the size of the array at top of code to adjust how many inputs are needed
//dynamic loop, will adjust to whatever size the array is, and ask for correct amount of inputs
triangle sums up three angles to see if it adds up to 180 degrees

Array Sorting = 3:33:00 =========================================================================================================================================================================================
int[] numbers = new int[]{1, 5, 3, 7, 2, 9, 8, 4, 6 }; #notice here how you didn't have to declare how many ints there are, if you give it the list in '{}' it can count on compile
test.Replace(" ", ""); #new keyword/method/function(idk what to call it) '.Replace' does what it says, will replace the first " " space with "" empty(remove the spaces)
Array.Sort(numbers); # Will sort an array in ascending(smallest first) order on the array 'numbers' - notice we didn't have to save this to a variable then print, it affects it straight away, then can be used

Array Reversal = 3:35:50 ========================================================================================================================================================================================
Array.Reverse(numbers); # will sort array in descending order on the array 'numbers
Allows you to flip the order, instead of requesting the DB to flip the order around and send the data, it's better to reverse the list, you can price by(or whatever) ascending or descending just change the method
Flipping the data locally is best practice, as it uses less resources than a DB backend request, when you can, use these functions/methods locally instead of sending another DB request

Array Clearing = 3:39:20 ========================================================================================================================================================================================
Array.Clear(numbers, 0, numbers.Length); # 'Array.Clear' call the function, 'numbers' array variable, '0' where you start(0 based index=first), and 'numbers.Length' is clear the entire array
Clearing just replaces all the values of the elements in the array to '0'
Array.Clear(numbers, 5, 5); #will replace the 5th position, and count 5 forward, 
Arrays can not be added or changed after they have been created, 'Array.Clear' will modify/reset back to 0 

Array IndexOf = 3:45:40 ==========================================================================================================================================================================================
If you are trying to search for a number, use index of to find the [index] of it, it will return the first one found, so if there are 2 values of the same, it will return the first
Array.IndexOf(numbers, 7); #'Array.IndexOf' the function being called, 'numbers' the array to be searched, '7' the number searched for
index = Array.IndexOf(numbers, 10); #will search 'numbers' for '10' and save it to the variable 'index'
Console.Write("Enter a number to search: ");
            int search = Convert.ToInt32(Console.ReadLine()); //user input to search for a value in the array
            int position = Array.IndexOf(numbers, search); //finds the index of the value in the array
            if (position > -1) //if the value is found, -1 is returned if the value is not found            
            {Console.WriteLine($"The number {search} is found at position {position + 1}.");} // +1 to make it human readable not [0] based
            else //if the value is not found{Console.WriteLine($"The number {search} is not found.");}
# pasted all that for future sean to know that if the number is not found, it will be '-1' default, if it has any position in the [index], it found a number that matches
you can also search strings, if it's sorted, you can search only for names that start with 'a' (or whatever) and only search a specific range making it quicker by defining the correct parameters

Lists <> = 3:55:00 ================================================================================================================================================================================================
Lists are a collection of elements of the same type, Lists are dynamic in size, Lists are zero-based , Lists are reference types
All Arrays are stacked data = when initialized with a certain length, can not be increased or decreased, only modify the data inside - this saves memory
  It is possible to add a length by copying over an old array to a new one and then adding a new value at the end, this is tedious though
Lists are good for registers, when you don't know the size you will need, Lists are dynamic, use Arrays when you know exactly what you are working with like a tic tac toe array
List<type> name = new List<type>(); #basic syntax 'List' keyword 'type' 
List<int> numbers = new List<int>(); //new list, no size given, will adjust to size of values - basic syntax
numbers.Add(5); //add a value to the list manually
numbers.Remove(5) // Remove a number from the list manually  // .RemoveAll() removes all instances of a value, or a specific positon with .RemoveAt()
Can Reverse/Sort/IndexOf, same as arrays, 

Dictionary = 4:04:00 ==============================================================================================================================================================================================
Dictionaries = Dictionaries are a collection of *key-value pairs*, Dictionaries are dynamic in size, Dictionaries are zero-based, Dictionaries are reference types
Key and value can be any type you want 
'using System.Collections.Generic;' #specify this at the top, or you will need to include it every time you want to add a dictionary
Dictionary<int, string> names; = new Dictionary<int, string>
  # Basic syntax for creating a new dictionary, 'int' will be the datatype for the keys, and 'string' will be the datatype for the value - 'names' is the dictionary variable
'names.Add(1, "Sean");' // how to add a key-value pair to a dictionary, same as a list
{            { 1, "Sean" }, // how to add a key-value pair to a dictionary            { 2, "Shawn" },            { 3, "Shaun" }        } #wrap it in curly braces, and place after the declaraSean
*KEYS MUST BE UNIQUE* will cause a runtime error if there are duplicates, values can be the same, but keys MUST be unique
Dictionaries are dynamic, like lists 
Dictionaries are not like an [index]
for (int i = 1; i <= names.Count; i++) {Console.WriteLine(names[i]);} #this will print out each item, but only because they are labeled '1' '2' etc, not because of index [0] [1] etc
for (int i = 0; i < names.Count; i++){KeyValuePair<int, string> pair = names.ElementAt(i); Console.WriteLine($"{pair.Key} = {pair.Value}") // how to access a value in a dictionary}
  #how to write it so it goes through the [INDEX] Not the KEY in a for loop new keywords 'KeyValuePair' declares a new variable 'pair' 'names' old variable '.ElementAt' goes through each item in dict
  #{pair.Key} is how you call the key, and '{pair.Value}' how you call the value, also new keywords/methods/functions
foreach (var item in names)        {            Console.WriteLine($"{item.Key} = {item.Value}");         }
  # you can also use 'var' and accomplish the same in a 'foreach' loop, does the same as above in less code 'item' instead of 'pair' 
Console.WriteLine(teachers["Math"]); #How to search for a key and retrieve the value, will search the dictionary 'teachers' for the key 'Math' and print the value attached to it
If a key is not found, it will throw an exception = runtime error = crash = No typos - you can fix this with a 'int.TryParse' before so it won't crash the code
if (teachers.TryGetValue("Math", out string teacher)) #'teachers' is the dictionary, 'Math' is the key, and 'out string teacher' is the second parameter which gets output, takes the value and place it in 'teacher'
teachers["Math"] = "The Count"; # will change the value for key 'Math', use below method for safer code
if (teachers.ContainsKey("Math")) {teachers.Remove("Math");} else {Console.Writeline("Math not found")} #safer way to remove the key/value for 'Math' without crashing if you typo

Exercise : Odd/Even number split = 4:16:30 ========================================================================================================================================================================
basically fizzbuzz with lists

Exercise : Array of Multiples = 4:23:10 ===========================================================================================================================================================================
The trick here is not to start the loop at '0' since you are doing multiples, while filling the array.. I'll just paste it below :
int[] result = new int[length];            for (int i = 0; i < length; i++) {result[i] = num * (i + 1);}  #you can see how the loop works, and it takes the size of array from 'length', avoiding the [0] multiple
for (int i = 0; i < length; i++, counter++) #also of note, you aren't stuck only using 3 arguments here, you can add more that will activate everytime the loop is run, note the 'counter++'

Functions = 4:30:00 ===============================================================================================================================================================================================
Functions can also be called methods (used interchangably)
DRY = Dont Repeat Yourself
static void Main(string[] args) #every program requires the 'static void Main' the parameters '(..)' can be cut, as they aren't neccesary, this function must be capital 'M' Main
  'static' = means you can access it anywhere and everywhere - no need to create a 'new' instance of the class in order to access it
    You can access something outside of it's class by doing '<class name>.<function name>' where class name is the name of the class that holds the functionm if you don't want it usable everywhere remove 'static'
    if it is not 'static' you need to reference it like this '<class name><variable name> = new <class name>();' to instantiate and use any code in that classes code block by '<variable name>.<function name>'

Void Functions = 4:35:40 ==========================================================================================================================================================================================
'void' specify what return type you want to have, void = nothing, not just for angsty teenagers and Nietzsche enjoyers *stares back at you*
since you are running code in a function (like 'Console.Write') and it is being used within it's own codeblock, you aren't actually using it within your 'Main' function, so it is still a void
void just does the contents of the function, reaches the bottom, and that's it.
'int.TryParse' returns something back, a boolean, if it returns 'true' you can then do something with that code, if it fails, it just won't crash

Return Type Functions = 4:41:30 ===================================================================================================================================================================================
'Console.Title = "Sean";' #lets you change the tab title of your console programs
Global scope variables should be avoided(if you can)
static string returnName ();{return "Sean";} //this is a return function, it returns a string
'Console.Title = ReturnName();' #instead of using a global variable, this will take the string from the return funcSean above, you can store 'ReturnName();' as a shorter variable to use it instead
return new int[] { 0, 1, 2 }; #simple way to return an array, in one line, instead of creating an array, assiging values to that variable, then returning the variable 
Functions ideally should only perform one function, if they can be broken up into 2 functions, best practice would dictate that you do - KISS -keep it short, keep it simple
  Also, if you convert and calculate in one function but later on only want to convert, then you can't do it, so if you seperate your functions, future sean will be thankful
Name the functions correctly for future sean so they make sense and explain what they do instead of 'func a return b' or whatever
'Ctrl' + 'Left Click' on a function in VScode and it will jump to it - I've been using VSCode for years and didn't know this, suuppperr useful

Function Parameters = 4:59:50 =====================================================================================================================================================================================
static int Add(int a, int b)         {            return a + b;        }// this is a function that takes two int parameters and returns the int sum of them
Local Variables = only exist in a function, as soon as the function is done, they are removed from memory(deleted), aka they won't be saved, so you can't access int a or int b afterwards
static int ReadInt(string message){Console.WriteLine($"{message} : "); return Convert.ToInt32(Console.ReadLine());} #this will take in a 'string message' as parameters and return an int32

Optional Parameters = 5:12:25 =====================================================================================================================================================================================
Default values = if you have a function that takes 2 parameters, or you only input 1 (or none) it will automatically place in the default values instead
static int Add(int a, int b = 10) {return a + b;} #notice the second 'int b = 10' will allow it to default to '10' if only one parameter is entered
static int Add(int a, int b = default) #you can also use the 'default' keyword(which is 0), it will give the default based on datatype, so you don't need to remember if it's an int or a string or whatever
static int Multiply(int a, [Optional] int b){return a * b;} #'[Optional]' will give you the 'default' value based on the datatype

Named Parameters = 5:17:20 ========================================================================================================================================================================================
static void namedParamsExample()        {            string nameInput = "Sean";            int ageInput = 25;            string addressInput = "Sorry, eh, CA"        }
static void PrintDetails (string name, int age, string address){Console.WriteLine("Name: " + name);Console.WriteLine("Age: " + age);Console.WriteLine("Address: " + address);}
above, you give the parameters to the next function that prints them, notice how it asks for a string, int, string - if you give them the parameters out of order, it breaks the code
  unless you give the parameters names, then you don't have to stick to the order, like below
PrintDetails(address: addressInput, name: nameInput, age: ageInput); #notice how they are out of order, but still work, this is the power of named parameters

Out Parameters = 5:19:50 ==========================================================================================================================================================================================
'TryParse' = actually returns 2 variables, the int from the string, and a boolean if it converted correctly
'out' keyword =  allows a method to return multiple values by passing arguments by reference, ensuring that the called method can modify the value of the argument and return it to the caller.
static bool ScopeTest(out int num)         {            num = 5;             return true;         }//the out keyword will return 2 values, a boolean and change an int - you can return more than one datatype
'bool found = index > -1' #if the index variable finds a value in a list, it will return true, since this is a condition, it can be used as true or false, and then used for below :
'Console.WriteLine(found ? "Found" : "Not Found"); # first 'Found' is true, second 'Not Found' is false - ternary operator
Wrote a bunch of code, commented it well, check out the project future sean

Reference Parameters = 5:37:30 =====================================================================================================================================================================================
static void Assign(ref int num) {num = 20;} # new keyword 'ref' passing by reference/value - create an entire new variable Vs link numbers(pointers)
when you pass by reference, you are getting the memory address location instead of copying the value
static void Assign(ref int num, ref string name){num = 20;name = "Shawn";} // pass by reference, will change the value of num and name by reference// you can output multiple values using the 'ref' keyword
Assign(ref num, ref name); #how to run the function, you need to reference the ref reference, (add ref before variables that are being referenced)
when you assign by reference you actually have to make the variable before you pass it in, 
ref uses the memory reference/pointer and you only have to save one value

Exercise: Area of a Triangle = 5:46:15 =============================================================================================================================================================================
static int CalcArea (int width, int height) {            return (width * height) / 2; } #just return an int, you can use PEMDAS OOO(order of operations) in C# OOP

Exercise: Sum of Int Array = 5:50:15 ===============================================================================================================================================================================
static bool SumOfNumbers(int[] numbers, out int sum{sum = 0;if (numbers.Length > 0){foreach (var item in numbers){sum += item;}return true;}return false;} #returns a bool and an int sum

Exception Handling = 6:01:10 =======================================================================================================================================================================================
Exceptions are used to prevent code from crashing and program shutting down, 
'Exception Unhandled' = when an error occurs, you haven't written any code to manage the error/exception, causing it to close
'Format Exception' = Enterted in the wrong format/datatype
'Overflow Exception' = Number/String/whatever too large. Like trying to put an int64 into an int32

TryCatch = 6:03:30 ================================================================================================================================================================================================
Try...Catch = Tries to do something, and lets you know if something went wrong, similar to the int 'TryParse' that we have experience with, the 'Catch' catches the exceptions that happen instead of unhandled
try { } catch (Exception) {throw;} #basic syntax, '(Exception)' decide what you want to catch in these parameters and '{throw;}' what you want to do with it
After you wrap the code in a TryCatch, it won't crash if something goes wrong,
You can specify each exception and what to do with it with multiple catches like 'catch (FormatException)' or 'catch (OverflowException)' and chain them together
  they will go from top to bottom so put the general 'catch (Exception)' at the end, and the specific ones at the top
  Imagine it as an if statement, with 'if' followed by 'elseif' 'elseif' and ending at the general 'else' statement
catch (FormatException) {                Console.WriteLine("Please only enter numbers!");            } //will throw an exception if input data is the wrong format
anything in a try catch block will only be in that scope, so declare variables outside and set to '0' or whatever, then change the value in the try catch - this is actually bad practice
good practice is to wrap it in a while loop, and keep looping until the user has entered a correct number
while (looping) {try{Console.Write("Enter a number :"); int num = Convert.ToInt32(Console.ReadLine());Console.WriteLine(num);looping = false;}
  catch (OverflowException){Console.WriteLine("Please enter a number less than 2 billion.");} 
  #this will loop over until a correct num is input 'Console.WriteLine' won't activate until there are no exceptions, once it succesfully runs, at the end is a 'bool looping = false' that will end the loop

Printing Error Messages = 6:12:45 =================================================================================================================================================================================
how to output different messages to catch block
'catch (Exception e)' #will allow you to do things with 'e.'(use autocomplete to see all options that can be done when you add a variable to the parameters) - 'e.Message' below :
catch (Exception e) {Console.WriteLine($"Error: {e.Message}");} #will display what the error message is to the console, so the generic 'Exception' catch can display different message depending on exception

Exercise: Custom TryParse = 6:17:30 ===============================================================================================================================================================================
 static bool CustomTryParse(string input, out int result)
        {
            result = -1;
            try
            {
                result = Convert.ToInt32(input); //if it can convert it, it will
                return true;
            }
            catch (Exception) //if it raises exception, return false
            {
                result = -1;
                return false;
            }
        } #attempts to convert int 32, if it can't or raiases an exception, returns false.

Debugging = 6:26:00 ================================================================================================================================================================================================
In order to debug, you shouldn't just execute the code, it goes too fast that you can't see what is going on in order to debug it
on the left hand side by the code line #'s you can add 'breakpoints' red circles that will slow the code down, you can enable or disable them at the top dropdown 'Debug' -> 'Disable All Breakpoints'
Debug Mode(F5): 
  'step into'(F11) = goes inside a function
  'step out' (SHIFT+F11)= steps out of a function that you stepped into
  'step over'(F10) = goes over a line(next line of code)
Normally I'd just put in print statements, this is a more advanced way, it prints all the variables out line by line and their values, investigate/change values while debugging

Local/Auto Window = 6:37:55 =========================================================================================================================================================================================
more debugging 'F5' to start debugging, 'locals' are your local variables and their values
'autos' are the functions/parameters you need to be displayed, based on the section code you are currently on, depends on scope of whatever code you are in
basically just displayed variables in debugging mode, which I can't demonstrate here

Watch Window = 6:41:35 ==============================================================================================================================================================================================
Another good debugging technique is the watch window, you can add an item to watch, 
//you can add an item to watch, if you have a lot of variables in your code, you can look at a specific one 
//(F5) Debug mode -> doubleclick + right click an item -> 'Add Watch'
//after you are in the window, you can just type it into the watch window(the variable to watch or conditions)

Exercise : Fix Logic Error = 6:46:40 ================================================================================================================================================================================
start at the highest number instead of lowest (because if its bigger than the lowest age, it will also trigger the low age and the higher age code won't get run) or use else if with '&&' statement for ranges
Debugging walkthrough, not much new here

Structures = 6:50:15 ================================================================================================================================================================================================













