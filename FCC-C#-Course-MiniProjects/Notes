Start : 2025-1-11

Install Visual Studio + C# SDK
'dotnet new console -n <My New Project>' #used to create a new C# project
'dotnet build' #will build current app
'dotnet run' #will run app
C# is case sensitive
namespace HelloWorld {class Program {Static void Main(string[] args){console.WriteLine("Hello World!"}} } #same as in Java, except 'string' isn't capitlized 'Main' must be capitalized, required for .NET
using System; # declare dependancies with 'using' keyword 'using System' unused dependancies will be greyed out
System.Console.WriteLine("Hello World!"); #if you delete the 'using System' at the top, you can still call it by adding a 'System.', you don't have to define that you are using 'System' can just be used
'Console.ReadLine();' #will wait for an input from the user, if put before the end of a function, will wait till enter is pressed before closing

Numeric Data Types = 11:00 ===================================================================================================================================================================================
int age = 23; #integer, 'initializing and declaring in the same line' or just initialize first then declare later like 'int age;' 'age = 23' 
declare = creating the variable, initialize = first time assigning value to a variable, assignment = second+ time when you give a value to a variable
Console.WriteLine(age); #prints variable 'age' to console, nothing groundbreaking here
long bigNumber = 1234567890123456789L; #saves as int 32(4 bytes), notice the capital 'L' at the end, this tells the compiler to read it as a long number (int 64 = 8 bytes), same as Java
float negative = -123.456F; #float: Single-precision floating-point. It typically has 7 decimal digits of precision., notice the 'F' at end of number, this declares it as a float Size: 4 bytes (32 bits)
double negative = -123.456; #double: Double-precision floating-point. It typically has 15-16 decimal digits of precision. Size: 8 bytes (64 bits)
decimal money = 3.50M; //decimal Precision: 28-29 significant digits Size: 16 bytes (128 bits), Notice the 'M' at the end, this makes it explicit for the compiler
int x, y, z; #will allow you to declare multiple variable integers at once instead of each taking up a line, you can declare them the same way as well 'int x=10, y=20, z=30;' will work

Text Based Data Types = 18:00 =================================================================================================================================================================================
string name = "Sean"; //it's a string.. I've Sean this so many times before, only thing to note is it must be in '"' quotaSean marks (the double kind) 
char letter = 'Z'; #char - use single quotes for characters ''', you also can't store an empty char like ''

Converting Strings to Numbers = 20:30 =========================================================================================================================================================================
int convertedAge = Convert.ToInt32(textAge); #will convert a number that is text to an Int32 "33", can be done for any number datatype
'Convert.ToInt64(textAge);' 'Convert.ToDouble()' 'Convert.ToSingle()' 'Convert.ToDecimal()' #same as above, any numeric datatype
If there is a letter inside, it will create a runtime error when compiling, create a try pass block to escape these errors

Boolean DataType = 24:30 ======================================================================================================================================================================================
bool isTrue = true; #boolean

Operators = 25:40 =============================================================================================================================================================================================
currentYear++; #will add 1 to variable 'currentYear'
currentYear--; #will subtract one
age = age + 1;
age += 1;
when dividing, it will default go to an integer, so decimal places will be truncated - if you add divide multiply or whatever 2 integers it will return an integer, at least one value must be a float4decimals
name += " is brogramming"; #you can concatonate strings(add together), but can't subtract
when you add 2 chars together, it will add the unicode values as integer variables
'i++' #will use the value, then increment
'++i' #will increment, then use the value

%Modulo/Remainder = 31:35 =======================================================================================================================================================================================
If you were to divide 10/3 = it would return 3 (.333333 gets truncated because of the integer) 
console.WriteLine(firstNum % secondNum); //will return the remainder of 'firstNum' divided by 'secondNum' 10/3 = 9 (remainder of 1), will return 1
console.WriteLine(firstNum % 2); //will return 0 if firstNum is even
The best way to determine if a number is odd or even is to divide it by 2, fizzbuzz, if the value returned by 'firstNum % 2' is 0, it means it is an even number

Var Keyword = 35:10 ==============================================================================================================================================================================================
define a variable by specifying type followed by name with value 'int numberName = 123;'
var = 123; #compiler will figure out what type it is based on the value initialized with it
for numbers it will default to int32, explicitly pick a larger type like int64 'long' by adding an 'L' at the end like 'var bigNumber = 999L', you might need to explicitly define each type using characters

Cont keyword = 39:15 =============================================================================================================================================================================================
const int myConst = 10; #Const Keyword = constant value that cannot be changed, if you want to disable the ability for something to change a variable, use const
'cw' + <TAB> + <TAB> = Console.WriteLine() #hotkey in VScode, instead of typing out
all instances of a 'const' in your code will be a simple find and replace, every time the compiler sees a const, will take the value and replace the variable with it

Exercise: Storing User Data = 43:15 ===============================================================================================================================================================================






























