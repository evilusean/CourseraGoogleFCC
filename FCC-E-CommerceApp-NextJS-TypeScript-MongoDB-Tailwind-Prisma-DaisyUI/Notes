Features:
Completely dynamic product loading - products are not hardcoded, and will load chronologically
pagination - fast page loading - pre rendered and cached
cart - with total cost, subtotal, and quantity, server action nextJS feature, POST request
anonymous shopping cart - if you log out of account, new shopping cart will be created, and you can add items to it, and merge when you log back in
authentication - can log into accounts
checkout button is a dummy 
server side rendering - good for SEO(search engine optimization) - all data available when you open webpage
search functionality 
responsive design - changes based on screen size
tailwind css

npx create-next-app@latest
typescript: yes / eslint: yes / ESLint: yes / TailwindCSS: yes / src/directory: yes / AppRouter: yes / import alias: no
'npm run dev' to test if setup was successful localhost:3000

Installing prerequisite packages:
npm i daisyui prisma @prisma/client next-auth @auth/prisma-adapter prettier eslint-config-prettier prettier-plugin-tailwindcss

Setting up TailwindCSS:
https://tailwindcss.com/docs/installation
https://tailwindcss.com/docs/editor-setup
VSCode Extensions:
Tailwind CSS IntelliSense
Reccomended VS Code Settings:
'files.associations' settings to always open .css files in Tailwind CSS mode; top drop down menu -> file -> preferences -> settings or 'ctrl' + ',' search 'files: association' -> add item -> items: *.css Value: tailwind.css
  #after doing above, tailwindcss will now work in .css files (no more yellow warnings for the entire project!)
"files.associations":  {
  "*.css: "tailwindcss"
  }
'editor.quickSuggestions' =   top drop down menu -> file -> preferences -> settings or 'ctrl' + ',' search 'editor.quickSuggestions' -> add item -> strings: on
#by default VScode will not trigger completions when editing string content, updating the 'editor.quickSuggestions' settings may improve your experience, autosuggestions in strings
"editor.quickSuggestions': {
  "strings": true
}

20:00===============================================================================================================================================================================================================================
Daisy UI Configuration:
https://daisyui.com/docs/install/
DaisyUI is a components libarary, that has components prebuilt that are already configured, buttons, modal dialogues, progress bar, custom themes, theme generator - copy paste into tailwind file
https://daisyui.com/theme-generator/
Cool random generator for color palletes, or you can use a prebuilt like synthwave, I went with what was recomended
'tailwindconfig.js' #add below code to it, delete 'theme:' block
module.exports = {
  //...
  plugins: [require("daisyui")],
}
instead of hardcoding, if you set up a theme, you can change it all at once from one file, good to set up before you start coding, going with default for now wasted too much time fiddling around with palletes
after DaisyUI import, deleted everything from 'globals.css', except lines at top @tailwind
next, we need to import our automatic class ordering with tailwindcss and prettier, we already installed, but need to add to plugin to our prettier config
https://github.com/tailwindlabs/prettier-plugin-tailwindcss
npm install -D prettier prettier-plugin-tailwindcss
go into 'root' folder and create a new file called 'prettier.config.js' and added below code
module.exports = {
    plugins: ['prettier-plugin-tailwindcss'],
  } 
installed 'prettier - code formatter' extension
to make default for editing: top drop down File -> Preferences -> Settings - Change from 'none' to 'Prettier'
Error: Fixed:
Create file called .babelrc in your root directory and add this code:
{
  "presets": ["next/babel"],
  "plugins": []
}
And in .eslintrc, replace the existing code with:

{
  "extends": ["next/babel","next/core-web-vitals"]
}

































































