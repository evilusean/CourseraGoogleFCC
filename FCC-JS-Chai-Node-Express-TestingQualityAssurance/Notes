Start : 24July2025

As your programs or web applications become more complex, you'll want to test them to make sure that new changes don't break their original functionality.
In the Quality Assurance Certification, you'll learn how to write tests with Chai to ensure your applications work the way you expect them to.
Then you'll build a chat application to learn advanced Node and Express concepts. You'll also use Pug as a template engine, Passport for authentication, 
  and Socket.io for real-time communication between the server and connected clients.

Learn How JavaScript Assertions Work ======================================================================================================================================================
Working on these challenges will involve you writing your code using one of the following methods:
Clone this GitHub repo and complete these challenges locally.
https://github.com/freeCodeCamp/boilerplate-mochachai/
Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.
Within tests/1_unit-tests.js under the test labeled #1 in the Basic Assertions suite, change each assert to either assert.isNull or assert.isNotNull 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    'test('#isNull, #isNotNull', function () {
      assert.isNull(null, 'This is an optional error description - e.g. null is null');
      assert.isNotNull(1, '1 is not null');
    });' # how to asset isNull and isNotNull

Test if a Variable or Function is Defined ==================================================================================================================================================
Within tests/1_unit-tests.js under the test labeled #2 in the Basic Assertions suite, change each assert to either
assert.isDefined() or assert.isUndefined() to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isDefined, #isUndefined', function () {
      assert.isDefined(null, 'null is not undefined');
      assert.isUndefined(undefined, 'undefined IS undefined');
      assert.isDefined('hello', 'A string is not undefined');
    });

Use Assert.isOK and Assert.isNotOK =========================================================================================================================================================
isOk() will test for a truthy value, and isNotOk() will test for a falsy value.
To learn more about truthy and falsy values, try our Falsy Bouncer challenge.
Within tests/1_unit-tests.js under the test labeled #3 in the Basic Assertions suite, change each assert to either assert.isOk() or assert.isNotOk()
to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isOk, #isNotOk', function () {
      assert.isNotOk(null, 'null is falsey');
      assert.isOk("I'm truthy", 'A string is truthy');
      assert.isOk(true, 'true is truthy');
    });

Test for Truthiness =========================================================================================================================================================================
isTrue() will test for the boolean value true and isNotTrue() will pass when given anything but the boolean value of true.
assert.isTrue(true, 'This will pass with the boolean value true');
assert.isTrue('true', 'This will NOT pass with the string value "true"');
assert.isTrue(1, 'This will NOT pass with the number value 1');
isFalse() and isNotFalse() also exist, and behave similarly to their true counterparts except they look for the boolean value of false.
Within tests/1_unit-tests.js under the test labeled #4 in the Basic Assertions suite, 
  change each assert to either assert.isTrue or assert.isNotTrueto make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
test('#isTrue, #isNotTrue', function () {
      assert.isTrue(true, 'true is true');
      assert.isTrue(!!'double negation', 'Double negation of a truthy value is true');
      assert.isNotTrue({ value: 'truthy' }, 'Objects are truthy, but are not boolean values');
    });

Use the Double Equals to Assert Equality ====================================================================================================================================================
equal() compares objects using ==.
Within tests/1_unit-tests.js under the test labeled #5 in the Equality suite, change each assert to either assert.equal or assert.notEqual 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#equal, #notEqual', function () {
      assert.equal(12, '12', 'Numbers are coerced into strings with ==');
      assert.notEqual({ value: 1 }, { value: 1 }, '== compares object references');
      assert.equal(6 * '2', '12');
      assert.notEqual(6 + '2', '12');
    });

Use the Triple Equals to Assert Strict Equality ============================================================================================================================================
strictEqual() compares objects using ===.
Within tests/1_unit-tests.js under the test labeled #6 in the Equality suite, change each assert to either assert.strictEqual or assert.notStrictEqual 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
   test('#strictEqual, #notStrictEqual', function () {
      assert.notStrictEqual(6, '6');
      assert.strictEqual(6, 3 * 2);
      assert.strictEqual(6 * '2', 12);
      assert.notStrictEqual([1, 'a', {}], [1, 'a', {}]);
    });

Assert Deep Equality with .deepEqual and .notDeepEqual =====================================================================================================================================
deepEqual() asserts that two objects are deep equal.
Within tests/1_unit-tests.js under the test labeled #7 in the Equality suite, 
  change each assert to either assert.deepEqual or assert.notDeepEqual to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#deepEqual, #notDeepEqual', function () {
      assert.deepEqual({ a: '1', b: 5 }, { b: 5, a: '1' }, "The order of keys doesn't matter");
      assert.notDeepEqual({ a: [5, 6] }, { a: [6, 5] }, 'The order of array elements does matter');
    });

Compare the Properties of Two Elements ======================================================================================================================================================
Within tests/1_unit-tests.js under the test labeled #8 in the Comparisons suite, 
  change each assert to either assert.isAbove or assert.isAtMost to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isAbove, #isAtMost', function () {
      assert.isAtMost('hello'.length, 5);
      assert.isAbove(1, 0);
      assert.isAbove(Math.PI, 3);
      assert.isAtMost(1 - Math.random(), 1);
    });

Test if One Value is Below or At Least as Large as Another ==================================================================================================================================
Within tests/1_unit-tests.js under the test labelled #9 in the Comparisons suite, 
  change each assert to either assert.isBelow or assert.isAtLeast to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
   test('#isBelow, #isAtLeast', function () {
      assert.isAtLeast('world'.length, 5);
      assert.isAtLeast(2 * Math.random(), 0);
      assert.isBelow(5 % 2, 2);
      assert.isBelow(2 / 3, 1);
    });

Test if a Value Falls within a Specific Range ================================================================================================================================================
'.approximately(actual, expected, delta, [message])' #syntax for testing a range
  Asserts that the actual is equal to expected, to within a +/- delta range.
Within tests/1_unit-tests.js under the test labeled #10 in the Comparisons suite, change each assert to assert.approximately to make the test pass (should evaluate to true).
Choose the minimum range (3rd parameter) to make the test always pass. It should be less than 1.
    test('#approximately', function () {
      assert.approximately(weirdNumbers(0.5), 1, 0.5);
      assert.approximately(weirdNumbers(0.2), 1, 0.8);
    });

Test if a Value is an Array ===================================================================================================================================================================
Within tests/1_unit-tests.js under the test labeled #11 in the Arrays suite, change each assert to either
  assert.isArray or assert.isNotArray to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isArray, #isNotArray', function () {
      assert.isArray('isThisAnArray?'.split(''), 'String.prototype.split() returns an array');
      assert.isNotArray([1, 2, 3].indexOf(2), 'indexOf returns a number');
    });

Test if an Array Contains an Item =============================================================================================================================================================
Within tests/1_unit-tests.js under the test labeled #12 in the Arrays suite,
  change each assert to either assert.include or assert.notInclude to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('Array #include, #notInclude', function () {
      assert.notInclude(winterMonths, 'jul', "It's summer in july...");
      assert.include(backendLanguages, 'javascript', 'JS is a backend language');
    });

Test if a Value is a String ===================================================================================================================================================================
isString or isNotString asserts that the actual value is a string.
Within tests/1_unit-tests.js under the test labeled #13 in the Strings suite, change each assert to either assert.isString or assert.isNotString 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isString, #isNotString', function () {
      assert.isNotString(Math.sin(Math.PI / 4), 'A float is not a string');
      assert.isString(process.env.PATH, 'An env variable is a string (or undefined)');
      assert.isString(JSON.stringify({ type: 'object' }), 'JSON is a string');
    });

Test if a String Contains a Substring =========================================================================================================================================================
include() and notInclude() work for strings too! include() asserts that the actual string contains the expected substring.
Within tests/1_unit-tests.js under the test labeled #14 in the Strings suite, change each assert to either assert.include or assert.notInclude 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('String #include, #notInclude', function () {
      assert.include('Arrow', 'row', "'Arrow' contains 'row'");
      assert.notInclude('dart', 'queue', "But 'dart' doesn't contain 'queue'");
    });

Use Regular Expressions to Test a String =======================================================================================================================================================
match() asserts that the actual value matches the second argument regular expression.
Within tests/1_unit-tests.js under the test labeled #15 in the Strings suite, change each assert to either assert.match or assert.notMatch 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#match, #notMatch', function () {
      const regex = /^#\sname\:\s[\w\s]+,\sage\:\s\d+\s?$/;
      assert.match(formatPeople('John Doe', 35), regex);
      assert.notMatch(formatPeople('Paul Smith III', 'twenty-four'), regex);
    });

Test if an Object has a Property ===============================================================================================================================================================
'property' asserts that the actual object has a given property.
Within tests/1_unit-tests.js under the test labeled #16 in the Objects suite, change each assert to either 
  assert.property or assert.notProperty to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#property, #notProperty', function () {
      assert.notProperty(myCar, 'wings', "Cars don't have wings");
      assert.property(airlinePlane, 'engines', 'Planes have engines');
      assert.property(myCar, 'wheels', 'Cars have wheels');
    });

Test if a Value is of a Specific Data Structure Type ============================================================================================================================================
#typeOf asserts that value's type is the given string, as determined by Object.prototype.toString.
Within tests/1_unit-tests.js under the test labeled #17 in the Objects suite, change each assert to 
  either assert.typeOf or assert.notTypeOf to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#typeOf, #notTypeOf', function () {
      assert.typeOf(myCar, 'object');
      assert.typeOf(myCar.model, 'string');
      assert.notTypeOf(airlinePlane.wings, 'string');
      assert.typeOf(airlinePlane.engines, 'array');
      assert.typeOf(myCar.wheels, 'number');
    });

Test if an Object is an Instance of a Constructor ==============================================================================================================================================
#instanceOf asserts that an object is an instance of a constructor.
Within tests/1_unit-tests.js under the test labeled #18 in the Objects suite, 
  change each assert to either assert.instanceOf or assert.notInstanceOf to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#instanceOf, #notInstanceOf', function () {
      assert.notInstanceOf(myCar, Plane);
      assert.instanceOf(airlinePlane, Plane);
      assert.instanceOf(airlinePlane, Object);
      assert.notInstanceOf(myCar.wheels, String);
    });

Run Functional Tests on API Endpoints using Chai-HTTP ==========================================================================================================================================
Mocha allows you to test asynchronous operations like calls to API endpoints with a plugin called chai-http.
The following is an example of a test using chai-http for a suite called 'GET /hello?name=[name] => "hello [name]"':
suite('GET /hello?name=[name] => "hello [name]"', function () {
  test('?name=John', function (done) {
    chai
      .request(server)
      .keepOpen()
      .get('/hello?name=John')
      .end(function (err, res) {
        assert.equal(res.status, 200, 'Response status should be 200');
        assert.equal(res.text, 'hello John', 'Response should be "hello John"');
        done();
      });
  });
});
The test sends a GET request to the server with a name as a URL query string (?name=John). In the end method's callback function, 
  the response object (res) is received and contains the status property.
The first assert.equal checks if the status is equal to 200. The second assert.equal checks that the response string (res.text) is equal to "hello John".
Also, notice the done parameter in the test's callback function. Calling it without an argument at the end of a test is necessary to signal that the asynchronous operation is complete.
Finally, note the keepOpen method just after the request method. Normally you would run your tests from the command line, or as part of an automated integration process, 
  and you could let chai-http start and stop your server automatically.
However, the tests that run when you submit the link to your project require your server to be up, so you need to use the keepOpen method to prevent chai-http from stopping your server.
Within tests/2_functional-tests.js, alter the 'Test GET /hello with no name' test (// #1) to assert the status and the text of the response to make the test pass. 
  Do not alter the arguments passed to the asserts.
There should be no URL query. Without a name URL query, the endpoint responds with hello Guest.

Run Functional Tests on API Endpoints using Chai-HTTP II ======================================================================================================================================
Within tests/2_functional-tests.js, alter the 'Test GET /hello with your name' test (// #2) to assert the status and the text of the response to make the test pass.
Send your name as a URL query by appending ?name=<your_name> to the route. The endpoint responds with 'hello <your_name>'.
    test('Test GET /hello with your name', function (done) {
      chai
        .request(server)
        .keepOpen()
        .get('/hello?name=xy_z')
        .end(function (err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, 'hello xy_z');
          done();
        });
    });

Run Functional Tests on an API Response using Chai-HTTP III - PUT method ======================================================================================================================
As a reminder, this project is being built upon the following starter project cloned from GitHub.
When you test a PUT request, you'll often send data along with it. The data you include with your PUT request is called the body of the request.
To send a PUT request and a JSON object to the '/travellers' endpoint, you can use chai-http plugin's put and send methods:
chai
  .request(server)
  .keepOpen()
  .put('/travellers')
  .send({
    "surname": [last name of a traveller of the past]
  })
  ...
And the route responds with:
{
  "name": [first name],
  "surname": [last name],
  "dates": [birth - death years]
}
See the server code for the different responses to the '/travellers' endpoint.
Within tests/2_functional-tests.js, alter the 'Send {surname: "Colombo"}' test (// #3) and use the put and send methods to test the '/travellers' endpoint.
Send the following JSON object with your PUT request:
{
  "surname": "Colombo"
}
Check for the following within the request.end callback:
The status should be 200
The type should be application/json
The body.name should be Cristoforo
The body.surname should be Colombo
Follow the assertion order above - we rely on it. Also, be sure to remove assert.fail() once complete.
    test('Send {surname: "Colombo"}', function (done) {
      chai
        .request(server)
        .keepOpen()
        .put('/travellers')
        .send({ surname: "Colombo" })
        .end(function (err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.type, 'application/json');
          assert.equal(res.body.name, 'Cristoforo');
          assert.equal(res.body.surname, 'Colombo');
          done();
        });
    });

Run Functional Tests on an API Response using Chai-HTTP IV - PUT method =====================================================================================================================
Now that you know how to test a PUT request, it's your turn to do it from scratch.
Within tests/2_functional-tests.js, alter the 'Send {surname: "da Verrazzano"}' test (// #4) and use the put and send methods to test the '/travellers' endpoint.
Send the following JSON object with your PUT request:
{
  "surname": "da Verrazzano"
}
Check for the following within the request.end callback:
The status should be 200
The type should be application/json
The body.name should be Giovanni
The body.surname should be da Verrazzano
Follow the assertion order above - we rely on it. Also, be sure to remove assert.fail() once complete.
    test('Send {surname: "da Verrazzano"}', function (done) {
      chai
        .request(server)
        .keepOpen()
        .put('/travellers')
        .send({ surname: "da Verrazzano" })
        .end(function (err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.type, 'application/json');
          assert.equal(res.body.name, 'Giovanni');
          assert.equal(res.body.surname, 'da Verrazzano');
          done();
        });
    });

Simulate Actions Using a Headless Browser ===================================================================================================================================================
In the next challenges, you'll simulate human interaction with a page by using a headless browser.
Headless browsers are web browsers without a GUI. They are able to render and interpret HTML, CSS, and JavaScript the same way a regular browser would,
  making them particularly useful for testing web pages.
For the following challenges you'll use Zombie.js, which is a lightweight headless browser that doesn't rely on additional binaries to be installed. 
  But there are many other, more powerful headless browser options.
Mocha allows you to run some code before any of the actual tests run. This can be useful to do things like add entries to a database which will be used in the rest of the tests.
With a headless browser, before running tests, you need to visit the page you'll test.
The suiteSetup hook is executed only once at the beginning of a test suite.
There are several other hook types that can execute code before each test, after each test, or at the end of a test suite. See the Mocha docs for more information.
Within tests/2_functional-tests.js, immediately after the Browser declaration, add your project URL to the site property of the variable:
Browser.site = 'http://0.0.0.0:3000'; // Your URL here
Then at the root level of the 'Functional Tests with Zombie.js' suite, instantiate a new instance of the Browser object with the following code:
const browser = new Browser();
And use the suiteSetup hook to direct the browser to the / route with the following code. Note: done is passed as a callback to browser.visit, you should not invoke it.
suiteSetup(function(done) {
  return browser.visit('/', done);
});
const Browser = require('zombie');
Browser.site = 'http://0.0.0.0:3000'; // Your URL here
suite('Functional Tests with Zombie.js', function () {
  this.timeout(5000);
  const browser = new Browser();
  suiteSetup(function(done) {
    return browser.visit('/', done);
  });
  suite('Headless browser', function () {
    test('should have a working "site" property', function() {
      assert.isNotNull(browser.site);
    });
  });

Run Functional Tests Using a Headless Browser ================================================================================================================================================
On the page there's an input form. It sends data to the PUT /travellers endpoint as an AJAX request.
When the request successfully completes, the client code appends a <div> containing the information in the response to the DOM.
Here's an example of how to use Zombie.js to interact with the form:
test('Submit the surname "Polo" in the HTML form', function (done) {
  browser.fill('surname', 'Polo').then(() => {
    browser.pressButton('submit', () => {
      browser.assert.success();
      browser.assert.text('span#name', 'Marco');
      browser.assert.text('span#surname', 'Polo');
      browser.assert.elements('span#dates', 1);
      done();
    });
  });
});
First, the fill method of the browser object fills the surname field of the form with the value 'Polo'. fill returns a promise, so then is chained off of it.
Within the then callback, the pressButton method of the browser object is used to invoke the form's submit event listener. The pressButton method is asynchronous.
Then, once a response is received from the AJAX request, a few assertions are made confirming:
The status of the response is 200
The text within the <span id='name'></span> element matches 'Marco'
The text within the <span id='surname'></span> element matches 'Polo'
There is 1 <span id='dates'></span> element.
Finally, the done callback is invoked, which is needed due to the asynchronous test.
Within tests/2_functional-tests.js, in the 'Submit the surname "Colombo" in the HTML form' test (// #5), automate the following:
Fill in the form with the surname Colombo
Press the submit button
And within the pressButton callback:
Assert that status is OK 200
Assert that the text inside the element span#name is 'Cristoforo'
Assert that the text inside the element span#surname is 'Colombo'
Assert that the element(s) span#dates exist and their count is 1
Do not forget to remove the assert.fail() call.
    test('Submit the surname "Colombo" in the HTML form', function (done) {
      browser.fill('surname', 'Colombo').then(() => {
        browser.pressButton('submit', () => {
          browser.assert.success();
          browser.assert.text('span#name', 'Cristoforo');
          browser.assert.text('span#surname', 'Colombo');
          browser.assert.elements('span#dates', 1);
          done();
        });
      });
    });

Run Functional Tests Using a Headless Browser II =============================================================================================================================================
Within tests/2_functional-tests.js, in the 'Submit the surname "Vespucci" in the HTML form' test (// #6), automate the following:
Fill in the form with the surname Vespucci
Press the submit button
And within the pressButton callback:
Assert that status is OK 200
Assert that the text inside the element span#name is 'Amerigo'
Assert that the text inside the element span#surname is 'Vespucci'
Assert that the element(s) span#dates exist and their count is 1
Do not forget to remove the assert.fail() call.
    test('Submit the surname "Vespucci" in the HTML form', function (done) {
      browser.fill('surname', 'Vespucci').then(() => {
        browser.pressButton('submit', function() {
          browser.assert.success(); // Assert status is OK 200
          browser.assert.text('span#name', 'Amerigo'); // Assert name
          browser.assert.text('span#surname', 'Vespucci'); // Assert surname
          browser.assert.elements('span#dates', 1); // Assert dates count
          done();
        });

Advanced Node and Express ====================================================================================================================================================================
Now it's time to take a deep dive into Node.js and Express.js by building a chat application with a sign-in system.
To implement the sign-in system safely, you'll need to learn about authentication. This is the act of verifying the identity of a person or process.
In this course, you'll learn how to use Passport to manage authentication, Pug to create reusable templates for quickly building the front end, 
  and web sockets for real-time communication between the clients and server.

Set up a Template Engine =====================================================================================================================================================================
https://github.com/freeCodeCamp/boilerplate-advancednode/
https://forum.freecodecamp.org/t/advanced-node-and-express/567135
A template engine enables you to use static template files (such as those written in Pug) in your app. 
  At runtime, the template engine replaces variables in a template file with actual values which can be supplied by your server. 
  Then it transforms the template into a static HTML file that is sent to the client. 
  This approach makes it easier to design an HTML page and allows for displaying variables on the page without needing to make an API call from the client.
pug@~3.0.0 has already been installed, and is listed as a dependency in your package.json file.
Express needs to know which template engine you are using. Use the set method to assign pug as the view engine property's value:
app.set('view engine', 'pug');
After that, add another set method that sets the views property of your app to point to the ./views/pug directory. This tells Express to render all views relative to that directory.
Finally, use res.render() in the route for your home page, passing index as the first argument. This will render the pug template.
If all went as planned, your app home page will no longer be blank. Instead, it will display a message indicating you've successfully rendered the Pug template!
https://a9d4db49-ded7-46e3-ac92-851bd7bc2c2f-00-1ew7ymkdcxghh.janeway.replit.dev/















