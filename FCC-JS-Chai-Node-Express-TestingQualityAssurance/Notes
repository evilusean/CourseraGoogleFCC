Start : 24July2025

As your programs or web applications become more complex, you'll want to test them to make sure that new changes don't break their original functionality.
In the Quality Assurance Certification, you'll learn how to write tests with Chai to ensure your applications work the way you expect them to.
Then you'll build a chat application to learn advanced Node and Express concepts. You'll also use Pug as a template engine, Passport for authentication, 
  and Socket.io for real-time communication between the server and connected clients.

Learn How JavaScript Assertions Work ======================================================================================================================================================
Working on these challenges will involve you writing your code using one of the following methods:
Clone this GitHub repo and complete these challenges locally.
https://github.com/freeCodeCamp/boilerplate-mochachai/
Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.
Within tests/1_unit-tests.js under the test labeled #1 in the Basic Assertions suite, change each assert to either assert.isNull or assert.isNotNull 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    'test('#isNull, #isNotNull', function () {
      assert.isNull(null, 'This is an optional error description - e.g. null is null');
      assert.isNotNull(1, '1 is not null');
    });' # how to asset isNull and isNotNull

Test if a Variable or Function is Defined ==================================================================================================================================================
Within tests/1_unit-tests.js under the test labeled #2 in the Basic Assertions suite, change each assert to either
assert.isDefined() or assert.isUndefined() to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isDefined, #isUndefined', function () {
      assert.isDefined(null, 'null is not undefined');
      assert.isUndefined(undefined, 'undefined IS undefined');
      assert.isDefined('hello', 'A string is not undefined');
    });

Use Assert.isOK and Assert.isNotOK =========================================================================================================================================================
isOk() will test for a truthy value, and isNotOk() will test for a falsy value.
To learn more about truthy and falsy values, try our Falsy Bouncer challenge.
Within tests/1_unit-tests.js under the test labeled #3 in the Basic Assertions suite, change each assert to either assert.isOk() or assert.isNotOk()
to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#isOk, #isNotOk', function () {
      assert.isNotOk(null, 'null is falsey');
      assert.isOk("I'm truthy", 'A string is truthy');
      assert.isOk(true, 'true is truthy');
    });

Test for Truthiness =========================================================================================================================================================================
isTrue() will test for the boolean value true and isNotTrue() will pass when given anything but the boolean value of true.
assert.isTrue(true, 'This will pass with the boolean value true');
assert.isTrue('true', 'This will NOT pass with the string value "true"');
assert.isTrue(1, 'This will NOT pass with the number value 1');
isFalse() and isNotFalse() also exist, and behave similarly to their true counterparts except they look for the boolean value of false.
Within tests/1_unit-tests.js under the test labeled #4 in the Basic Assertions suite, 
  change each assert to either assert.isTrue or assert.isNotTrueto make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
test('#isTrue, #isNotTrue', function () {
      assert.isTrue(true, 'true is true');
      assert.isTrue(!!'double negation', 'Double negation of a truthy value is true');
      assert.isNotTrue({ value: 'truthy' }, 'Objects are truthy, but are not boolean values');
    });

Use the Double Equals to Assert Equality ====================================================================================================================================================
equal() compares objects using ==.
Within tests/1_unit-tests.js under the test labeled #5 in the Equality suite, change each assert to either assert.equal or assert.notEqual 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
    test('#equal, #notEqual', function () {
      assert.equal(12, '12', 'Numbers are coerced into strings with ==');
      assert.notEqual({ value: 1 }, { value: 1 }, '== compares object references');
      assert.equal(6 * '2', '12');
      assert.notEqual(6 + '2', '12');
    });

Use the Triple Equals to Assert Strict Equality ============================================================================================================================================
strictEqual() compares objects using ===.
Within tests/1_unit-tests.js under the test labeled #6 in the Equality suite, change each assert to either assert.strictEqual or assert.notStrictEqual 
  to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.
   test('#strictEqual, #notStrictEqual', function () {
      assert.notStrictEqual(6, '6');
      assert.strictEqual(6, 3 * 2);
      assert.strictEqual(6 * '2', 12);
      assert.notStrictEqual([1, 'a', {}], [1, 'a', {}]);
    });

Assert Deep Equality with .deepEqual and .notDeepEqual =====================================================================================================================================
deepEqual() asserts that two objects are deep equal.
Within tests/1_unit-tests.js under the test labeled #7 in the Equality suite, 
  change each assert to either assert.deepEqual or assert.notDeepEqual to make the test pass (should evaluate to true). Do not alter the arguments passed to the asserts.



































