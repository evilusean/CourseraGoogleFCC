Start : 13February2025

mkdir multiplayer-card-project
cd multiplayer-card-project
git clone https://github.com/photonstorm/phaser3-project-template.git
npm install 
npm start #this didn't work
npm run dev #this worked
https://github.com/sominator/multiplayer-card-project/tree/master/client/src/assets #remove defaults, add to 'public/assets'
In the '/client/src' directory, add a folder called "scenes" and another called "helpers."
In '/client/src/scenes', add an empty file called "game.js".
In '/client/src/helpers', add three empty files: "card.js", "dealer.js", and "zone.js".
'/src/index.js', which is the main entry point to our front end app. #this doesn't work, syntax changed, use 'main.js'
utilize Phaser's "scene" system so that we can separate our game scenes rather than try to cram everything in one file. 
  Scenes can be useful if you're creating multiple game worlds, building things like instruction screens, or generally trying to keep things tidy.
We've created a new class that accepts a scene as a parameter, and features a render() function that accepts (x, y) coordinates and a sprite.
  Now, we can call this function from elsewhere and pass it the necessary parameters to create cards.
Phaser has built-in dropzones that allow us to dictate where game objects can be dropped, and we've set up one here and provided it with an outline.
  We've also added a tiny bit of data called "cards" to the dropzone that we'll use later.
installed nodemon/express to autoupdate on change
http://localhost:3000 or localhost:8080
        this.socket.on('isPlayerA', function () {            self.isPlayerA = true;        }) #checks for which player, if player a, will give them the correct socket
Now, if our client is the first to connect to the server, the server will emit an event that tells the client that it will be Player A. 
  The client socket receives that event and turns our "isPlayerA" boolean from false to true.





















