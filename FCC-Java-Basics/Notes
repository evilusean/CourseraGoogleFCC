Start: 21November2024

IntelliJ Idea IDE for Java (Arch Linux):
https://archlinux.org/packages/extra/x86_64/intellij-idea-community-edition/
https://www.jetbrains.com/help/idea/installation-guide.html
Has code highlighting, showing realtime errors, and suggestions, realtime compile,

$ sudo pacman -Syyu #Update system
   sudo pacman -S libseccomp #missing dependancies
   export PKG_CONFIG_PATH=/usr/lib/pkgconfig:$PKG_CONFIG_PATH #had to install, after this, makepkg worked
sudo pacman -S snapd #install snapd, didn't work, had to do the 'makepkg' below
git clone https://aur.archlinux.org/snapd.git
cd snapd
makepkg -si
sudo systemctl enable --now snapd.socket 
sudo systemctl enable --now snapd.apparmor.service
sudo ln -s /var/lib/snapd/snap /snap
sudo snap install intellij-idea-community --classic #will install the new intelliJ IDE on Arch
 
When creating a project, you will select a 'JDK' or java development kit,
Select Version '17' (current is 23.0.1) - since '17' is the one with long term support
Next is the vendor, the company which provides the SDK 'Amazon Coretto 17.0.13' and 'Location'

7:16 = Starting Project ================================================================================================================================================
Name = 'Pascal Case' Every word should start with a capital letter 
Left hand side - 'Project Pane' - After creating a project you will see 'src' 'main' this is a class, double click to open, 
'System.out.println("i = " + i);' #will have the system print line 'println' of the current count
'System.out.println("Hello World");' #hello world, semi colons are important in Java, not optional - will open console and output text, also you need '"' double quotation marks for text, not single
IntelliJ has pretty good code completion out the box, tab to complete
'Ctrl' + 'Shift' + 'F10' = To run our code, 2 ways, right click the class/code 'Run "Main.main()"' or click the arrow on top right hand side of IDE
Function = collection of code together to do a specific task

13:30 = Keywords Expalained =============================================================================================================================================
public class Main { #'public' is a keyword that is an 'access modifier' which will be publicly accessible - 'class' every function you use in Java must be part of a class - 'Main' the class '{' block of code
    public static void main(String[] args) { #'void' signifies the return type of the function (void returns nothing), 'main' is the name of the function(entry point of app)'(String[] args)' #these are the parameters
      System.out.println("Hello World"); #simple statement, the code that gets executed from the 'main' function
All code created in Java must be part of a class, most of the code you are going to write is going to come from the 'main' function
Parameters are what inputs will be taken

20:15 = Variables ========================================================================================================================================================
Variables = used to store data
String name = "Sean"; #has type safety, will only be able to save a string in the "" double quotation marks for the variable 'name'
int age = 33; #'int' integer, for the variable 'age', whole numbers

29:00 = Variables: int, byte, and long ================================================================================================================================================================
Datatypes = Different datatypes that can be stored in variables
`int max = Integer.MAX_VALUE;` #will allow you to store the largest integer datatype - The Maximum Value is 2147483647
'int min = Integer.MIN_VALUE;' #minimum integer value - The minimum value is -2147483648
if you try to put a value above the min and max integers, the code will break, overflow
'Ctrl' + 'D' = Will copy selected code
byte maxByteValue = Byte.MAX_VALUE; #The minimum byte value is -128
byte minByteValue = Byte.MIN_VALUE; #The maximum byte value is 127
long maxLongValue = Long.MAX_VALUE; #The maximum long value is 9223372036854775807
long minLongValue = Long.MIN_VALUE; #The minimum long value is -9223372036854775808
long myNumber = 2147483648L; #notice the 'l' at the end, it will default be considred an integer even with the 'long' prefix before the name 'myNumber' - you need to add 'l' for variables to long (uppercase works too)

41:55 = Datatype: Short ================================================================================================================================================================================
short maxShort = Short.MAX_VALUE; #The maximum short value is 32767
short minShort = Short.MIN_VALUE; #The minimum short value is -32768

44:20 = Floats and Doubles =============================================================================================================================================================================
Float has a size of 32 bits
Double has a size of 64 bits - more precise
float maxFloat = Float.MAX_VALUE; #The maximum float value is 3.4028235E38
float minFloat = Float.MIN_VALUE; #The minimum float value is 1.4E-45
float myFloat = 3.14F; #same as a Long, notice the 'F' at the end of the number, even though you explicitly declare it with 'float' as the variable, you will need to add 'F' after the number 
double maxDouble = Double.MAX_VALUE; #The maximum double value is 1.7976931348623157E308
double minDouble = Double.MIN_VALUE; #The minimum double value is 4.9E-324
double myDouble = 12.12; #this is weird, it doesn't need the 'D'(heh) to follow the number, it just works.

50:40 = Boolean and Char ===============================================================================================================================================================================
char myChar = 'A'; #char = character, you can only use one element/character - and it must be in single quotation marks - used for scenarios like last key pressed by user
boolean myBoolean = true; #true or false
if something is 'greyed out' in IntelliJ, it means it isn't being used else where in the code, didn't bother to use print statements

54:50 = Operators and Operations =======================================================================================================================================================================
operators = perform the operation '+' add '-' subtract '*' multiply '/' division(will default as integer, variable will need to be declared as float) '%' modulus(remainder)
operands = are the ones on which the operation is performed 'num1' 'num2' 
System.out.println(num1 + num2 * 6); #order of operations means multiplication before addition, you can change order of operations by adding (parenthesis) PEMDAS
Abbreviations = 'myNumber+=1;' #adds 1 to the number, '+=' '-=' '*=' '/=' '%=' #just a shorthand way of writing an operation 
myNumber++; #shorthand way to add one 
System.out.println(myNumber++); // prints and increments (will print number then increment)
System.out.println(++myNumber); //increments and prints (will increment then print number) - subtle

1:12:45 = If Statement ==================================================================================================================================================================================
The flow of Java code is linear - it is executed line by line - with an 'If Statement' you can break the flow of a program which is linear to only execute if a condition is true, otherwise skip
'=' # assignment operator, used to assign data to variables
'==' #'equal to' operator, used to deduce if one value is equal to another, checks if they are the same
'sout' #shortcut to type System.out.println();
if (<condition>) {<run code inside these curly braces>} #same as every other if statement
} else { <run this code if no conditions are met> }

1:23:20 = Else if and Logical NOT Operator ===============================================================================================================================================================
if (<condition>) {<run this code>} else if(<check another condition>) {<run this code>} else {<run this code if no conditions are met>}
you can have multiple else ifs chained after another, same as every other programming language, the 'else' statement at the end is the default code that will run if no other conditions are met
'!=' = not equals operator, can use in the if statement that IF the statement or condition isn't true, then activate that code block
boolean isActive = true; if (isActive) {} #notice that you don't need '==' to say if the boolean == true, it is implicit, you don't need to explicitly say it
if (!isActive) {} #'!' exclamation point is the 'not' operator, 

1:34:10 = Nested If statements ==========================================================================================================================================================================
Nest an if inside an if statement or an else statement

1:36:30 = logical AND operator ==========================================================================================================================================================================
'&&' = logical AND operator, can be used to add 2 conditions, returns true if both conditions are true

1:41:10 = Logical OR operator ===========================================================================================================================================================================
'||' = logical OR operator, Returns true if one condition is true

1:45:00 = SWITCH statement ==============================================================================================================================================================================
Will test a variable and whatever 'CASE' is met(if statement) it will then activate that part of the code, example below:
        switch (time) {
            case 10:
                System.out.println("The time is " + time + "\nTime for a change.");
                break;
            case 12:
                System.out.println("The time is " + time + "\nTime for some hope(cope)");
                break;
            default:
                System.out.println("50% are dependant on a corrupt system.");
        } #make sure to 'break' out of the code, or the code will execute all the branches sequentially, linearly, top to bottom
You can add a 'default' that will run if none of the 'cases' are met
'public static Scanner scanner = new Scanner(System.in); #will allow you to input into the console

1:55:20 = Enhanced SWITCH statement =======================================================================================================================================================================
'enhanced switch statement' just changes the code formatting, instead of being easy to read like above it turns into below example :
case 10 -> System.out.println("The time is " + time + "\nTime for a change."); #this same pattern repeated for each different case, notice the '->' instead of ':' followed by executed code

1:57:20 = FOR loop =======================================================================================================================================================================================
for (int i = 0; i <= 10; i++) {} #basic for loop layout, declares an integer 'i' sets it to '0' then while i is <= 10, it will activate the code in the '{}' curly braces 10 times
if (i == 50) {break;} #will stop the loop if the count reaches 50, will break out of the loop
if (i >= 30 && i <= 50;) {continue} 'continue' #like break, keyword, but will skip the code which comes after continue, while the conditions are met for 'continue' , won't activate code aferwords(skips)
'continue' will skip while the conditions are met, 'break' will stop the for loop entirely

2:04:50 = While Loop and Do While Loop ===================================================================================================================================================================
'while loop' = Used in situations where you don't know how many times you want to loop, but you want to loop until a specific condition is true(display a dialogue while user is inputting)
'while (condition) {do this}' #basic whileloop setup in Java
'do while loop' = used to execute a section of code, even though the condition is false, it will execute the code at least once
'do { <code> } while (condition);' #will execute the code in do, at least once, even if the 'while(condition)' is false

2:13:20 = Functions ======================================================================================================================================================================================
The 'public class Main' function is ran by default every time the Java compiler tries to run your code, this is found in the 'src/Main' 
in order to create our own functions, create them outside of the 'main' function {} curly braces - NOTE : It must still be inside the 'public class Main' function (not the 'public static void main' small m)
'public static void sayHello()' #'public' is an access modifier,'void' is the return type of the function (nothing), 'sayHello' is the fucntion name '()' are the parameters (what goes into your function)
functions are reusable, DRY

2:24:30 = Functions Return ===============================================================================================================================================================================
to return something in a Java function you need to declare what you want to return 'public static <DATATYPE THAT YOU WANT TO RETURN> () {}'
'void' means return nothing
'public static int getMax(int num1, int num2) {}' #takes in 2 integers and returns an integer
 'return' when you return from a function, the function breaks/stops out of the rest of the function, 'unreachable code' 

2:31:00 = Arrays =========================================================================================================================================================================================
Arrays = allow you to store multiple values in a variable without declaring seperate variables for each values
int[] numbers = {1, 2}; #delcare the type in the array 'int' declare it as an array with '[]' array name 'numbers' and the values of the array seperated by commas '{1,2}' in curly braces
for (int number: numbers) {System.out.println(number);} # for every 'number' in 'numbers' that is an integet, print 'number' = to print values in console from an array use a 'for each'
Java uses '0' based index, so it starts at [0]
'fori' intellij shortcut = type 'fori' for integer < numbers.length 
for (int i = 0; i < numbers.length; i++) {System.out.println(numbers[i]);} #same as above, a different way to print out each number in an array
int[] numbers2 = new int[3]; //allows you to define a new array with set number of elements
numbers2[0] = 12; //manually input numbers into the array, it will only allow you to add array elements '[0][1][2]' because we declared '[3]' above, and don't forget it's 0 bound(the declaration doesnt stat at 0)
   # above method can also be used to replace values in an array, once you create an array, it has a fixed size, you can't add numbers into an array after it is created

2:46:00 = Arrays Challenge ===============================================================================================================================================================================
create a function that receives an array as a parameter, the function should return the biggest number from the array of numbers.
public static int getMax(int[] numbers3) {} #retuns an integer, and takes in an array of integers

2:51:10 = OOP(Object Oriented Programming) ===============================================================================================================================================================
Is a way of writing code in the way you think about real world, 'objects' have 2 major charasteristics :
   'state' = what color/model/build/gas mileage/whatever - templates = a plan used to create objects(class)
   'functionality' = can move stop/drive/switch gears
'Right Click' on '/src' -> create -> new Java class # will create a new class in '/src' 
public class Car {private String name; private String model; private String color; private int doors;} #new class created
'fields' = values for classes in OOP, store the state of an object, looks like typesafety is built into Java
'constructor' = a setter for OOP = used to construct an object 
public Car(String name, String model, String color, int doors) {this.name = name; this.model = model;this.color = color;this.doors = doors;} #the parameters are what will set the values for the object class
'this' = keyword used to refer to the current instance of the object, the 'this.name = name;' set the value for the object field
to create an object, you will call the constructor, with the field values in the parameters, inside the 'Main' class
'method' = part of a class that adds functionality to each object
'template' = has 'state' 'constructor' 'functionality' 
'instance' = an actual object that is created with the car template
'instantiation' = the process of creating new instances

3:04:00 = Classes Getters and Setters =======================================================================================================================================================================


