1: Convert Celsius to Fahrenheit
The formula to convert from Celsius to Fahrenheit is the temperature in Celsius times 9/5, plus 32.
You are given a variable celsius representing a temperature in Celsius. Use the variable fahrenheit already defined and assign it the 
Fahrenheit temperature equivalent to the given Celsius temperature. Use the formula mentioned above to help convert the Celsius temperature to Fahrenheit.

2:Reverse a String
Reverse the provided string and return the reversed string.
For example, "hello" should become "olleh".
function reverseString(str) {
  let temp = str.split("");
  str = "";
  for (let i = temp.length - 1; i >= 0; i--){
    str += temp[i];
  }
  return str;
}
reverseString("hello");

3:Factorialize a Number
Return the factorial of the provided integer.
If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.
Factorials are often represented with the shorthand notation n!
For example: 5! = 1 * 2 * 3 * 4 * 5 = 120
Only integers greater than or equal to zero will be supplied to the function.

4:Find the Longest Word in a String
Return the length of the longest word in the provided sentence.
Your response should be a number.
function findLongestWordLength(str) {
  var longestLength = 0;
  const words = str.split(" ");
  for (let i = 0; i < words.length; i++){
    var word = words[i];
    var length = word.length;
    if (length > longestLength){
      longestLength = length;
    }
  }
  return longestLength;
}

5:Return Largest Numbers in Arrays
Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.
Remember, you can iterate through an array with a simple for loop, and access each member with array syntax arr[i].
function largestOfFour(arr) {
  const output = [];
  for (let i = 0; i < arr.length; i++){
    var subArr = arr[i];
    var largestNum = -99999999;
    for (let j = 0; j < subArr.length; j++){
      var num = subArr[j];
      if (num > largestNum){
        largestNum = num;
      }
    }
    output.push(largestNum);
  }
  return output;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

6:Confirm the Ending
Check if a string (first argument, str) ends with the given target string (second argument, target).
This challenge can be solved with the .endsWith() method, which was introduced in ES2015. But for the purpose of this challenge, 
we would like you to use one of the JavaScript substring methods instead.
function confirmEnding(str, target) {
  const strReversed = [];
  const targetReversed = [];
  for (let i = str.length - 1; i >= 0; i--){
    strReversed.push(str[i]);
  }
  for (let i = target.length - 1; i >= 0; i--){
    targetReversed.push(target[i]);
  }
  var shorter;
  if (strReversed.length < targetReversed.length){
    shorter = strReversed;
  }
  else{
    shorter = targetReversed;
  }
  for (let i = 0; i < shorter.length; i++){
    if (strReversed[i] != targetReversed[i]){
      return false;
    }
  }
  return true;
}
confirmEnding("Bastian", "n");
console.log(confirmEnding("Bastian", "n"));

7:Repeat a String Repeat a String
Repeat a given string str (first argument) for num times (second argument). 
Return an empty string if num is not a positive number. For the purpose of this challenge, do not use the built-in .repeat() method.
function repeatStringNumTimes(str, num) {
  if (num <= 0){
    return "";
  }

  else{
    var output = "";

    for (let i = 0; i < num; i++){
      output += str;
    }
  }

  return output;
}

repeatStringNumTimes("abc", 3);

8:Truncate a String
Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a ... ending.
function truncateString(str, num) {
  var output = "";

  for (let i = 0; i < str.length; i++){
    if (i + 1 <= num){
      output += str[i];
    }
  }

  if (str.length > num){
    output += "...";
  }

  return output;
}
truncateString("A-tisket a-tasket A green and yellow basket", 8);

9:Finders Keepers
Create a function that looks through an array arr and returns the first element in it that passes a 'truth test'.
This means that given an element x, the 'truth test' is passed if func(x) is true. If no element passes the test, return undefined.
function findElement(arr, func) {
  for (let i = 0; i < arr.length; i++){
    if (func(arr[i])){
      return arr[i];
    }
  }

  return undefined;
}
findElement([1, 2, 3, 4], num => num % 2 === 0);

10:Boo who
Check if a value is classified as a boolean primitive. Return true or false.
Boolean primitives are true and false.
function booWho(bool) {
  return typeof bool === "boolean";
}
booWho(null);

