Started: 15May2024

1:00 = Reverse a String / Int : =============================================================================================================
Do the string first, because once you can reverse a string, you can easily reverse an integer.
All you would have to do is convert the integer into a string, do the reversal and convert it back into an integer
node 1-reverse-string.js #To test our code, use node. Be sure to cd to correct directory 'Exercises-Completed'
First test worked,
function reverse(str) {
let reversed = "";
for (let i = 0; i < str.length; i++) { #while the for loop is less than the length of str, i++
reversed = str[i] + reversed; #will go through each and add one by one the characters of the reversed string
}
return reversed;
}
// Built in Function way of doing it : Array.prototype.reverse() # can only be used on arrays, convert a string into an array and do the reverse.
//Will need to convert into an array, then convert back into a str/integer
// METHOD 3 :Built in Function way of doing it : Array.prototype.reverse()
//# can only be used on arrays, convert a string into an array do reversal and then convert it back into a string/integer
//The way you convert a string to an array is through the .split method
// function reverse(str) {
//   const strToArray = str.split(""); // if you don't pass anything, it will split each character into a new element in an array
//   strToArray.reverse(); // after creating an array we just called the reverse method
//   return strToArray.join(""); // to turn an array into a string, use the .join method
// }
// chaining allows us to write the three lines above into one line,

//METHOD 4: ONE LINER combined all three above lines into one line using the .split, .reverse, and .join method
function reverse(str) {
    return str.split("").reverse().join("");
  }
  
  console.log(reverse("hello"));
  //METHOD 5: ONE LINER, SAME AS ABOVE BUT TO USE .SPLIT ON AN INTEGER YOU MUST FIRST CONVERT AN INTEGER INTO A STRING. with .toString() method
  function reverseInt(n) {
    const reversed = n.toString().split("").reverse().join(""); // first we need to convert the integer into a string
    return reversed; // WILL RETURN THE REVERSED RESULT
  }

We made an error above, for edge cases where the number is negative, it will first turn '-15' into '51-' to fix this, you need to use the parseInt()
//METHOD 5: ONE LINER, SAME AS ABOVE BUT TO USE .SPLIT ON AN INTEGER YOU MUST FIRST CONVERT AN INTEGER INTO A STRING. with .toString() method
function reverseInt(n) {
  const reversed = n.toString().split("").reverse().join(""); // first we need to convert the integer into a string
  return parseInt(reversed) * Math.sign(n); // USE 'parseInt()' method for the edge case of negative numbers, '-15' into '51-'
} // Math.sign is another built in method that will take the sign (+ or -) and maintain it,

console.log(reverseInt(-21963)); 

11:30 = Palindrome ==============================================================================================================================
We are given a string, return true if the string is a palindrome or false if it is not, a palindrome = read the same way forwards and backwards ex (civic, radar, level, rotor, kayak, madam, and refer)
We already learned how to reverse a string 'return str.split("").reverse().join("");' 
const reveresed = str.split("").reverse().join(""); // first we need to find the reverse of our input string, first .split turns it into an array, .reverse inverts the array, and .join turns it back into a string
f(str === reversed) { // if input str, is equal to reversed(above variable) return true(it is a palindrome)
    return true
}
return false; //otherwise return false
}
//METHOD 2: We can write all of the above code into a one-liner: //Will return true if input 'str' is === eual to 'reversed' and is thus a palindrome, 
function palindrome(str) {
  const reversed = str.split("").reverse().join("");
  return str === reversed;
} 



