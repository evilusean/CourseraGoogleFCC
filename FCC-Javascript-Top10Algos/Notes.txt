Started: 15May2024

1:00 = Reverse a String / Int : =============================================================================================================
Do the string first, because once you can reverse a string, you can easily reverse an integer.
All you would have to do is convert the integer into a string, do the reversal and convert it back into an integer
node 1-reverse-string.js #To test our code, use node. Be sure to cd to correct directory 'Exercises-Completed'
First test worked,
function reverse(str) {
let reversed = "";
for (let i = 0; i < str.length; i++) { #while the for loop is less than the length of str, i++
reversed = str[i] + reversed; #will go through each and add one by one the characters of the reversed string
}
return reversed;
}
// Built in Function way of doing it : Array.prototype.reverse() # can only be used on arrays, convert a string into an array and do the reverse.
//Will need to convert into an array, then convert back into a str/integer
// METHOD 3 :Built in Function way of doing it : Array.prototype.reverse()
//# can only be used on arrays, convert a string into an array do reversal and then convert it back into a string/integer
//The way you convert a string to an array is through the .split method
// function reverse(str) {
//   const strToArray = str.split(""); // if you don't pass anything, it will split each character into a new element in an array
//   strToArray.reverse(); // after creating an array we just called the reverse method
//   return strToArray.join(""); // to turn an array into a string, use the .join method
// }
// chaining allows us to write the three lines above into one line,

//METHOD 4: ONE LINER combined all three above lines into one line using the .split, .reverse, and .join method
function reverse(str) {
    return str.split("").reverse().join("");
  }
  
  console.log(reverse("hello"));
  //METHOD 5: ONE LINER, SAME AS ABOVE BUT TO USE .SPLIT ON AN INTEGER YOU MUST FIRST CONVERT AN INTEGER INTO A STRING. with .toString() method
  function reverseInt(n) {
    const reversed = n.toString().split("").reverse().join(""); // first we need to convert the integer into a string
    return reversed; // WILL RETURN THE REVERSED RESULT
  }

We made an error above, for edge cases where the number is negative, it will first turn '-15' into '51-' to fix this, you need to use the parseInt()
//METHOD 5: ONE LINER, SAME AS ABOVE BUT TO USE .SPLIT ON AN INTEGER YOU MUST FIRST CONVERT AN INTEGER INTO A STRING. with .toString() method
function reverseInt(n) {
  const reversed = n.toString().split("").reverse().join(""); // first we need to convert the integer into a string
  return parseInt(reversed) * Math.sign(n); // USE 'parseInt()' method for the edge case of negative numbers, '-15' into '51-'
} // Math.sign is another built in method that will take the sign (+ or -) and maintain it,

console.log(reverseInt(-21963)); 

11:30 = Palindrome ==============================================================================================================================
We are given a string, return true if the string is a palindrome or false if it is not, a palindrome = read the same way forwards and backwards ex (civic, radar, level, rotor, kayak, madam, and refer)
We already learned how to reverse a string 'return str.split("").reverse().join("");' 
const reveresed = str.split("").reverse().join(""); // first we need to find the reverse of our input string, first .split turns it into an array, .reverse inverts the array, and .join turns it back into a string
f(str === reversed) { // if input str, is equal to reversed(above variable) return true(it is a palindrome)
    return true
}
return false; //otherwise return false
}
//METHOD 2: We can write all of the above code into a one-liner: //Will return true if input 'str' is === eual to 'reversed' and is thus a palindrome, 
function palindrome(str) {
  const reversed = str.split("").reverse().join("");
  return str === reversed;
} 
This problem can also be solved with below 2 methods:
2 Pointers Technique = https://www.geeksforgeeks.org/two-pointers-technique/ 
JS built in Method 'Every' = https://www.w3schools.com/jsref/jsref_every.asp#:~:text=The%20every()%20method%20returns,the%20function%20for%20empty%20elements.

16:00 = Max Char =================================================================================================================================
Given a string return the character that is most commonly used in the string:
We will need some type of a data structure to keep count of every time a character appears in the string, so we need a character map 
data structures in JS called {objects} or maps
function maxChar(str) {
  const charMap = {}; //create an empty object to hold all the characters we loop through
  for (let char of str) {
    if (charMap[char]) { //checks if the character exists on the character map
      charMap[char] = charMap[char] + 1; // if the character exists on the character map, add 1
    } else {
      charMap[char] = 1; // if it doesn't exist on the character map, add it and set it to 1
    }
  }
  return charMap;
} //Will return a character map with a count of each character and a number
Now we need to loop through the object to find the maximum character in the character map
Object.entries(charMap) //will convert the charMap into an array with key:value pairs
//Object.entries(charMap) METHOD: Will sort through the object we created and turn it into an array with key:value pairs, so we can find the maxChar
function maxChar(str) {
  const charMap = {}; //create an empty object to hold all the characters we loop through
  let max = 0; // to find the maxCharacter(character used the most) we need to have a variable that keeps track of it
  let maxChar = ""; // same as above but for the key, instead of the count

  for (let char of str) {
    if (charMap[char]) {
      charMap[char] = charMap[char] + 1;
    } else {
      charMap[char] = 1;
    }
  }
  for (const [key, value] of Object.entries(charMap)) {
    //will convert each key:value letter:count in the charMap object into an array, this will loop through each key:value pair in the array
    if (value > max) {
      //if the value of the current key is greater than the current max,
      max = value; //set new max is current value count
      maxChar = key; //set new maxChar as the current key
    }
  }
  return maxChar;
}

// METHOD 3: Optimized Cleaner version of above:
function maxChar(str) {
  const charMap = {}; //create an empty object to hold all the characters we loop through
  let max = 0; // to find the maxCharacter(character used the most) we need to have a variable that keeps track of it
  let maxChar = ""; // same as above but for the key, instead of the count
  for (let char of str) {
    charMap[char] = charMap[char] + 1 || 1;
  }
  for (let key in charMap) {
    if (charMap[key] > max) {
      max = charMap[key];
      maxChar = key;
    }
  }
  return maxChar;
}

33:45 = Array Chunking ========================================================================================================================================
We are given an array, and a chunk size, divide the array into many subarrays where each subarray is of length chunk size
Divide and conquer, how to get the first 2 elements from the array? 
We can use the built in array function called '.slice()':
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
array.slice(0,size) //already takes size as an inital parameter, JS is 0 based indexed, will start at 0, slice at 'size' parameter
will only take 1 slice, we need to return all of the sliced results. first we need to get the chunks, and store them in a 'result' and return that result as an array 
so we will need a variable to keep track of the index, how many chunks we have to add to the array 'let index = 0' 'result.push(array.slice(index,size))'
//METHOD 1: WORKS
function chunk(array, size) {
  const result = []; //ARRAY TO STORE PUSHED VALUES ON
  let index = 0; //DEFAULT STARTS AT 0 '0 BASED INDEX'
  while (index < array.length) {
    //WHILE INDEX IS LESS THAN ARRAY.LENGTH,
    result.push(array.slice(index, index + size)); //PUSH NEW VALUES, array.slice (INDEX VALUE, INDEX VALUE + SIZE) # WILL RETURN NEW SLICE FOR ARRAY
    index += size; //ADDS NEXT SIZE TO INDEX, SO WE CAN PUSH ON THE NEXT SLICE TO THE ARRAY
  }
  return result; //RETURNS THE NEW ARRAY
}

console.log(chunk([1, 2, 3, 4, 5], 4));





