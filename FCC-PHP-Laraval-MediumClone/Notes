Start : 28 August 2025

0:00:00 - Intro & Demo ========================================================================================================================================================================
https://medium.com/ #cloned website
Course teaches Basic Setup, Advanced Features : User Following, Post Management, Routing, Authentication, Database Operations, Blade Templating
You can see when the posts are published, when, by whom, likes, estimated read time, date published, category, filter by categories, search by user posts/profiles, followers  
create post requires : an image, title, category, content, publish date
profile page : change avatar, username, email, bio, password

0:05:35 - Setup Environment & Create Project ==================================================================================================================================================
Setup Environment - Laravel Herd (NGINX, PHP 8.4, MySQL, Redis) Only for windows and mac : 
https://herd.laravel.com/windows
Herd downloads the latest version of PHP-Laravel, NodeJS, NPM, NVM(node version manager), NGINX
When you open herd, it brings you to a dashboard to view your active services : open sites, general overview, paths, PHP versions, Node versions, 
Create a new project in herd from the dashboard -> 'open sites' -> '+Add'
  You can choose to use either React, Vue, or Livewiere for your new project, Name it, and that's it
Testing Frameworks : Pest Vs PHPUnit
For Laravel development on Arch Linux, users typically opt for alternative solutions such as:
Laravel Homestead:
A pre-packaged Vagrant box providing a complete development environment with PHP, Nginx, databases, and other services within a virtual machine.
https://laravel.com/docs/12.x/homestead
https://github.com/laravel/homestead
Laravel Homestead is an official, pre-packaged Vagrant box designed to provide a convenient and consistent development environment for Laravel applications. 
  It eliminates the need to manually install and configure server software like PHP, Nginx, MySQL, and other tools directly on your local machine.
Arch Linux Homestead Install :
sudo pacman -S vagrant 
sudo pacman -S virtualbox
git clone https://github.com/laravel/homestead.git ~/.local/share/homestead
cd ~/.local/share/homestead
git checkout release
bash init.sh
Configure Homestead.yaml: Open the generated ~/.local/share/homestead/Homestead.yaml file and configure it to your needs. 
  This includes setting the provider to virtualbox and mapping your project directories
Add a hosts file entry: Edit your /etc/hosts file with sudo and add an entry that maps your site's domain to the Homestead IP address (e.g., 192.168.10.10).
Installing Laravel Homestead on Arch Linux involves a few key steps. Since Homestead is a pre-configured Vagrant box, 
  you'll first need to install Vagrant and a virtualization provider like VirtualBox.
Open the generated ~/.local/share/homestead/Homestead.yaml file and configure it to your needs. This includes setting the provider to virtualbox and mapping your project directories.
YAML
provider: virtualbox
folders:
    - map: ~/Projects/MyProject
      to: /home/vagrant/MyProject
sites:
    - map: myproject.test
      to: /home/vagrant/MyProject/public
Add a hosts file entry:
Edit your /etc/hosts file with sudo and add an entry that maps your site's domain to the Homestead IP address (e.g., 192.168.10.10).
sudo nano /etc/hosts
# Add this line to the end of the file
192.168.10.10 myproject.test
Launching Homestead :
After all the configurations are complete, you can launch your virtual machine.
Navigate to the Homestead directory:
cd ~/.local/share/homestead
Start the virtual machine:
vagrant up # The first time you run this, Vagrant will download the pre-packaged Laravel Homestead box, which may take some time.
Access the VM: Once it's up, you can SSH into the virtual machine.
vagrant ssh
Manual setup:
Installing and configuring PHP, Nginx (or Apache), Composer, and any required databases (like MySQL or PostgreSQL) directly on the Arch Linux system.
Docker:
Utilizing Docker containers to create isolated and portable development environments for Laravel projects.
Therefore, while Laravel Herd is a powerful tool for its intended platforms, it cannot be directly installed or used on Arch Linux. 
  Users on Arch Linux should explore the alternative methods mentioned above for setting up their Laravel development environment.
Arch Linux Install (with SQLite) :
sudo pacman -Syu #update system, reboot
sudo pacman -S php php-fpm php-gd php-intl #install all php prerequisites
sudo pacman -S composer #install composer
sudo pacman -S php-sqlite #project will use sqlite
sudo nano /etc/php/php.ini # After installation, you need to enable the extension in your php.ini file. 
# Find the lines for the SQLite extensions and uncomment them by removing the semicolon ; at the beginning of each line. ';extension=pdo_sqlite' ';extension=sqlite3' 
sudo systemctl restart php-fpm #Restart the PHP-FPM service for the changes to take effect.
composer global require laravel/installer # Use Composer to install the Laravel installer globally.
#Add the Composer vendor bin directory to your system's PATH. This allows you to run the laravel command from any directory. The path is typically ~/.config/composer/vendor/bin on Arch Linux.
nano ~/.bashrc # Add the following line to the end of the file: 'export PATH="$PATH:$HOME/.config/composer/vendor/bin"'
source ~/.bashrc #resource, so you can use 'laravel' in terminal anywhere
laravel new your-project-name # will allow you to now create a new project 
laravel new FCC-MediumClone # new project, options : No Toolkit(react, etc), SQLite, NPM install, npm run build 
ERROR : Node is outdated, need version > 20, currently on 16 (did a 'sudo pacmna -Syu' yesterday so idk, need to fix)
https://github.com/nvm-sh/nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash #install script for NVM
yay -s nvm # idk which one worked
nvm ls-remote --lts # this was the fix, I installed version 20 globally, but my project was running 16(?) so I had to run these commands in the IDE terminal
nvm install <version_number>
nvm alias default <version_number>
Finally got everything working, took a day just to setup environment, 
VSCode vs PHPStorm - He's going over the IDE's - He reccomends PHP Storm, paid app, too poor, maybe future Sean might want. 
https://www.jetbrains.com/phpstorm/ 
VSCode Extensions : 'PHP - Devsense'(Has PHP syntax highlighting, autocomplete, etc) 'Laravel - Laravel' (Official VSCode Extension for Laravel) 
https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night 
https://marketplace.visualstudio.com/items?itemName=AtomMaterial.a-file-icon-vscode
'npm install' #the drill
'composer run dev' # how to start the server on linux
  This will not work on windows without editing the 'php.ini' file, since I will never use windows again, I never have to worry about this 'EGPCS' -> 'GCPS'
  Vite server runs with it, 
'npm run dev' # for windows and mac, linux should user 'composer run dev'

0:15:03 - Explore Directory Structure ======================================================================================================================================================
'app' folder = contains 'Http' (Controller.php) 
  'Models' (User.php) 
  'Providers' (AppServiceProvider.php)
'bootstrap' folder = contains 
  'cache' 
  'app.php' (this is the main file which initializes the application, confirguration with routing, 'create' method) 
  'providers.php'
'config' folder = contains every file needed for configuration
'database' = contains 'factories' (UserFactory.php = defines each field when new data is input, can also create unique dummy data)
  'migrations' (contains 3 migrations to begin with, a migration is a file which contains the DB schema change, instead of doing it manually use a migration, commit and push)
  'seeders' (DatabaseSeeder.php)
  'database.sqlite' (main file for tables/data)
'seeders' folder = contains 'DatabaseSeeder.php' (creates data in database)
'public' folder = contains all web accesible files, like 'favicon', 'robots.txt'
  'index.php' (the entry script, everything starts from index.php, whenever you access the app in the browser, everything get's accessed from index.php, loads packages, 
  uses 'bootstrap/app.php' to create the app
'resources' folder = contains 'css' (app.css)
  'js' (app.js, bootstrap.js)
  'views' (welcome-blade.php)
'routes' folder 
  'console.php' (for console comments)
  'web.php' (where you define all of the routes that you access in the browser)
'storage' folder 
  'app' folder ('private' = contains user uploaded data, 'public' = contains data)
  'framework forlder' ('cache' 'sessions' 'testing' 'views' = framework generated data)
  'logs' folder 
'tests' folder = contains tests (Pest.php, TestCase.php)
  'Feature'
  'Unit'
'vendor' folder = contains all the third party packages
'.env' = main configuration file with credentials, API keys, etc (other configs found in the 'config' folder)
'.env.example' = example env
'artisan' = important file, similar to 'public/index.php' file, requires '/vendor/autoload.php' and '/bootstrap/app.php' -> 'handleCommand(new ArgvInput)' method to start app
  Artisan is the main command line interface that you use to interact with your php project
'composer.json' = dependancies 
'composer.lock' = dependancies
'package.json' = npm dependancies
'vite.config.js' = vite server config (php runs a vite server)

0:21:36 - Introducing Artisan ==============================================================================================================================================================
ERROR : Did a 'yay -Syu' to update my VSCode, and it broke my hyprland setup, spent the last few hours trying to fix, missing my top bar, reinstalling the dot-files to fix
'yay -S --rebuild quickshell' # It doesn't use waybar, it uses quickshell, this at least get's it to load the search feature
'yay -S --rebuild google-breakpad-git' # in order to rebuild quickshell, I needed to rebuild this thing
everything still 'works' all the keybindings, I just have no UI/top bar, can't see the time either - Future Sean Problem
'php artisan list' # shows all the artisan commands, listed below :
Usage:
  command [options] [arguments]
Options:
  -h, --help            Display help for the given command. When no command is given display help for the list command
      --silent          Do not output any message
  -q, --quiet           Only errors are displayed. All other output is suppressed
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
Available commands:
  about                     Display basic information about your application
  clear-compiled            Remove the compiled class file
  completion                Dump the shell completion script
  db                        Start a new database CLI session
  docs                      Access the Laravel documentation
  down                      Put the application into maintenance / demo mode
  env                       Display the current framework environment
  help                      Display help for a command
  inspire                   Display an inspiring quote
  list                      List commands
  migrate                   Run the database migrations
  optimize                  Cache framework bootstrap, configuration, and metadata to increase performance
  pail                      Tails the application logs.
  serve                     Serve the application on the PHP development server
  test                      Run the application tests
  tinker                    Interact with your application
  up                        Bring the application out of maintenance mode
 auth
  auth:clear-resets         Flush expired password reset tokens
 cache
  cache:clear               Flush the application cache
  cache:forget              Remove an item from the cache
  cache:prune-stale-tags    Prune stale cache tags from the cache (Redis only)
 channel
  channel:list              List all registered private broadcast channels
 config
  config:cache              Create a cache file for faster configuration loading
  config:clear              Remove the configuration cache file
  config:publish            Publish configuration files to your application
  config:show               Display all of the values for a given configuration file or key
 db
  db:monitor                Monitor the number of connections on the specified database
  db:seed                   Seed the database with records
  db:show                   Display information about the given database
  db:table                  Display information about the given database table
  db:wipe                   Drop all tables, views, and types
 env
  env:decrypt               Decrypt an environment file
  env:encrypt               Encrypt an environment file
 event
  event:cache               Discover and cache the application's events and listeners
  event:clear               Clear all cached events and listeners
  event:list                List the application's events and listeners
 install
  install:api               Create an API routes file and install Laravel Sanctum or Laravel Passport
  install:broadcasting      Create a broadcasting channel routes file
 key
  key:generate              Set the application key
 lang
  lang:publish              Publish all language files that are available for customization
 make
  make:cache-table          [cache:table] Create a migration for the cache database table
  make:cast                 Create a new custom Eloquent cast class
  make:channel              Create a new channel class
  make:class                Create a new class
  make:command              Create a new Artisan command
  make:component            Create a new view component class
  make:config               [config:make] Create a new configuration file
  make:controller           Create a new controller class
  make:enum                 Create a new enum
  make:event                Create a new event class
  make:exception            Create a new custom exception class
  make:factory              Create a new model factory
  make:interface            Create a new interface
  make:job                  Create a new job class
  make:job-middleware       Create a new job middleware class
  make:listener             Create a new event listener class
  make:mail                 Create a new email class
  make:middleware           Create a new HTTP middleware class
  make:migration            Create a new migration file
  make:model                Create a new Eloquent model class
  make:notification         Create a new notification class
  make:notifications-table  [notifications:table] Create a migration for the notifications table
  make:observer             Create a new observer class
  make:policy               Create a new policy class
  make:provider             Create a new service provider class
  make:queue-batches-table  [queue:batches-table] Create a migration for the batches database table
  make:queue-failed-table   [queue:failed-table] Create a migration for the failed queue jobs database table
  make:queue-table          [queue:table] Create a migration for the queue jobs database table
  make:request              Create a new form request class
  make:resource             Create a new resource
  make:rule                 Create a new validation rule
  make:scope                Create a new scope class
  make:seeder               Create a new seeder class
  make:session-table        [session:table] Create a migration for the session database table
  make:test                 Create a new test class
  make:trait                Create a new trait
  make:view                 Create a new view
 migrate
  migrate:fresh             Drop all tables and re-run all migrations
  migrate:install           Create the migration repository
  migrate:refresh           Reset and re-run all migrations
  migrate:reset             Rollback all database migrations
  migrate:rollback          Rollback the last database migration
  migrate:status            Show the status of each migration
 model
  model:prune               Prune models that are no longer needed
  model:show                Show information about an Eloquent model
 optimize
  optimize:clear            Remove the cached bootstrap files
 package
  package:discover          Rebuild the cached package manifest
 pest
  pest:dataset              Create a new dataset file
  pest:test                 Create a new test file
 queue
  queue:clear               Delete all of the jobs from the specified queue
  queue:failed              List all of the failed queue jobs
  queue:flush               Flush all of the failed queue jobs
  queue:forget              Delete a failed queue job
  queue:listen              Listen to a given queue
  queue:monitor             Monitor the size of the specified queues
  queue:prune-batches       Prune stale entries from the batches database
  queue:prune-failed        Prune stale entries from the failed jobs table
  queue:restart             Restart queue worker daemons after their current job
  queue:retry               Retry a failed queue job
  queue:retry-batch         Retry the failed jobs for a batch
  queue:work                Start processing jobs on the queue as a daemon
 route
  route:cache               Create a route cache file for faster route registration
  route:clear               Remove the route cache file
  route:list                List all registered routes
 sail
  sail:add                  Add a service to an existing Sail installation
  sail:install              Install Laravel Sail's default Docker Compose file
  sail:publish              Publish the Laravel Sail Docker files
 schedule
  schedule:clear-cache      Delete the cached mutex files created by scheduler
  schedule:interrupt        Interrupt the current schedule run
  schedule:list             List all scheduled tasks
  schedule:run              Run the scheduled commands
  schedule:test             Run a scheduled command
  schedule:work             Start the schedule worker
 schema
  schema:dump               Dump the given database schema
 storage
  storage:link              Create the symbolic links configured for the application
  storage:unlink            Delete existing symbolic links configured for the application
 stub
  stub:publish              Publish all stubs that are available for customization
 vendor
  vendor:publish            Publish any publishable assets from vendor packages
 view
  view:cache                Compile all of the application's Blade templates
  view:clear                Clear all compiled view files
'php artisan about' # tells you about your php/laravel/artisan versions, timezones, confs, caches, drivers, etc
'php artisan make --help' # --help flag tells you what a command does, and shows you all the commands that can be used with it
Artisan is your main tool for Laravel-PHP, you can use it to create files, create caches, etc

0:23:22 - Laravel Configuration ============================================================================================================================================================= 
'.env' # contains your main laravel configurations and not just your API keys in PHP-Laravel
'config' folder has all the other configurations 'app.php' 'auth.php' 'cache.php' 'database.php' ..... etc, each one corresponds with the config for it's name
if you aren't going to make any changes to the 'config' folder files, you can delete them, the config files already exist in laravel core, and if they aren't there,
  the framework will use the laravel core versions, if you only modify one part of one 'config -> _.php' file you can delete everything else in that file aswell, and laravel will use default
'php artisan config:publish' # will allow you to use your new config files, if the file isn't in the 'config' folder, it will create it and you can edit it 

0:26:27 - Create Basic Route ================================================================================================================================================================== 
'routes -> web.php' 
<?php //this is a opening tag for PHP. It is a special marker that tells the web server that the code that follows is to be interpreted as PHP and not as plain HTML.
// The 'Route' facade is a class provided by the framework (e.g., Laravel)
// that simplifies the process of defining application routes.
// The 'get' method registers a new route that responds only to
// HTTP GET requests. This is the most common type of request, used
// by web browsers to fetch a page.
// The first argument, '/hello', is the URI (Uniform Resource Identifier)
// that the application will listen for. When a user visits this path,
// the code inside the function is executed.
Route::get('/hello', function() {
    return 'Hello, World!';
    // This is an anonymous function (or closure) that acts as the
    // handler for the route. This function is executed when the
    // URI '/hello' is requested with a GET method.
    // The 'return' statement sends the specified value back as the
    // HTTP response. The framework automatically takes this plain string
    // and sends it to the user's web browser, which will then
    // display "Hello, World!" on the screen.
});
// The 'Route' facade is used to register a new route for the application.
// The 'get' method specifies that this route should handle HTTP GET requests.
// The first argument, '/', is the URI. This is a special case that
// represents the root of the website (e.g., [your-website.com/](https://your-website.com/)).
Route::get('/', function () {
    return view('welcome');
    // This is the function that will be executed when a user visits
    // the root URL.
    // The 'return' statement sends the result of the 'view()' function
    // back to the user.
    // The 'view()' function is a helper function that tells the framework
    // to find and render an HTML file (called a "view").
    // The argument 'welcome' tells the framework to look for a file
    // named 'welcome.blade.php' (or similar) inside the 'resources/views'
    // directory. The content of that file will be rendered as the
    // final web page.
});














































