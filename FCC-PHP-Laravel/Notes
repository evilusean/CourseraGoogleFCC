Building an instagram clone :
Features = Follow/Unfollow/Edit Profile/Profile Image/Resize Images/Add New Post/Captions/Add Images/Logout/Users/Authentication/Register Users/Usernames
Laravel - PHP = The fastest growing PHP framework to date, #1 framework in github, easy for newcomers, powerful

PHP-Laravel Installer:
https://laravel.com/docs/5.0/installation
  1) Install Composer:
  https://getcomposer.org/
  https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md
  2)Install Laravel:
  composer global require "laravel/installer=~1.1"

Project Requires: PHP >8.2, node.js, npm, laravel - took hours to install on ubuntu, had to add laravel to $PATH in usr/bin/
Project created in var/wwww/html/laravelapp

How to Start a project:
https://laravel.com/docs/10.x/installation
composer global require laravel/installer
laravel new example-app
cd example-app
php artisan serve #Once you have started the Artisan development server, your application will be accessible in your web browser at http://localhost:8000
php artisan serve --host=_your_ip_address --port=8000 #You can explicitly define the host and the port with artisan serve command
php artisan serve --host=0.0.0.0 --port=8000 #place "0.0.0.0" at your host option and it will work without set any firewall or any extra. 
sudo ufw allow 8000 #allow open port for firewall
#use below in root directory of project to update before being able to host:
composer install --ignore-platform-reqs
composer update --ignore-platform-reqs

(5:30) First look at the project=============================================================================================================================================================================
After installing(finally) the first you notice is ALOT of files, don't worry about these, over time this becomes second nature to you and you know exactly where to find everything
composer.json = will hold all of your files assets, unlike the dependancy manager composer, this file is for instructseans

(7:15) Intro to php artisan==================================================================================================================================================================================
artisan = a command line tool that ships with laravel that allows you to do many things with your application, you can interact with your entire laravel application through artisan with tinker
always ensure you are in the correct directory
php artisan #lists all commands you can use in artisan, 'available commands' are unique to artisan, other commands are universal
things like authorization are why you use a framework, to speed up development, instead of rebuilding things you don't need 
php artisan serve #starts up the built in laravel PHP server, when you start in the terminal- you can then view all the requests made to the server, terminal must continue to run in the background

(11:42) Generating login flow with make:auth=================================================================================================================================================================
HTML = root directory -> resources -> views -> welcome.blade.php 
  blade is a rendering template that allows you throw in snippets of php in your views
your views will primarily be composed of HTML markup, there is no reason you should ever be computing or fetching database queries in your view - that's what controllers are for
php artisan make:auth #Laravel ships with an authentication system that allows you to register users, it allows you to log in and keeps track of all your sessions out of the box
  in Laravel 6.0 php artisan make:auth no longer exists, solution run:
  composer require laravel/ui
  php artisan ui:auth
  you can also generate the views only with:
  php artisan ui:auth -views
After using the above commands, you will have set up a login and register feature to your laravel project-quick and easy

(12:04) Setting Up the Front End with Node and NPM============================================================================================================================================================
First we need to fix the views
The Javascript portion of laravel is found in welcome.blade.php / home.blade.php
Laravel is a full development framework - has a frontend and backend - ships with a working implementation of twitter bootstrap, and view.js - although you still do need to run a compilation
to get view.js we need to use node pack manager(npm) in terminal
front end = everything that a user can physically touch, when user clicks something, it goes to the backend, backend will do something and return it to the frontend
If you're familiar with react/jquery or anything like that, you can rip everything out, switch out of view and start over with them or any other JS framework
node -v #check version of node.js
npm -v #check version node package manager
npm install #run in the project root directory to install npm and get all dependancies
npm run dev #npm in front end development must be compiled before you can use
  What above command will do, is take everything that laravel ships with and compiles it down to a file you can actually use, done through webpack, compiles it all down to the smallest size you can
If any errors in 'npm run dev' he reccomends deleting the node module and then installing everything again
app.css and app.js will be compiled from all the frontend assets
resources -> js -> app.js #file you can edit(not compiled)
  public -> js -> app.js #compiled file, lots of hieroglyphs and magic happened NEVER TOUCH DIRECTLY
sass directory -> app.scss #file you can edit for CSS, you can add as many as you want, just ensure you import them
  #above directory changed, it is now resources -> css -> app.css
After all that and error fix, setup is finally complete and we can begin - took a day just to get started.
views -> home.blade.php = What gets loaded when a user logs in to the application, at this point no one can log in, because we have not created any users
to create a user, you need to have a database setup
=====================================================================================ERROR FIX================================================================================================================
https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-22-04
  #got an error when compiling, ran below to fix
  curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  sudo apt-get install -y nodejs
  #had to install another program, nvm node version manager
  sudo apt install curl
  curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
  #check versions of node to install, install through nvm allows you to get a newer version on ubuntu, automatically installs 12.22 for some reason instead of latest
  #ERROR MESSAGE : ERROR: npm v10.2.4 is known not to run on Node.js v12.22.9.  This version of npm supports the following node versions: `^18.17.0 || >=20.5.0`.
nvm list-remote #lists all available versions NVM can install, need above 14 to run 'npm run dev'
nvm install v20.11.1 #installed version
nvm list #This shows the currently active version on the first line
Further TroubleShooting======================================================================================================================================================================================
sudo apt remove nodejs #You can uninstall Node.js using apt or nvm, depending on how it was installed. To remove the version from the system repositories, use apt remove
sudo apt purge nodejs #By default, apt remove retains any local configuration files that were created since install. If you don’t want to save the configuration files for later use, use apt purge
nvm current #To uninstall a version of Node.js that you installed using nvm, first determine whether it is the current active version:
nvm uninstall node_version #how to uninstall with nvm, replace node_version with what you want to remove
nvm deactivate # If the version you would like to remove is the current active version, you’ll first need to deactivate nvm to enable your changes:
FIXED: 'npm run dev' WORKS ===================================================================================================================================================================================
(20:00) Migrations and Setting Up SQLite======================================================================================================================================================================
php artisan #gets a list of commands
php migrate #migrations are files that describe your database, so instead of you going into database making changes and going into production server and making those same changes manually
  you are going write these migration files that are going to describe your database - higher concept - a file that holds all the instructions you need to tell your database to create itself
  throughout this project we are going to modify the database, but through migration - not directly into the database - describes each change in a systematic way, 
  unless you document your changes very well, you will likely forget a step or 2 in your production and everything will get messed up - also other developers will not know how to recreate change(in teams)
  allows everyone to have the same defininition of what the database is supposed to look like
before you run the migration command, you need to set up some sort of database with laravel, we are using SQLite in this project, because it is easy to set up
step 1) create a file, this file will flat file database file(how SQL lite works)
  nvim database/database.sqlite #will create a new database file using nvim, will be left empty, to escape press 'esc' + :wq (w=write, q=quit)
step 2) check out new database file, it's there
step 3) after checking file was created, go to root directory -> .env 
  .env = holds all of the different configurations that are specific to your (env)ironment
step 4) navigate to the database setup section, delete all of the DB_ lines, except DB_CONNECTION, by default it is using mysql, replace with sqlite, save
how to migrate/how to get it to the latest state possible:
Step 5) php artisan migrate
  After fixing Error below, 
  Preparing database.  

  Creating migration table ........................................ 441ms DONE

   INFO  Running migrations.  

  2014_10_12_000000_create_users_table ............................ 188ms DONE
  2014_10_12_100000_create_password_reset_tokens_table ............. 84ms DONE
  2014_10_12_100000_create_password_resets_table .................. 169ms DONE
  2019_08_19_000000_create_failed_jobs_table ...................... 198ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ........... 325ms DONE
Succesfullly Completed users table, and passwords reset table:
Users Table = holds all users in application
passwords table = holds any passwords reset, when a user forgets password, will send an email, and that is stored in this table
All of this ships with laravel, you don't need to create any of it.
===========================================================================ERROR==============================================================================================================================
Illuminate\Database\QueryException 
  could not find driver (Connection: sqlite, SQL: PRAGMA foreign_keys = ON;)
sudo apt-get install php-sqlite3 #downloads SQLITE
php --ini #gets location of php init path, You also need to enable pdo_sqlite extension in your php.ini too, check the path of your loaded .ini with the below command
sudo nvim /etc/php/8.3/cli/php.ini #opens up the file, to add php sqlite3 to php, don't forget sudo so you can edit.
php -m | grep pdo_sqlite #checks if added
ENABLE THE FOLLOWING IN php.ini:
;extension=pdo_sqlite by removing the /;/ should look like this extension=pdo_sqlite
;extension=sqlite3 should be extension=sqlite3 without the ; symbol
extension=pdo_sqlite
extension=sqlite3
=========================================================================================ERROR #2=============================================================================================================
PHP Warning:  PHP Startup: Unable to load dynamic library 'pdo_sqlite' (tried: /usr/lib/php/20230831/pdo_sqlite (/usr/lib/php/20230831/pdo_sqlite: 
cannot open shared object file: No such file or directory), /usr/lib/php/20230831/pdo_sqlite.so (/usr/lib/php/20230831/pdo_sqlite.so: undefined symbol: php_pdo_unregister_driver)) in Unknown on line 0
PHP Warning:  Module "sqlite3" is already loaded in Unknown on line 0
PHP 8.3.3-1+ubuntu22.04.1+deb.sury.org+1 (cli) (built: Feb 15 2024 18:38:52) (NTS)

php.ini location: /etc/php/php.ini
=======================================================================================Attempt 1:=============================================================================================================
Keep getting error, trying to move project to public folder:
Going to try to move project repository to the public location /var/www/html/:
sudo chmod -R 777 /var/www/html/ #grants all permissions to paste project
Permissions granted, after move, same result:
This is the default welcome page used to test the correct operation of the Apache2 server after installation on Ubuntu systems. It is based on the equivalent page on Debian, from which the Ubuntu Apache packaging is derived.
If you can read this page, it means that the Apache HTTP server installed at this site is working properly. You should replace this file (located at /var/www/html/index.html) before continuing to operate your HTTP server.

From new root directory 'npm run dev' still doesn't work, and 'php artisan serve' keeps throwing an SQLITE error, can attempt to fix either/or..
-It can only run index.html? that seems extremely limiting..
======================================================================================Attempt 2:===============================================================================================================
Potential Fix, been at this for a few hours, taking a break:
https://stackoverflow.com/questions/44701256/unable-to-load-pdo-sqlite-so-extension
sudo apt install php8.3-sqlite3 #tried reinstalling the php version instead of generic 'sudo apt get install sqlite3'

FIXED(Finally): open 2 terminals, You need to run 'npm run dev' first, and then 'php artisan serve' to get access to the registration form.. apparently one of the (many) copies of sqlite3 I installed worked, huzzah
====================================================================================FIXED======================================================================================================================
Step 6) Create a new user -> Register Button -> Success -> Logout(test) -> Log back in(Success!) = database works
  TestUser - Test@test.com - assword
Anytime you make changes to .env file, you must stop the server and start it up again - thankfully already done after hours of troubleshooting

(26:00) Designing the UI from Instagram=========================================================================================================================================================================
up until this point, laravel has been installing mostly everything itself(outside of troubleshooting)-
views -> layouts -> app.blade.php = 
at the top you see a div = <a class="navbar-brand" href={{url('/' }}> {{ config('app.name', 'laravel') }} #this is what is being passed in
  remove this and added in freeCodeGram, wrapped in a div, 
public -> create new directory called 'svg' -> freeCodeCampLogo.svg = Time to add a logo, svg(Scalabe Vector Graphics) work at any size and have a good resolution, mathematical pictures
  <div><img src="/svg/freeCodeGram.svg" alt="freeCodeGram"></div> #notice how he starts with '/', this is because he does not need to go to public directory, because laravel starts in public
whenever a user is accessing the site, they are default in the public directory, they do not have access to anything outside of the public directory
after creating the .svg file and title, they are stacked on top of eachother, we can fix this with by changing it to a flex box by adding 'd-flex' to class
=================================================================ERROR==========================================================================================================================================
Bootstrap/CSS not working:
https://www.cloudways.com/blog/laravel-bootstrap-template-integration/
Commands in project root tried:
composer require laravel/ui
php artisan ui bootstrap
npm install && npm run dev
No Success. New Error Message after above commands: Installation failed, reverting ./composer.json and ./composer.lock to their original content.
Just ran npm run dev, and I broke the project :(
trying to fix, going to comment out and see which part is breaking it.. either this or reinstall and start from scratch, have notes and everything to get back up to this point relatively easily if I need to
I'm using Git, I could always revert changes, haven't done that yet-ever, and might lose all my notes - I think trying to manually fix is the best option, but even if I do, I still won't have CSS/BootStrap
  just fewer error messages - the project still 'works', but no CSS/bootstrap and alot of red when I 'npm run dev' - I still havn't actually figured out why CSS is not loading. 
If I reinstall - I could be back to this point in a few hours, but install/fix css/bootstrap at the start before I start adding databases and other stuff, many opseans
If I don't reinstall I added a bunch of files I have no idea what they do, and will affect the project later on, and even though they are added, have not fixed the core issue of CSS/bootstrap
whichever directsean I go, it's going to cost me hours of work, and I still havn't figured out what the problem is, I imported/installed it, and it's not working - going to take a break - deciseans -
-Fixed- Forgot that I removed something awhile ago, and created a master.blade.php to hold all the dependancies(is this the right term?)/modules/libraries
    @vite(['resources/sass/app.scss', 'resources/js/app.js'])
DO NOT REMOVE THAT AGAIN, FUTURE SEAN
apparently even if you don't use vite, you are using vite to compile, it is vital, to life... of laravel
that was almost entirely my fault, pasted over the old code without reading, Going to try to remove some of the excess superfluous stuff I randomly threw in for seeing what sticks
==================================================================================FIXED=========================================================================================================================
tutorial is 5 years old, they also changed how the class="pl-3" padding left works, syntax has changed to pe-3/ps-3 = Scared me when I thought bootstrap still didn't work after all that ^
https://getbootstrap.com/docs/5.1/utilities/spacing/#notation
Padding left (pl-3) / padding right (pr-3) = Padding Left=PaddingEnd-size (pe-3) / Padding Right = PaddingStart-size (ps-3) 
pt=padding top (pt-2) / padding all sides(p-5)
class="rounded-circle" #redundant
https://fonts.google.com/ #free fonts to use, you also need to import bold on top of the original 
https://fonts.bunny.net/ #another free font resource
after @importing the new larger Open+Sans:400,700 font you need to reference it
resources -> sass -> _variables.scss #where you can reference new fonts to use in your project
  to change the blueish background to white you can find the $body-bg: #f8fafc; in the above directory, 
everytime you make changes to frontend you will need to rerun 'npm run dev' will recompile all the frontend for you, 

(42:12) Adding Username to the Registration Flow================================================================================================================================================================
We currently have text as a placeholder for {username} in the register form, there is no username, there is name/email/password
we need to add a new column so that when a user registers, they can tell us what they want to their username to be
the DB was created when we ran the make: auth command
root -> public -> resources -> views -> auth #directory with 3 files created login.blade.php / register.blade.php / verify.blade.php
inside the register.blade.php file, you have below code for name, email address, password, and confirm password
  <label for="name" class="col-md-4 col-form-label text-md-end">{{ __('Name') }}</label> 
we copied the email address and pasted to create the username, replaced all instances of 'email' with 'username'
we havn't added a logout feature yet, need to figure out how to log out.. so we can view the new registration form - just needed to reset the server and 'npm run dev' / 'php artisan serve'
if you remove the 'required' attribute, it will switch validation from HTML validation to laravel validation
when you click register, we do a post back to the server, the server validates the data, and sends a reply back to client, all of the fields are required except the new username field
  all we have done is added the markup field for the username in the form - in order to fix this, we need to edit another file
root -> app -> HTTP -> controllers -> Auth -> RegisterController.php 
  RegisterController.php = responsible for registering users, inside this is something called a protected function validator(array $data) {}
  inside the validator is what we are using to validate the data, add a new entry for username         
  'username' => ['required', 'string', 'max:255', 'unique:users'],
  each of the strings in the array are selfexplanatory, each one is some sort of validation that needs to pass, 'unique: users' means there can only be one highlander in the database
Controllers = where all the logic is stored, where you need to fetch data/manipulate the data, calculations, queries that is the job of the controller, not the view
the view is used to put things in the right location, that's it, it should not be doing calculations or queries, that is the job of the controller
After updating our registration form and validator, we need to add the username and make a modification to the migration
root -> database -> migrations -> create_users_table.php #where to find the database migrations, created when you ininitially ran make: auth command
  in here we can scroll down to public function up() {} instructseans, schema describes how to create a table in the database;
  below is the code, schema describes the structure, create the table with the name of 'users', the Blueprint creates the table with a unique id that auto increments, with all the variables with the '$table'
public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('username')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }
we added a new 'username' to the table, that must be unique, 2 users can not have the same username, this is a unqiue constraint at the database level
the final step in the RegisterController.php file is to actually create the user AFTER validating you can create a new user
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'username' => $data['username'],
            'password' => Hash::make($data['password']),
        ]);
    }
}
created another test user test2@test.com - registration worked, 
php artisan tinker #command that allows you to interact with your application, opens up a secondary command prompt where you can run commands to interact with your application
User::all(); #allows you to view all users on the database, must initialize tinker through command first to access, doesn't work for some reason, supposed to show all users in DB
exit #exits out of tinker
after making changes to a database, you MUST remake/remigrate the database again
php artisan migrate:fresh #erases everything on the old database and starts a fresh database with new settings, drops all tables and migrates database again
root -> app -> Models -> User.php #a model class that models a row in your database
after checking the model we can see that only three attributes are mass assignable are name, email, and password, and nothing else will be able to be filled, 'username' is missing
  this is an extra layer of protection that laravel is giving us to stop malicious actors from adding things into our database that are not supposed to be there (SQL Injectseans)
protected $fillable = [
        'name',
        'email',
        'username',
        'password',
    ];
success! new user created and after running 'php artisan tinker' and then 'User::all()' we have successfully created a new user, with username and stored it to database.
We now want to use this username in the top right corner of our navigation log in screen which we can find in the app.blade.php
resources -> resources -> views -> layouts -> app.blade.php #we are changing it to not user the name, and instead use the username
  {{ Auth::user()->name }} #find this part of the file, and change name to username, it will fetch the Auth(enticated) Users -> username from our database and post it in the top right of the navigation

(58:35) Creating the Profiles Controller==========================================================================================================================================================================
roots -> routes -> web.php #where all of your routes are registered 
Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home'); #/home is calling the home controller, we are calling the 'index' method inside the HomeController.php
  which returns a view called 'home' - which represents home.blade.php, 
$this->middleware('auth'); #got created with make auth command, requires you to be authenticated, it should be viewable even if the user is not signed in, we will need to make our own controller
php artisan make:controller [options] [--] <name> #syntax that allows you to make a controller, <name> is required
php artisan help make:controller #replace make:controller with any command and php will get you information for any command that php artisan can use 
php artisan make:controller ProfilesController #used to make a new controller for profiles
  after creating the new controller, we added it to the web.php, replacing the HomeController

(1:04:00) RESTful Resource Controller==============================================================================================================================================================================
RESTful Resource Controllers = A predetermined number of verbs you can use(7) each of these actions will be matched to a URL/Verb/Action, imperative you follow the below documentasean conventions
  facilitates development tremendously, makes controllers lighter, and makes your application way easier to update and make your codebase way cleaner
Official Docs for RESTful Resources Controllers: 
https://laravel.com/docs/5.1/controllers#restful-resource-controllers
We are showing a single profile, not an index(which shows all resources available)
he starts off by explaining by using the unique user id, instagram uses username in the URL
Route::get('/profile/{user}', [App\Http\Controllers\ProfilesController::class, 'index'])->name('profile.show'); #changed the get('/profile/{}') the curly brackets indicate it is going to have some sort of variable
  also changed the name('profile.show') which is used in the naming convention in the documentasean above
public function index($user) #added a parameter
dd($user); #dump and die function, used for development and debugging, will echo out whatever '$user' is and stop all operation, returning what you are passing in
root -> app -> Models -> User.php #shows a model of a single row in the database, represents a single user in the database, 
use App\Models\User; #added to top of ProfilesController.php so we can use 'User::find($user);' without referencing /App/User::find($user);
dd(User::find($user)); #we can use a dd function to get data from the table for debugging/figuring out what we can pull 
==================================================================================+ERROR============================================================================================================================
Keep getting a 404 now, Going to rewatch the last 10 minutes of tutorial and then doublecheck code, and then check documentation, old tutorial = old syntax
1:02:00 timestamp for figuring out what is broken, somewhere in ProfilesController.php / web.php / 
Auth::routes(); #keeps throwing an error, but is neccesary, don't think I touched this after I uncommented
Been working on this for a while, taking a break
FIX:
You are using Laravel 8. In a fresh install of Laravel 8, there is no namespace prefix being applied to your route groups that your routes are loaded into.
https://stackoverflow.com/questions/63807930/error-target-class-controller-does-not-exist-when-using-laravel-8
New Laravel = New Syntax, can not verbatim follow tutorial, positives, we are learning how to troubleshoot..
Code Successfully completed the dd(User::find($user)); function: Progress!
App\Models\User {#665 ▼ // app/Http/Controllers/ProfilesController.php:13
  #connection: "sqlite"
  #table: "users"
  #primaryKey: "id"
  #keyType: "int"
  +incrementing: true
  #with: []
  #withCount: []
  +preventsLazyLoading: false
  #perPage: 15
  +exists: true
  +wasRecentlyCreated: false
  #escapeWhenCastingToString: false
  #attributes: array:9 [▼
    "id" => 1
    "name" => "TestUser"
    "email" => "Test@test.com"
    "username" => "TestUserName"
======================================================================================================FIXED==========================================================================================================
(1:09:10) Passing Data to the View===================================================================================================================================================================================




























































