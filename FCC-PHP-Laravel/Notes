Building an instagram clone :
Features = Follow/Unfollow/Edit Profile/Profile Image/Resize Images/Add New Post/Captions/Add Images/Logout/Users/Authentication/Register Users/Usernames
Laravel - PHP = The fastest growing PHP framework to date, #1 framework in github, easy for newcomers, powerful

PHP-Laravel Installer:
https://laravel.com/docs/5.0/installation
  1) Install Composer:
  https://getcomposer.org/
  https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md
  2)Install Laravel:
  composer global require "laravel/installer=~1.1"

Project Requires: PHP >8.2, node.js, npm, laravel - took hours to install on ubuntu, had to add laravel to $PATH in usr/bin/
Project created in var/wwww/html/laravelapp

How to Start a project:
https://laravel.com/docs/10.x/installation
composer global require laravel/installer
laravel new example-app
cd example-app
php artisan serve #Once you have started the Artisan development server, your application will be accessible in your web browser at http://localhost:8000
php artisan serve --host=_your_ip_address --port=8000 #You can explicitly define the host and the port with artisan serve command
php artisan serve --host=0.0.0.0 --port=8000 #place "0.0.0.0" at your host option and it will work without set any firewall or any extra. 
sudo ufw allow 8000 #allow open port for firewall
#use below in root directory of project to update before being able to host:
composer install --ignore-platform-reqs
composer update --ignore-platform-reqs

(5:30) First look at the project=============================================================================================================================================================================
After installing(finally) the first you notice is ALOT of files, don't worry about these, over time this becomes second nature to you and you know exactly where to find everything
composer.json = will hold all of your files assets, unlike the dependancy manager composer, this file is for instructseans

(7:15) Intro to php artisan==================================================================================================================================================================================
artisan = a command line tool that ships with laravel that allows you to do many things with your application, you can interact with your entire laravel application through artisan with tinker
always ensure you are in the correct directory
php artisan #lists all commands you can use in artisan, 'available commands' are unique to artisan, other commands are universal
things like authorization are why you use a framework, to speed up development, instead of rebuilding things you don't need 
php artisan serve #starts up the built in laravel PHP server, when you start in the terminal- you can then view all the requests made to the server, terminal must continue to run in the background

(11:42) Generating login flow with make:auth=================================================================================================================================================================
HTML = root directory -> resources -> views -> welcome.blade.php 
  blade is a rendering template that allows you throw in snippets of php in your views
your views will primarily be composed of HTML markup, there is no reason you should ever be computing or fetching database queries in your view - that's what controllers are for
php artisan make:auth #Laravel ships with an authentication system that allows you to register users, it allows you to log in and keeps track of all your sessions out of the box
  in Laravel 6.0 php artisan make:auth no longer exists, solution run:
  composer require laravel/ui
  php artisan ui:auth
  you can also generate the views only with:
  php artisan ui:auth -views
After using the above commands, you will have set up a login and register feature to your laravel project-quick and easy

(12:04) Setting Up the Front End with Node and NPM============================================================================================================================================================
First we need to fix the views
The Javascript portion of laravel is found in welcome.blade.php / home.blade.php
Laravel is a full development framework - has a frontend and backend - ships with a working implementation of twitter bootstrap, and view.js - although you still do need to run a compilation
to get view.js we need to use node pack manager(npm) in terminal
front end = everything that a user can physically touch, when user clicks something, it goes to the backend, backend will do something and return it to the frontend
If you're familiar with react/jquery or anything like that, you can rip everything out, switch out of view and start over with them or any other JS framework
node -v #check version of node.js
npm -v #check version node package manager
npm install #run in the project root directory to install npm and get all dependancies
npm run dev #npm in front end development must be compiled before you can use
  What above command will do, is take everything that laravel ships with and compiles it down to a file you can actually use, done through webpack, compiles it all down to the smallest size you can
If any errors in 'npm run dev' he reccomends deleting the node module and then installing everything again
app.css and app.js will be compiled from all the frontend assets
resources -> js -> app.js #file you can edit(not compiled)
  public -> js -> app.js #compiled file, lots of hieroglyphs and magic happened NEVER TOUCH DIRECTLY
sass directory -> app.scss #file you can edit for CSS, you can add as many as you want, just ensure you import them
  #above directory changed, it is now resources -> css -> app.css
After all that and error fix, setup is finally complete and we can begin - took a day just to get started.
views -> home.blade.php = What gets loaded when a user logs in to the application, at this point no one can log in, because we have not created any users
to create a user, you need to have a database setup
=====================================================================================ERROR FIX================================================================================================================
https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-22-04
  #got an error when compiling, ran below to fix
  curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  sudo apt-get install -y nodejs
  #had to install another program, nvm node version manager
  sudo apt install curl
  curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
  #check versions of node to install, install through nvm allows you to get a newer version on ubuntu, automatically installs 12.22 for some reason instead of latest
  #ERROR MESSAGE : ERROR: npm v10.2.4 is known not to run on Node.js v12.22.9.  This version of npm supports the following node versions: `^18.17.0 || >=20.5.0`.
nvm list-remote #lists all available versions NVM can install, need above 14 to run 'npm run dev'
nvm install v20.11.1 #installed version
nvm list #This shows the currently active version on the first line
Further TroubleShooting======================================================================================================================================================================================
sudo apt remove nodejs #You can uninstall Node.js using apt or nvm, depending on how it was installed. To remove the version from the system repositories, use apt remove
sudo apt purge nodejs #By default, apt remove retains any local configuration files that were created since install. If you don’t want to save the configuration files for later use, use apt purge
nvm current #To uninstall a version of Node.js that you installed using nvm, first determine whether it is the current active version:
nvm uninstall node_version #how to uninstall with nvm, replace node_version with what you want to remove
nvm deactivate # If the version you would like to remove is the current active version, you’ll first need to deactivate nvm to enable your changes:
FIXED: 'npm run dev' WORKS ===================================================================================================================================================================================
(20:00) Migrations and Setting Up SQLite======================================================================================================================================================================
php artisan #gets a list of commands
php migrate #migrations are files that describe your database, so instead of you going into database making changes and going into production server and making those same changes manually
  you are going write these migration files that are going to describe your database - higher concept - a file that holds all the instructions you need to tell your database to create itself
  throughout this project we are going to modify the database, but through migration - not directly into the database - describes each change in a systematic way, 
  unless you document your changes very well, you will likely forget a step or 2 in your production and everything will get messed up - also other developers will not know how to recreate change(in teams)
  allows everyone to have the same defininition of what the database is supposed to look like
before you run the migration command, you need to set up some sort of database with laravel, we are using SQLite in this project, because it is easy to set up
step 1) create a file, this file will flat file database file(how SQL lite works)
  nvim database/database.sqlite #will create a new database file using nvim, will be left empty, to escape press 'esc' + :wq (w=write, q=quit)
step 2) check out new database file, it's there
step 3) after checking file was created, go to root directory -> .env 
  .env = holds all of the different configurations that are specific to your (env)ironment
step 4) navigate to the database setup section, delete all of the DB_ lines, except DB_CONNECTION, by default it is using mysql, replace with sqlite, save
how to migrate/how to get it to the latest state possible:
Step 5) php artisan migrate
  After fixing Error below, 
  Preparing database.  

  Creating migration table ........................................ 441ms DONE

   INFO  Running migrations.  

  2014_10_12_000000_create_users_table ............................ 188ms DONE
  2014_10_12_100000_create_password_reset_tokens_table ............. 84ms DONE
  2014_10_12_100000_create_password_resets_table .................. 169ms DONE
  2019_08_19_000000_create_failed_jobs_table ...................... 198ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ........... 325ms DONE
Succesfullly Completed users table, and passwords reset table:
Users Table = holds all users in application
passwords table = holds any passwords reset, when a user forgets password, will send an email, and that is stored in this table
All of this ships with laravel, you don't need to create any of it.
===========================================================================ERROR==============================================================================================================================
Illuminate\Database\QueryException 
  could not find driver (Connection: sqlite, SQL: PRAGMA foreign_keys = ON;)
sudo apt-get install php-sqlite3 #downloads SQLITE
php --ini #gets location of php init path, You also need to enable pdo_sqlite extension in your php.ini too, check the path of your loaded .ini with the below command
sudo nvim /etc/php/8.3/cli/php.ini #opens up the file, to add php sqlite3 to php, don't forget sudo so you can edit.
php -m | grep pdo_sqlite #checks if added
ENABLE THE FOLLOWING IN php.ini:
;extension=pdo_sqlite by removing the /;/ should look like this extension=pdo_sqlite
;extension=sqlite3 should be extension=sqlite3 without the ; symbol
extension=pdo_sqlite
extension=sqlite3
=========================================================================================ERROR #2=============================================================================================================
PHP Warning:  PHP Startup: Unable to load dynamic library 'pdo_sqlite' (tried: /usr/lib/php/20230831/pdo_sqlite (/usr/lib/php/20230831/pdo_sqlite: 
cannot open shared object file: No such file or directory), /usr/lib/php/20230831/pdo_sqlite.so (/usr/lib/php/20230831/pdo_sqlite.so: undefined symbol: php_pdo_unregister_driver)) in Unknown on line 0
PHP Warning:  Module "sqlite3" is already loaded in Unknown on line 0
PHP 8.3.3-1+ubuntu22.04.1+deb.sury.org+1 (cli) (built: Feb 15 2024 18:38:52) (NTS)

php.ini location: /etc/php/php.ini
=======================================================================================Attempt 1:=============================================================================================================
Keep getting error, trying to move project to public folder:
Going to try to move project repository to the public location /var/www/html/:
sudo chmod -R 777 /var/www/html/ #grants all permissions to paste project
Permissions granted, after move, same result:
This is the default welcome page used to test the correct operation of the Apache2 server after installation on Ubuntu systems. It is based on the equivalent page on Debian, from which the Ubuntu Apache packaging is derived.
If you can read this page, it means that the Apache HTTP server installed at this site is working properly. You should replace this file (located at /var/www/html/index.html) before continuing to operate your HTTP server.

From new root directory 'npm run dev' still doesn't work, and 'php artisan serve' keeps throwing an SQLITE error, can attempt to fix either/or..
-It can only run index.html? that seems extremely limiting..
======================================================================================Attempt 2:===============================================================================================================
Potential Fix, been at this for a few hours, taking a break:
https://stackoverflow.com/questions/44701256/unable-to-load-pdo-sqlite-so-extension
sudo apt install php8.3-sqlite3 #tried reinstalling the php version instead of generic 'sudo apt get install sqlite3'
====================================================================================FIXED======================================================================================================================
Step 6) Create a new user -> Register Button













