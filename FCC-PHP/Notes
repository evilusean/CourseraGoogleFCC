MacOS Install:
Open Terminal (launchpad -> type in terminal):
Install Brew:
https://brew.sh/
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install curl
brew install php
To Troubleshoot brew:
brew doctor

Linux Install:
https://www.php.net/manual/en/install.unix.php
sudo apt install php

Windows Install:
Download Zip from PHP web, unzip
You need to edit PATH variables, and add it to windows path, tell windows where the location of PHP is
cmd #open command
echo %PATH% #will print out all path variables on windows
php -v #checks version of PHP

PHP is a server side language that can interact with the client on the frontend.
PHP integrates well with HTML, you can write your PHP with HTML and they work together perfectly.
Powers Wordpress, used by 78.9% of all websites.

3. (7:32) Choosing a Text Editor======================================================================================================================================================================
Any text editor that can save a .php file will work, will be written with HTML/CSS/JS - anything that can do that(almost all of them) will work
He recomends Atom(created by github): Atom.io

4. (11:06) Hello World & Setup======================================================================================================================================================================
The first thing you have to do when working with PHP is start a php server - since it's a server side language it is required to be run on a webserver
php -S localhost:4000 # starts a php webserver to http://localhost:4000
PHP is very similar to HTML, PHP requires .php file extension
In order to run from VSCode, you must run the file on webserver
You can create a file in '/var/wwww/html' directory on linux and run it from there using 'http://localhost/test.php' in the browser 
Everything in HTML is a tag, you can create special PHP tags <?php echo ("Hello World")?> anything you put inside of these tags is considered PHP

5. (20:29) Writing HTML=============================================================================================================================================================================
echo is used to put text into php tags, it is a command in php that allows us to write information into the html document
You can also type out html code(like in react) <?php echo "<h1>Goodbye World</h1>"; ?> inside the "" you can put in any valid HTML
always put a semicolon at end;
from inside the <?php ?> tag you can write out an entire site
the webserver 'serves' the page whenever it is requested(refreshed) the php code is executed, instructions are executed in order

6. (27:30) Variables================================================================================================================================================================================
If you need to change an object in php multiple times(or will in the future) use a variable
A variable is just a container where you can store pieces of information, give a descriptive name to variables
$name = "Sean" # used to create a variable in php with name of "Sean"
<?php echo "My name is $name" ?> #posts the sentence "My name is Sean" in PHP
You can change the $variable mid program to update everything after that point to the new variable

7. (38:09) Data Types================================================================================================================================================================================
Strings = will always be in "" quotation marks, you can also represent numbers as strings
Integers = Whole Number(no decimal point), can be negative, doesn't need "" quotation marks
Floating point = any number with a decimal point, there is a difference between '30' and '30.0'
Boolean = can only be 'true' or 'false' - binary datatype
Null = no value

8. (44:27) Working With Strings=======================================================================================================================================================================
! Google PHP math functions for more (there are dozens more)
all strings must be enclosed in "" or you can use a variable
functions can be used to find out information about strings and modify strings, snippets of code strtolower() will convert to lowercase, strtoupper() will convert to upper
echo strlen( $string ); #string length
echo ucfirst( $string ); #first letter to upper
echo ucwords( $string ) #first letter of each word to upper
echo $string[0]; #first letter of string
echo $string[-1]; #last letter of string
$string[0] = "t"; #change first letter of string
echo str_replace("String", "ting", $string) #replaces String with ting for $string var
echo substr($string, 8, 3) # substring grabs a portion of the string from [8] with length of 3 characters
echo str_repeat($string, 2) #repeats the string 2 times

9. (54:50) Working With Numbers========================================================================================================================================================================
! Google PHP math functions for more (there are dozens more, log, sine, cosine, tangent)
You don't need "" for typing numbers, PHP can also handle negative numbers, and decimal numbers(floats), can do math operations
Math Operators : + * / - %(modulus operator = gives the remainder)
echo 4 + 5 * 10 = 54 # PHP has an order of operations, will do multiplication of 5* 10 first and then add 4
(4 + 5) * 10 = 90 #PHP will do the math in parenthesis first
$num = 10 #can be stored in a variable
$num++ #will add 1 to the #num variable
$num = $num + 25; #will add 25 to num variable, shorthand version is $num += 25; you can also do -= *= and /=
echo abs(-100); #will return the absolute number: 100 
abs(-100) #will return absolute number : 100
pow(2, 3) #will multiply 2 to the power of 3
sqrt(144) # will get the square root of 144

10. (1:05:14) Getting User Input=========================================================================================================================================================================
First thing you need to do to get user input is set up a form- which is a special html element to pass the info user enters to php
Inside the form you can put text boxes, radio buttons, submit buttons - anything you want
<form action="test.php" method="get"> #action tells the test.php how to handle the form, method tells the form what you are trying to do with it, here it is 'get' information
<input type="text" name="username">#input tag allows the user to input information type="text" is a basic textbox, name needs to be unique and describe what it does
<input type="submit"> #submits the information and all data in form to php
<?php echo $_GET["username"]; ?> #will print out the value that got submitted into the text box

11. (1:15:37) Building a Basic Calculator================================================================================================================================================================
Build a calculator that gets 2 numbers from the user and submits results back to PHP and submits the result on the site
<input type="number" name="num1"> #Theres a special type for numbers that only allows input of numbers
<?php echo $_GET["num1"] + $_GET["num2"]; ?> #PHP will add the numbers together like a normal calculation and return the answer using echo
http://localhost/test.php?num1=10&num2=21 #I added 10 and 21, PHP stored the data in the HTML link with & seperating num1 and num2, you can change the information at the top instead of retyping inputs
The information you submitted gets stored in the URL

12. (1:22:13) Building a Mad Libs Game===================================================================================================================================================================
<form action="test.php" method="get"> #used to send results back to 
Color : <input type="text" name="color"> #used to ask for color
<?php $color = $_GET["color"]; #used to create a variable named $color from the input text
echo "Roses are $color No Cap FR FR<br>"; ?> #used to post the color, no cap FR FR

13. (1:28:59) URL Parameters=============================================================================================================================================================================
URL parameters are values you can tack onto the end of a URL that can pass a value into PHP
for URL parameters always ensure the method="get" <form action="test.php" method="get"> Name: <input type="text" name="userName"><br><input type="submit"> 
<?php echo $_GET["userName"] ?> # will get the username from the text input field submitted form and post it to the URL below after the ?
http://localhost/test.php?userName=Sean
if you pass in another value, below will be age it will use an ampersand &
http://localhost/test.php?userName=Sean&age=30
the user can actually bookmark the URL and store all of the information
google search engine uses a more complex form of this when you search for something
the downside, is it is not secure

14. (1:35:52) POST vs GET===============================================================================================================================================================================
method="post" #similar to method="get" but more secure, 
method="get" # puts stores the information in the URL, less secure, DO NOT USE FOR PASSWORDS or confidential information
<form action="test.php" method="post">  Enter a Password : <input type="password" name="password"> #special input method for passwords, hide characters 
echo $_POST["password"] #gets a password from POST method, more secure, won't show up in URL
Most of the time developers prefer to use POST over GET when getting information from a form

15. (1:41:44) Arrays====================================================================================================================================================================================
An array is a container/structure where you can store multiple pieces of informations, like a variable but for more than one piece of data
$arrayName = array("element1", "element2", "element3", "element4"); #Same way to create as a variable, use a descriptive name, commas to sepereate elements, can use strings, numbers, booleans
echo $arrayName[0] #use index to access the first element in an array, index starts at [0]
$arrayName[2] = "newElement"; # arrays are mutable, can be changed by using index number
$arrayName[10] = "newBigElement" #you can add elements to the array that are larger than the array size
echo count($arrayName); #will print out the count of the array elements

16. (1:50:26) Using Checkboxes==========================================================================================================================================================================
Apples: <input type="checkbox" name="fruits[]" value="apples"><br> #if you want all values to be stored in the same array, you need to give them all the same name name="fruits[]"
$fruits = $_POST["fruits"]; #you can store all the variables in an array in a variable, this snippet takes all the checked/selected fruits and stores them in the $fruits variable
echo $fruits[0]; #checks first fruit, you can check each individual element in array with an index

17. (1:57:22) Associative Arrays========================================================================================================================================================================
Associate Array = a special array where you can store key value pairs, instead of just data, which allows you to access data differently
$grades = array("Jim"=>"A+", "Bill"=>"B-", "Sue"=>"C+"); #create the key "name" and store value with => seperate each student with ,
$grades["Jim"] = "F";  #allows you to change grades with "Jim" key
In an associative array, all the keys must be unique, values can be the same

18. (2:04:55) Functions==================================================================================================================================================================================
DRY(Don't repeat yourself) if you have code that is going to be performing a common task multiple times, use a function
You can take this repetitive code and put it in it's own special container called a function, allows you to organize all code on website and be reuseable
function funcName(){} #syntax : function declares it is a function, funcName is the name of function, brackets = , curly brackets are where the function is written 
funcName() #to call a function, type it's name
anytime you put code in a function, that code is only going to execute when you call the function
you can give a function parameters(information that gets passed in) in order to do different things
Example Function : 
  <?php 
    function sayHi ($userName){
      echo "Hello $userName";
    }
    sayHi("Sean");
  ?>
Example Function, with multiple parameters :
  <?php 
    function sayHi ($userName, $age){
      echo "Hello $userName, you are $age. <br>";
    }
    sayHi("Sean", 40);
    sayHi("Shawn", 65);
    sayHi("Shun", 32);
    sayHi("Shaun", 99);
  ?>

19. (2:12:10) Return Statements=============================================================================================================================================================================
A function can also give information back, this is known as a return statement
you want to return the result of the function to whomever called the function
  <?php 
    function cube ($num){
      return $num * $num * $num;
    }
    $cubeResult = cube(4)
  ?> #will cube 4 and store the rturn statement into the variable $cubeResult
whenver you place a return keyword everything after the function does not get executed
You can use this to break out of a function if you want, such as to avoid an infinite loop

20. (2:19:10) If Statements=================================================================================================================================================================================
If statements are a special programming structure that allow our programs to make decisions
if condition = true, perform an action / if condition = false, move on 
if (cond) {action} #general syntax for PHP if statements, if condition is true perform action
else {otherAction} #if condition is NOT true, perform else statement otherAction 
  <?php 
    $isMale = true; #storing a boolean value in a variable
    if ($isMale){
      echo "it is man";
    } else {
      echo "IT IS MA'AM";
    }
  ?>
if ($isMale && $isTall){echo "you are a tall male";} # && and operator, can add multiple checks for a single if statement, if both(or more) are true, perform action
|| # or operator, only one condition needs to be true
elseif #used to check a secondary condition if the first one is false
elseif($isMale && !$isTall){echo "you are a short male"} # '!' negation operator, checks if the condition is NOT true

21. (2:37:16) If Statements (con't)=========================================================================================================================================================================
Comparatives = you can compare different pieces of information and depending on the result do different things
> , > , = , != , <= , >=

22. (2:47:13) Building a Better Calculator==================================================================================================================================================================
Create a calculator that takes 2 number inputs and the operation they want to perform(+ - * /)
by default the <input type="number"> HTML will only do integers, whole numbers, you can fix this by adding a step feature <input type="number" step="0.1" name="num1"> which will do numbers to 1/10's place
<input type="number" step="0.001" name="num1"> will do up to 3 decimal points
use the else statement to catch invalid operators 
code is pretty self explanatory:
https://github.com/evilusean/CourseraGoogleFCC/blob/main/FCC-PHP/2.6BetterCalculator.php

23. (2:56:53) Switch Statements=============================================================================================================================================================================
Switch Statements = A special type of if statement that is used to compare one value to a bunch of other values
very similar to an if statement but uses 'case' and 'break' keywords
switch($variable){case "1": action1; break case "2": action2; break; case...default: defaultAction} 
#above switch statement takes a variable, and goes through each case and performs an action if it matches, it will then break out after the action is performed,
#at the end is the default: defaultAction, this will perform if no other case(and subsequent break) is performed, similar to the else code block in an if statement
Everything you can do in a switch statement can be done in an if statement, switch statements are just easier to write and use

24. (3:05:09) While Loops===================================================================================================================================================================================
While loops are a programming structure that allows you to loop over a specific block of code until a certain condition is true, repeats until true
<?php $index = 1; while ($index <= 5) {echo "$index <br>"; $index++; } ?> #$index = 1; variable sets the counter, ($index <= 5) is the loop condition, {} is the action performed, $index++ increments the index variable
every single iteration of the loop it will check if the condition is true, and repeat until it is, then break out of the loop
avoid infinite loops, where the condition can never be fulfilled, forgetting '$index++;' would cause an infinite loop

Do While Loop = exactly the same as a while loop but the condition to be met is at the bottom of the script after the {action}
<?php $index = 1; do {echo "$index <br>"; $index++; } while ($index <= 5); ?>
so instead of checking the condition first, and then executing, you execute first and then check.

25. (3:15:18) For Loops=====================================================================================================================================================================================
For Loops = special type of loop that is used in conjunction with an indexing variable, allows you to keep track of a specific variable while you go through your loop
serves a more specific purpose, It can continue to loop while a certain condition is true, as you go through the loop, it can keep track of an iterating variable
specifically designed for using an indexing variable like '$index'
for(variable initialization; looping condition; iteration execution){action} #general syntax for for loops
for ($index = 1; $index <= 5; $index++){echo "$index <br>";} #declares index=1, while $index <= 5, print $index, $index++
the while loop takes 4 lines of code, the for loop takes up 2 lines to do the same thing
<?php $luckyNumbers = array(4, 8, 14, 16, 23, 42); for ($i = 0; $i < count($luckyNumbers); $i++){echo "$luckyNumbers[$i] <br>"; }?>#will print out each number in the array




























