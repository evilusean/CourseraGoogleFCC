# Install PostgreSQL and Setup Commands :
https://dev.to/codingashish_dev/step-by-step-guide-to-installing-postgresql-on-arch-linux-3ked
'sudo pacman -S postgresql' #Installs postgreSQL on Arch Linux
'sudo -iu postgres
initdb --locale $LANG -E UTF8 -D '/var/lib/postgres/data'' 
    #initialize the DB cluster : --locale $LANG: Sets the language settings for the database.
    -E UTF8: Makes sure the database uses UTF-8 encoding.
    -D '/var/lib/postgres/data': Chooses where the data will be stored.
'sudo systemctl start postgresql' #starts postgreSQL 
'sudo systemctl enable postgresql' #enables on startup
'sudo -iu postgres' #manage databases and users, switch to the PostgreSQL user
'createuser --interactive'  #command to create a user
'createdb <your-database-name>' #create a DB
'psql' #To start working with your databases, access the PostgreSQL command-line interface (CLI) with
'psql <mydatabase>' #connect to a specific database
'\q' #exit postgreSQL shell

SELECT STATEMENT ===================================================================================================================================================================
'SELECT <column_name> FROM <table_name>' #basic SELECT statement syntax
'SELECT <column1>, <column2> FROM <table_name> #syntax for selecting multiple columns
'SELECT * FROM <table_name>' #syntax for retrieving all columns in a table
'SELECT DISTINCT <column> FROM <table_name>;' #syntax for basic SELECT DISTINCT STATEMENT
'SELECT DISTINCT (<column>) FROM <table_name>;' #You can use (parenthesis) to clarify which column DISTINCT is being applied to

COUNT ==============================================================================================================================================================================
'SELECT COUNT(DISTINCT depertment) FROM employees' #finds the number of distinct/unique departments in the employees table
'SELECT COUNT(column_name) FROM <table_name>;' #basic syntax, will count the number of non-NULL values, ignores NULL values in the row that you put in the (parenthesis)
'SELECT COUNT(*) FROM <table_name>;' #basic syntax for counting ALL rows in table_name, use '*' asterisk when you want to count all rows, even with NULL values 

WHERE ===============================================================================================================================================================================
A 'condition' is a logical expression that evalutes to true or false, here are some logical operators that can be used in where statements :
  '=' = equals
  '!=' or '<>' = not equals
  '<' '>' = less than/greater than
  '<=' '>=' = less than equals, greater than equals
  'BETWEEN' = between a range of values
  'LIKE' = pattern matching using wildcards (often used with '%'(represents 0, 1 or multiple characters) and '_'(represents a single character))
  'IN' = matches a value in a list
  'IS NULL' = Checks for NULL values
  'AND' 'OR' 'NOT' = Logical operators for combining multiple conditions
'SELECT <column 1>, <column 2> FROM <table_name> WHERE <condition>;' # basic syntax for a WHERE statement/query
'SELECT * FROM employees WHERE first_name LIKE 'J%';' #will grab all the employees whose name starts with 'J'
'SELECT * FROM employees WHERE age BETWEEN 25 AND 40;' # gets a range of all employees from 25-40
'SELECT * FROM employees WHERE department IN ('HR', 'Finance', 'Admin', 'IT'); # selects all employees from the departments listed here 
'SELECT * FROM employees WHERE phone_number IS NULL;' #gets all employees who don't have a phone number
'SELECT * FROM employees WHERE department = 'HR' AND age >= 30;' # using the 'AND' clause to combine multiple operators to filter results
'SELECT * FROM film WHERE rental_rate > 4 AND replacement_cost >= 19.99 AND rating = 'R';' #chaining together 'AND' operators
'SELECT COUNT(*) FROM film WHERE rental_rate > 4 AND replacement_cost >= 19.99 AND rating = 'R';' #notice the 'COUNT(*)', this will return a number that match a set of conditions
'SELECT * FROM film WHERE rating = 'R' OR rating = 'PG-13';' #OR example
'SELECT title, replacement_cost FROM film WHERE release_year >= 2000 AND rating = 'PG-13';' # example with selecting only 2 columns

ORDER BY ================================================================================================================================================================================
'SELECT <column1>, <column2> FROM <table_name> WHERE <conditions> ORDER BY <column1> [ASC | DESC], <column> [ASC | DESC]' #basic syntax of an ORDER BY query
SELECT  * from customer ORDER BY first_name; #sorts ascending (starting from 'A' to 'Z')
SELECT  * from customer ORDER BY first_name ASC; #defaults to ascending, explicitly declare it here
SELECT  * from customer ORDER BY first_name DESC; #descending
SELECT  * from customer ORDER BY store_id, first_name; # will sort by store_id first, and then by first name ascending

BETWEEN =======================================================================================================================================================================================
'SELECT <column_names> FROM <table_name> WHERE <column_name> BETWEEN <value1> AND <value2>;' # Basic syntax for a 'BETWEEN' command
'SELECT  * from payment WHERE amount BETWEEN 8 AND 9 LIMIT 10;' # finds all payments with an amount between and including 8-9
'SELECT  * from payment WHERE amount NOT BETWEEN 8 AND 9 LIMIT 10;' # 'NOT' keyword, selects everything BUT the payments between 8-9
'SELECT  COUNT(*) from payment WHERE amount NOT BETWEEN 8 AND 9;' # shows a count of all values 
'SELECT * from payment WHERE payment_date BETWEEN '2007-02-01' AND '2007-02-15';' # using YMD to get 2 weeks of data

IN ============================================================================================================================================================================================
'SELECT <column_name(s)> FROM <table_name> WHERE <column_name> IN (value1, value2, ...);' # Basic syntax for an IN query
'SELECT * FROM payment WHERE amount IN ('0.99', '1.99', '1.98');' #retrieves all the payments for these amounts
'SELECT * FROM payment WHERE amount NOT IN ('0.99', '1.99', '1.98');' #combine keywords 'NOT' and 'IN' to retrieve all the payments NOT IN these amounts
'SELECT * FROM customer WHERE first_name IN ('John', 'Jake','Julia');' # searches for these names

1:54:20 - LIKE and ILIKE ======================================================================================================================================================================
-WildCard Characters :
  '%' = represents ANY sequence of characters(including zero characters
  '_' = Represents a single characeter
  '[]' = represeents a character class, allowing you to match any single character with the specified set
'Select <column_name(s)> FROM <table_name> WHERE <column_name> LIKE <pattern>;' #Basic syntax for a LIKE query (case sensitive)
'Select <column_name(s)> FROM <table_name> WHERE <column_name> ILIKE <pattern>;' #Basic syntax for an ILIKE query (case insensitive)
'SELECT customer_name, contact_email FROM customers WHERE customer_name like 'J%';' #gets all the emails and names that start with customer name of 'J...'
'SELECT product_name, category FROM products WHERE product_name like '%blue%';' # blues clues, gets all the products with 'blue' in the name
'SELECT first_name, last_name FROM employees WHERE last_name ILIKE '%son';' # case insensitive 

AGGREGATE - MIN - MAX - SUM - AVG - COUNT + ROUND ===============================================================================================================================================
Aggregate Functions :
  'SUM' = Calculates the sum of a numeric column with a group
  'AVG' = computes the average of a numeric column within a group
  'COUNT' = counts the number of rows within a group
  'MIN' = returns the minimum value from a column within a group
  'MAX' = returns the maximum value from a column within a group
'SELECT MIN(replacement_cost) FROM film;' # min
'SELECT MAX(replacement_cost) FROM film;' # max
'SELECT MAX(replacement_cost), MIN(replacement_cost) FROM film;' #max and min one line combined
'SELECT AVG(replacement_cost) FROM film;' #average
'SELECT ROUND(AVG(replacement_cost), 3) FROM film;' # Rounded average, 'ROUND' keyword with (parenthesis) and the number of digits to round to
'SELECT SUM(replacement_cost) FROM film;' # Sum

GROUP BY ==============================================================================================================================================================================
'SELECT customer_id, SUM(amount) FROM payment GROUP BY customer_id;' # retrieves the total sum each customer has spent at the stores, and groups it to each customer_id
'SELECT customer_id, SUM(amount) FROM payment GROUP BY customer_id ORDER BY SUM(amount);' # orders sum grouped by customer_id with sum sorted ascending (least amount spent first) 
'SELECT staff_id, customer_id, SUM(amount) FROM payment GROUP BY customer_id, staff_id ORDER BY SUM(amount);' # total amount spent with customer_id and staff_id
'SELECT DATE(payment_date), SUM(amount) FROM payment GROUP BY DATE(payment_date) ORDER BY SUM(amount);' # using the 'DATE' keyword get's the y-m-d without hours, ordered by sum of each day
'SELECT customer_id, COUNT(amount) FROM payment GROUP BY customer_id ORDER BY COUNT(amount);' #shows total amount of transacations for each customer ID












