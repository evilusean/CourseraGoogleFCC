Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name responsive design.
With responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.
You can add Bootstrap to any app by adding the following code to the top of your HTML:
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" 
integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"/>

Make Images Mobile Responsive
First, add a new image below the existing one. Set its src attribute to https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg.
It would be great if this image could be exactly the width of our phone's screen.
Fortunately, with Bootstrap, all we need to do is add the img-responsive class to your image.

Create a Bootstrap Button
Bootstrap has its own styles for button elements, which look much better than the plain HTML ones.
Create a new button element below your large kitten photo. Give it the btn and btn-default classes, as well as the text of Like.
<button class="btn btn-default">Like</button> 
Normally, your button elements with the btn and btn-default classes are only as wide as the text that they contain.
By making them block elements with the additional class of btn-block, your button will stretch to fill your page's entire horizontal space and any 
elements following it will flow onto a "new line" below the block.
<button class="btn btn-default btn-block">Submit</button>
The btn-primary class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.

Call out Optional Actions with btn-info
Bootstrap comes with several pre-defined colors for buttons. The btn-info class is used to call attention to optional actions that the user can take.

Warn Your Users of a Dangerous Action with btn-danger
Bootstrap comes with several pre-defined colors for buttons. The btn-danger class is the button color you'll use to notify users that the button performs a
destructive action, such as deleting a cat photo.
Create a button with the text Delete and give it the class btn-danger.

Use the Bootstrap Grid to Put Elements Side By Side
Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element's relative width.
Most of Bootstrap's classes can be applied to a div element.
Bootstrap has different column width attributes that it uses depending on how wide the user's screen is. For example, phones have narrow screens,
and laptops have wider screens.
Take for example Bootstrap's col-md-* class. Here, md means medium, and * is a number specifying how many columns wide the element should be. 
In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.
In the Cat Photo App that we're building, we'll use col-xs-*, where xs means extra small (like an extra-small mobile phone screen),
and * is the number of columns specifying how many columns wide the element should be.

Use a span to Target Inline Elements
You can use spans to create inline elements. Remember when we used the btn-block class to make the button fill the entire row?
That illustrates the difference between an "inline" element and a "block" element.
By using the inline span element, you can put several elements on the same line, and even style different parts of the same line differently.
Using a span element, nest the word love inside the p element that currently has the text Things cats love. 
Then give the span the class text-danger to make the text red.
Here's how you would do this for the p element that has the text Top 3 things cats hate:
<p>Top 3 things cats <span class="text-danger">hate:</span></p>

Add Font Awesome Icons to our Buttons
Font Awesome is a convenient library of icons. These icons can be webfonts or vector graphics. 
\These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.
You can include Font Awesome in any app by adding the following code to the top of your HTML:
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" 
integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
In this case, we've already added it for you to this page behind the scenes.
The i element was originally used to make other elements italic, but is now commonly used for icons. 
You can add the Font Awesome classes to the i element to turn it into an icon, for example:
<i class="fas fa-info-circle"></i>
Note that the span element is also acceptable for use with icons.

Create Bootstrap Wells
Bootstrap has a class called well that can create a visual sense of depth for your columns.
Nest one div element with the class well within each of your col-xs-6 div elements.

Create a Class to Target with jQuery Selectors
Not every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.
Give Each Element a Unique id
We will also want to be able to use jQuery to target each button by its unique id.
Give each of your buttons a unique id, starting with target1 and ending with target6.

Add id Attributes to Bootstrap Elements
Recall that in addition to class attributes, you can give each of your elements an id attribute.
Each id must be unique to a specific element and used only once per page.
<div class="well" id="center-well">

1.2 jQuery===========================================================================================================================================
Learn How Script Tags and Document Ready Work
Now we're ready to learn jQuery, the most popular JavaScript tool of all time.
Before we can start using jQuery, we need to add some things to our HTML.
First, add a script element at the top of your page. Be sure to close it on the following line.
Your browser will run any JavaScript inside a script element, including jQuery.
Inside your script element, add this code: $(document).ready(function() { to your script. 
Then close it on the following line (still inside your script element) with: });
<script>  $(document).ready(function() {  }); </script>

Target HTML Elements with Selectors Using jQuery
Now we have a document ready function.
Now let's write our first jQuery statement. All jQuery functions start with a $, usually referred to as a dollar sign operator, or as bling.
jQuery often selects an HTML element with a selector, then does something to that element.
For example, let's make all of your button elements bounce. Just add this code inside your document ready function:
$("button").addClass("animated bounce");
Note that we've already included both the jQuery library and the Animate.css library in the background so that you can use them in the editor.
<script>   $(document).ready(function() { $("button").addClass("animated bounce");  }); </script>

Target Elements by Class Using jQuery
You see how we made all of your button elements bounce? We selected them with $("button"), then we added some CSS classes to them with .addClass("animated bounce");.
You just used jQuery's .addClass() function, which allows you to add classes to elements.
First, let's target your div elements with the class well by using the $(".well") selector.
Note that, just like with CSS declarations, you type a . before the class's name.
Then use jQuery's .addClass() function to add the classes animated and shake.
For example, you could make all the elements with the class text-primary shake by adding the following to your document ready function:
$(".text-primary").addClass("animated shake");

Target Elements by id Using jQuery
You can also target elements by their id attributes.
First target your button element with the id target3 by using the $("#target3") selector.
Note that, just like with CSS declarations, you type a # before the id's name.
Then use jQuery's .addClass() function to add the classes animated and fadeOut.
Here's how you'd make the button element with the id target6 fade out:
$("#target6").addClass("animated fadeOut");

Now you know three ways of targeting elements: by type: $("button"), by class: $(".btn"), and by id $("#target1").

Remove Classes from an Element with jQuery
In the same way you can add classes to an element with jQuery's addClass() function, you can remove them with jQuery's removeClass() function.
Here's how you would do this for a specific button:
$("#target2").removeClass("btn-default");

Change the CSS of an Element Using jQuery
We can also change the CSS of an HTML element directly with jQuery.
jQuery has a function called .css() that allows you to change the CSS of an element.
Here's how we would change its color to blue:
$("#target1").css("color", "blue");
This is slightly different from a normal CSS declaration, because the CSS property and its value are in quotes, and separated with a comma instead of a colon.

Disable an Element Using jQuery
You can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.
When you disable a button, it will become grayed-out and can no longer be clicked.
jQuery has a function called .prop() that allows you to adjust the properties of elements.
Here's how you would disable all buttons:
$("button").prop("disabled", true);

Change Text Inside an Element Using jQuery
Using jQuery, you can change the text between the start and end tags of an element. You can even change HTML markup.
jQuery has a function called .html() that lets you add HTML tags and text within an element. 
Any content previously within the element will be completely replaced with the content you provide using this function.
Here's how you would rewrite and emphasize the text of our heading:
$("h3").html("<em>jQuery Playground</em>");
jQuery also has a similar function called .text() that only alters text without adding tags. 
In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with.

Remove an Element Using jQuery
Now let's remove an HTML element from your page using jQuery.
jQuery has a function called .remove() that will remove an HTML element entirely.

Use appendTo to Move Elements with jQuery
Now let's try moving elements from one div to another.
jQuery has a function called appendTo() that allows you to select HTML elements and append them to another element.
For example, if we wanted to move target4 from our right well to our left well, we would use:
$("#target4").appendTo("#left-well");

Clone an Element Using jQuery
In addition to moving elements, you can also copy them from one place to another.
jQuery has a function called clone() that makes a copy of an element.
For example, if we wanted to copy target2 from our left-well to our right-well, we would use:
$("#target2").clone().appendTo("#right-well");

Target the Parent of an Element Using jQuery
Every HTML element has a parent element from which it inherits properties.
For example, the h3 element in your jQuery Playground has the parent element of <div class="container-fluid">, which itself has the parent element of body.
jQuery has a function called parent() that allows you to access the parent of whichever element you've selected.
Here's an example of how you would use the parent() function if you wanted to give the parent element of the left-well element a background color of blue:
$("#left-well").parent().css("background-color", "blue")

Target the Children of an Element Using jQuery
When HTML elements are placed one level below another they are called children of that element.
For example, the button elements in this challenge with the text #target1, #target2, and #target3 are all children of the <div class="well" id="left-well"> element.
jQuery has a function called children() that allows you to access the children of whichever element you've selected.
Here's an example of how you would use the children() function to give the children of your left-well element the color blue:
$("#left-well").children().css("color", "blue")

Target a Specific Child of an Element Using jQuery
You've seen why id attributes are so convenient for targeting with jQuery selectors. But you won't always have such neat ids to work with.
Fortunately, jQuery has some other tricks for targeting the right elements.
jQuery uses CSS Selectors to target elements. The target:nth-child(n) CSS selector allows you to select all the nth elements with the target class or element type.
Here's how you would give the third element in each well the bounce class:
$(".target:nth-child(3)").addClass("animated bounce");

Target Even Elements Using jQuery
You can also target elements based on their positions using :odd or :even selectors.
Note that jQuery is zero-indexed which means the first element in a selection has a position of 0.
This can be a little confusing as, counter-intuitively, :odd selects the second element (position 1), fourth element (position 3), and so on.
Here's how you would target all the odd elements with class target and give them classes:
$(".target:odd").addClass("animated shake");

Use jQuery to Modify the Entire Page
jQuery can target the body element as well.
Here's how we would make the entire body fade out: $("body").addClass("animated fadeOut");
animated hinge

1.3 SASS-SyntacticallyAwesomeStyleSheets ==========================================================================================================================
Store Data with Sass Variables
One feature of Sass that's different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.
In JavaScript, variables are defined using the let and const keywords. In Sass, variables start with a $ followed by the variable name.
Here are a couple examples:
$main-fonts: Arial, sans-serif;
$headings-color: green;
And to use the variables:
h1 {
  font-family: $main-fonts;
  color: $headings-color;
}
One example where variables are useful is when a number of elements need to be the same color. 
If that color is changed,the only place to edit the code is the variable value.

Nest CSS with Sass
Sass allows nesting of CSS rules, which is a useful way of organizing a style sheet.
Normally, each element is targeted on a different line to style it, like so:
article {
  height: 200px;
}

article p {
  color: white;
}

article ul {
  color: blue;
}
For a large project, the CSS file will have many lines and rules. 
This is where nesting can help organize your code by placing child style rules within the respective parent elements:
article {
  height: 200px;

  p {
    color: white;
  }

  ul {
    color: blue;
  }
}

Create Reusable CSS with Mixins
In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.
Newer CSS features take time before they are fully adopted and ready to use in all browsers. 
As features are added to browsers, CSS rules using them may need vendor prefixes. Consider box-shadow:
div {
  -webkit-box-shadow: 0px 0px 4px #fff;
  -moz-box-shadow: 0px 0px 4px #fff;
  -ms-box-shadow: 0px 0px 4px #fff;
  box-shadow: 0px 0px 4px #fff;
}
It's a lot of typing to re-write this rule for all the elements that have a box-shadow, or to change each value to test different effects.
Mixins are like functions for CSS. Here is how to write one:
@mixin box-shadow($x, $y, $blur, $c){ 
  -webkit-box-shadow: $x $y $blur $c;
  -moz-box-shadow: $x $y $blur $c;
  -ms-box-shadow: $x $y $blur $c;
  box-shadow: $x $y $blur $c;
}
The definition starts with @mixin followed by a custom name. The parameters (the $x, $y, $blur, and $c in the example above) are optional. 
Now any time a box-shadow rule is needed, only a single line calling the mixin replaces having to type all the vendor prefixes.
A mixin is called with the @include directive:
div {
  @include box-shadow(0px, 0px, 4px, #fff);
}

Use @if and @else to Add Logic To Your Styles
The @if directive in Sass is useful to test for a specific case - it works just like the if statement in JavaScript.
@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}
And just like in JavaScript, the @else if and @else directives test for more conditions:
@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}

Use @for to Create a Sass Loop
The @for directive adds styles in a loop, very similar to a for loop in JavaScript.
@for is used in two ways: "start through end" or "start to end". 
The main difference is that the "start to end" excludes the end number as part of the count, and "start through end" includes the end number as part of the count.
Here's a start through end example:
@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}
The #{$i} part is the syntax to combine a variable (i) with text to make a string. When the Sass file is converted to CSS, it looks like this:
.col-1 {
  width: 8.33333%;
}
.col-2 {
  width: 16.66667%;
}
...
.col-12 {
  width: 100%;
}
This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.
Write a @for directive that takes a variable $j that goes from 1 to 6.
It should create 5 classes called .text-1 to .text-5 where each has a font-size set to 15px multiplied by the index.
@for $j from 1 through 6 {
  .text-#{$j} { font-size: 15px* $j; }
}

Use @each to Map Over Items in a List
The last challenge showed how the @for directive uses a starting and ending value to loop a certain number of times. 
Sass also offers the @each directive which loops over each item in a list or map. On each iteration, 
the variable gets assigned to the current value from the list or map.
@each $color in blue, red, green {
  .#{$color}-text {color: $color;}
}
A map has slightly different syntax. Here's an example:
$colors: (color1: blue, color2: red, color3: green);
@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}
Note that the $key variable is needed to reference the keys in the map. 

Apply a Style Until a Condition is Met with @while
The @while directive is an option with similar functionality to the JavaScript while loop. It creates CSS rules until a condition is met.
The @for challenge gave an example to create a simple grid system. This can also work with @while.
$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}
First, define a variable $x and set it to 1. Next, use the @while directive to create the grid system while $x is less than 13. 
After setting the CSS rule for width, $x is incremented by 1 to avoid an infinite loop.

Split Your Styles into Smaller Chunks with Partials
Partials in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. 
This is a great way to group similar code into a module to keep it organized.
Names for partials start with the underscore (_) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file.
Also, Sass files end with the .scss file extension. To bring the code in the partial into another Sass file, use the @import directive.
For example, if all your mixins are saved in a partial named "_mixins.scss", and they are needed in the "main.scss" file, this is how to use them in the main file:
@import 'mixins'
Note that the underscore and file extension are not needed in the import statement - Sass understands it is a partial. 
Once a partial is imported into a file, all variables, mixins, and other code are available to use.

Extend One Set of CSS Styles to Another Element
Sass has a feature called extend that makes it easy to borrow the CSS rules from one element and build upon them in another.
For example, the below block of CSS rules style a .panel class. It has a background-color, height and border.
.panel{
  background-color: red;
  height: 70px;
  border: 2px solid green;
}
Now you want another panel called .big-panel. It has the same base properties as .panel, but also needs a width and font-size. 
It's possible to copy and paste the initial CSS rules from .panel, but the code becomes repetitive as you add more types of panels. 
The extend directive is a simple way to reuse the rules written for one element, then add more for another:
.big-panel{
  @extend .panel;
  width: 150px;
  font-size: 2em;
}
The .big-panel will have the same properties as .panel in addition to the new styles.

1.4 React =========================================================================================================================================================
Create a Simple JSX Element
React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.
React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits.
It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part,
JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.
For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. 
To do this, you simply include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }. 
However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. 
The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges.
If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.
It's worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root')). 
This function call is what places your JSX into React's own lightweight representation of the DOM. 
React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.

Create a Complex JSX Element
One important thing to know about nested JSX is that it must return a single element.
This one parent element would wrap all of the other levels of nested elements.
For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.
Here's an example:
Valid JSX:
<div>
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p>
</div>
Invalid JSX:
<p>Paragraph One</p>
<p>Paragraph Two</p>
<p>Paragraph Three</p>

Add Comments in JSX
JSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. 
Like most programming languages, JSX has its own way to do this.
To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.

Render HTML Elements to the DOM
So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. 
With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.
ReactDOM offers a simple method to render React elements to the DOM which looks like this: 
ReactDOM.render(componentToRender, targetNode), where the first argument is the React element or component that you want to render,
and the second argument is the DOM node that you want to render the component to.
As you would expect, ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.
ReactDOM.render(JSX, document.getElementById('challenge-node'))

Define an HTML Class in JSX
Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.
So far, it may seem that HTML and JSX are exactly the same.
One key difference in JSX is that you can no longer use the word class to define HTML classes. 
This is because class is a reserved word in JavaScript. Instead, JSX uses className.
In fact, the naming convention for all HTML attributes and event references in JSX become camelCase.
For example, a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. 

Learn About Self-Closing JSX Tags
So far, you’ve seen how JSX differs from HTML in a key way with the use of className vs. class for defining HTML classes.
Another important way in which JSX differs from HTML is in the idea of the self-closing tag.
In HTML, almost all tags have both an opening and closing tag: <div></div>; the closing tag always has a forward slash before the tag name that you are closing. 
However, there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.
For example the line-break tag can be written as <br> or as <br />, but should never be written as <br></br>, since it doesn't contain any content.
In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. 
The line-break tag, for example, must always be written as <br /> in order to be valid JSX that can be transpiled.
A <div>, on the other hand, can be written as <div /> or <div></div>.

Create a Stateless Functional Component
Components are the core of React. Everything in React is a component and here you will learn how to create one.
There are two ways to create a React component. The first way is to use a JavaScript function.
Defining a component in this way creates a stateless functional component. The concept of state in an application will be covered in later challenges. 
For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. 
To create a component with a function, you simply write a JavaScript function that returns either JSX or null. 
One important thing to note is that React requires your function name to begin with a capital letter. 
Here's an example of a stateless functional component that assigns an HTML class in JSX:
const DemoComponent = function() {
  return (
    <div className='customClass' />
  );
};
After being transpiled, the <div> will have a CSS class of customClass.
Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. 
This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. 
This makes it easier to build and maintain complex user interfaces.

Create a React Component
The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component:
class Kitten extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <h1>Hi</h1>
    );
  }
}
This creates an ES6 class Kitten which extends the React.Component class. So the Kitten class now has access to many useful React features, 
such as local state and lifecycle hooks.
Also notice the Kitten class has a constructor defined within it that calls super(). It uses super() to call the constructor of the parent class, 
in this case React.Component. The constructor is a special method used during the initialization of objects that are created with the class keyword. 
It is best practice to call a component's constructor with super, and pass props to both. This makes sure the component is initialized properly. 

Create a Component with Composition
Now we will look at how we can compose multiple React components together. 
Imagine you are building an app and have created three components: a Navbar, Dashboard, and Footer.
To compose these components together, you could create an App parent component which renders each of these three components as children. 
To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example,
in the render method you could write:
return (
 <App>
  <Navbar />
  <Dashboard />
  <Footer />
 </App>
)
When React encounters a custom HTML tag that references another component (a component name wrapped in < /> like in this example),
it renders the markup for that component in the location of the tag. 
This should illustrate the parent/child relationship between the App componentand the Navbar, Dashboard, and Footer.

Render a Class Component to the DOM
You may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM. 
The process for rendering React components will look very similar. The past few challenges focused on components and composition, 
so the rendering was done for you behind the scenes. However, none of the React code you write will render to the DOM without making a call to the ReactDOM API.
Here's a refresher on the syntax: ReactDOM.render(componentToRender, targetNode). The first argument is the React component that you want to render.
The second argument is the DOM node that you want to render that component within.
React components are passed into ReactDOM.render() a little differently than JSX elements. 
For JSX elements, you pass in the name of the element that you want to render.
However, for React components, you need to use the same syntax as if you were rendering a nested component, for example 
ReactDOM.render(<ComponentToRender />, targetNode)

Pass Props to a Stateless Functional Component
The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React.
With this foundation, it's time to look at another feature very common in React: props. In React, you can pass props, or properties, to child components.
Say you have an App component which renders a child component called Welcome which is a stateless functional component. You can pass Welcome a user property by writing:
<App>
  <Welcome user='Mark' />
</App>
You use custom HTML attributes created by you and supported by React to be passed to the component.
In this case, the created property user is passed to the component Welcome. Since Welcome is a stateless functional component, it has access to this value like so:
const Welcome = (props) => <h1>Hello, {props.user}!</h1>
It is standard to call this value props and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX.

Pass an Array as Props
The last challenge demonstrated how to pass information from a parent component to a child component as props or properties. 
This challenge looks at how arrays can be passed as props. To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.
<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>
The child component then has access to the array property colors. Array methods such as join() can be used when accessing the property.
const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>
This will join all colors array items into a comma separated string and produce: <p>green, blue, red</p>. 

Use Default Props
React also has an option to set default props. You can assign default props to a component as a property on the component itself and 
React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. 
For example, if you declare MyComponent.defaultProps = { location: 'San Francisco' }, you have defined a location prop that's set to the string San Francisco,
unless you specify otherwise. React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null.
Override Default Props
The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.

Use PropTypes to Define the Props You Expect
React provides useful type-checking features to verify that components receive props of the correct type. 
For example, your application makes an API call to retrieve data that you expect to be in an array, 
which is then passed to a component as a prop. You can set propTypes on your component to require the data to be of type array. 
This will throw a useful warning when the data is of any other type.
It's considered a best practice to set propTypes when you know the type of a prop ahead of time. 
You can define a propTypes property for a component in the same way you defined defaultProps.
Doing this will check that props of a given key are present with a given type. Here's an example to require the type function for a prop called handleClick:
MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }
In the example above, the PropTypes.func part checks that handleClick is a function.
Adding isRequired tells React that handleClick is a required property for that component. 
You will see a warning if that prop isn't provided. Also notice that func represents function. 
Among the seven JavaScript primitive types, function and boolean (written as bool) are the only two that use unusual spelling.
In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element.
Please refer to the documentation for all of the options.
Note: As of React v15.5.0, PropTypes is imported independently from React, like this: import PropTypes from 'prop-types';

Access Props Using this.props
The last several challenges covered the basic ways to pass props to child components. 
But what if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component?
The ES6 class component uses a slightly different convention to access props.
Anytime you refer to a class component within itself, you use the this keyword. To access props within a class component, 
you preface the code that you use to access it with this. For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX.

Review Using Props with Stateless Functional Components
Except for the last challenge, you've been passing props to stateless functional components. These components act like pure functions.
They accept props as input and return the same view every time they are passed the same props. 
You may be wondering what state is, and the next challenge will cover it in more detail. Before that, here's a review of the terminology for components.
A stateless functional component is any function you write which accepts props and returns JSX. 
A stateless component, on the other hand, is a class that extends React.Component, but does not use internal state (covered in the next challenge). 
Finally, a stateful component is a class component that does maintain its own internal state. 
You may see stateful components referred to simply as components or React components.
A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. 
This helps contain your state management to a specific area of your application. 
In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.

Create a Stateful Component
One of the most important topics in React is state. State consists of any data your application needs to know about, that can change over time.
You want your apps to respond to state changes and present an updated UI when necessary. 
React offers a nice solution for the state management of modern web applications.
You create state in a React component by declaring a state property on the component class in its constructor.
This initializes the component with state when it is created. The state property must be set to a JavaScript object. Declaring it looks like this:
this.state = {}
You have access to the state object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. 
The state object can be as complex or as simple as you need it to be.
Note that you must create a class component by extending React.Component in order to create state like this.

Render State in the User Interface
Once you define a component's initial state, you can display any part of it in the UI that is rendered. 
If a component is stateful, it will always have access to the data in state in its render() method. You can access the data with this.state.
If you want to access a state value within the return of the render method, you have to enclose the value in curly braces.
state is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data.
If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. 
When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop.
React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.
Note that if you make a component stateful, no other components are aware of its state. Its state is completely encapsulated, or local to that component,
unless you pass state data to a child component as props. This notion of encapsulated state is very important because it allows you to write certain logic, 
then have that logic contained and isolated in one place in your code.

Render State in the User Interface Another Way
There is another way to access state in a component. In the render() method, before the return statement, you can write JavaScript directly.
For example, you could declare functions, access data from state or props, perform computations on this data, and so on. 
Then, you can assign any data to variables, which you have access to in the return statement.

Set State with this.setState
The previous challenges covered component state and how to initialize state in the constructor. 
There is also a way to change the component's state. React provides a method for updating component state called setState. 
You call the setState method within your component class like so: this.setState(), passing in an object with key-value pairs. 
The keys are your state properties and the values are the updated state data. For instance, if we were storing a username in state and wanted to update it,
it would look like this:
this.setState({
  username: 'Lewis'
});
React expects you to never modify state directly, instead always use this.setState() when state changes occur. 
Also, you should note that React may batch multiple state updates in order to improve performance.
What this means is that state updates through the setState method can be asynchronous. 

Bind 'this' to a Class Method
In addition to setting and updating state, you can also define methods for your component class. 
A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method. 
There are a few ways to allow your class methods to access this.
One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component is initialized.
You may have noticed the last challenge used this.handleClick = this.handleClick.bind(this) for its handleClick method in the constructor.
Then, when you call a function like this.setState() within your class method, this refers to the class and will not be undefined.

Use State to Toggle an Element
Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - 
this means React may batch multiple setState() calls into a single update. This means you can't rely on the previous value of this.state or this.props when 
calculating the next value. So, you should not use code like this:
this.setState({
  counter: this.state.counter + this.props.increment
});
Instead, you should pass setState a function that allows you to access state and props. 
Using a function with setState guarantees you are working with the most current values of state and props. This means that the above should be rewritten as:
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
You can also use a form without props if you need only the state:
this.setState(state => ({
  counter: state.counter + 1
}));
Note that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code.
MyComponent has a visibility property which is initialized to false. The render method returns one view if the value of visibility is true,
and a different view if it is false.
Currently, there is no way of updating the visibility property in the component's state. The value should toggle back and forth between true and false. 
There is a click handler on the button which triggers a class method called toggleVisibility(). 

Create a Controlled Input
Your application may have more complex interactions between state and the rendered UI. 
For example, form control elements for text input, such as input and textarea, maintain their own state in the DOM as the user types. 
With React, you can move this mutable state into a React component's state. The user's input becomes part of the application state, 
so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form.
The code editor has the skeleton of a component called ControlledInput to create a controlled input element. 
The component's state is already initialized with an input property that holds an empty string. This value represents the text a user types into the input field.
First, create a method called handleChange() that has a parameter called event. When the method is called,
it receives an event object that contains a string of text from the input element.
You can access this string with event.target.value inside the method. Update the input property of the component's state with this new string.

Create a Controlled Form
The last challenge showed that React can control the internal state for certain elements like input and textarea, which makes them controlled components. 
This applies to other form elements as well, including the regular HTML form element.
The MyForm component is set up with an empty form with a submit handler. The submit handler will be called when the form is submitted.
We've added a button which submits the form. You can see it has the type set to submit indicating it is the button controlling the form.
Add the input element in the form and set its value and onChange() attributes like the last challenge. 
You should then complete the handleSubmit method so that it sets the component state property submit to the current input value in the local state.
Note: You also must call event.preventDefault() in the submit handler, to prevent the default form submit behavior which will refresh the web page. 

Pass State as Props to Child Components
You saw a lot of examples that passed props to child JSX elements and child React components in previous challenges. 
You may be wondering where those props come from. A common pattern is to have a stateful component containing the state important to your app, 
that then renders child components. You want these components to have access to some pieces of that state, which are passed in as props.
For example, maybe you have an App component that renders a Navbar, among other components. In your App, you have state that contains a lot of user information,
but the Navbar only needs access to the user's username so it can display it. You pass that piece of state to the Navbar component as a prop.
This pattern illustrates some important paradigms in React. The first is unidirectional data flow. State flows in one direction down
the tree of your application's components, from the stateful parent component to child components. The child components only receive the state data they need. 
The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. 
The rest of your components simply receive state from the parent as props, and render a UI from that state.
It begins to create a separation where state management is handled in one part of code and UI rendering in another.
This principle of separating state logic from UI logic is one of React's key principles. When it's used correctly,
it makes the design of complex, stateful applications much easier to manage.

Pass a Callback as Props
You can pass state as props to child components, but you're not limited to passing data. 
You can also pass handler functions or any method that's defined on a React component to a child component. 
This is how you allow child components to interact with their parent components. You pass methods to a child just like a regular prop. 
It's assigned a name and you have access to that method name under this.props in the child component.

Use the Lifecycle Method componentWillMount
React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. 
These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. 
This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. 
Here is a list of some of the main lifecycle methods: componentWillMount() componentDidMount() shouldComponentUpdate() componentDidUpdate() componentWillUnmount()

Use the Lifecycle Method componentDidMount
Most web developers, at some point, need to call an API endpoint to retrieve data. If you're working with React, it's important to know where to perform this action.
The best practice with React is to place API calls or any calls to your server in the lifecycle method componentDidMount(). 
This method is called after a component is mounted to the DOM. Any calls to setState() here will trigger a re-rendering of your component. 
When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data.

Add Event Listeners
The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality. 
React provides a synthetic event system which wraps the native event system present in browsers. 
This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently
between different browsers.
You've already been using some of these synthetic event handlers such as onClick(). 
React's synthetic event system is great to use for most interactions you'll manage on DOM elements. However,
if you want to attach an event handler to the document or window objects, you have to do this directly.
Attach an event listener in the componentDidMount() method for keydown events and have these events trigger the callback handleKeyPress(). 
You can use document.addEventListener() which takes the event (in quotes) as the first argument and the callback as the second argument.

Optimize Re-Renders with shouldComponentUpdate
So far, if any component receives new state or new props, it re-renders itself and all its children. This is usually okay.
But React provides a lifecycle method you can call when child components receive new state or props, and declare specifically if the components should update or not.
The method is shouldComponentUpdate(), and it takes nextProps and nextState as parameters.
This method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new props,
even if the props haven't changed. You can use shouldComponentUpdate() to prevent this by comparing the props.
The method must return a boolean value that tells React whether or not to update the component. 

Introducing Inline Styles
There are other complex concepts that add powerful capabilities to your React code. But you may be wondering about the more simple problem of how to style those
JSX elements you create in React. You likely know that it won't be exactly the same as working with HTML because of the way you apply classes to JSX elements.
If you import styles from a stylesheet, it isn't much different at all. You apply a class to your JSX element using the className attribute,
and apply styles to the class in your stylesheet. Another option is to apply inline styles, which are very common in ReactJS development.
You apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here's an example of an inline style in HTML:
<div style="color: yellow; font-size: 16px">Mellow Yellow</div>
JSX elements use the style attribute, but because of the way JSX is transpiled, you can't set the value to a string. 
Instead, you set it equal to a JavaScript object. Here's an example:
<div style={{color: "yellow", fontSize: 16}}>Mellow Yellow</div>

Add Inline Styles in React
You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the
style attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge
set the size of the font with fontSize instead of font-size. Hyphenated words like font-size are invalid syntax for JavaScript object properties, 
so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.
All property value length units (like height, width, and fontSize) are assumed to be in px unless otherwise specified.
If you want to use em, for example, you wrap the value and the units in quotes, like {fontSize: "4em"}. 
Other than the length values that default to px, all other property values should be wrapped in quotes.
If you have a large set of styles, you can assign a style object to a constant to keep your code organized.

Use Advanced JavaScript in React Render Method
In previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, { }, 
for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components. 
These are all common use cases to put JavaScript in JSX, but they aren't the only way that you can utilize JavaScript code in your React components.
You can also write JavaScript directly in your render methods, before the return statement, without inserting it inside of curly braces.
This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code inside the return statement, 
you place the variable name inside curly braces.

Render with an If-Else Condition
Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. 
When the condition is true, one view renders. When it's false, it's a different view. 
You can do this with a standard if/else statement in the render() method of a React component.

Use && for a More Concise Conditional
The if/else statements worked in the last challenge, but there's a more concise way to achieve the same result. 
Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. 
If you write a lot of else if statements to return slightly different UIs, you may repeat code which leaves room for error. 
Instead, you can use the && logical operator to perform conditional logic in a more concise way.
This is possible because you want to check if a condition is true,and if it is, return some markup. Here's an example:
{condition && <p>markup</p>}
If the condition is true, the markup will be returned. If the condition is false, the operation will immediately return false after evaluating the condition
and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing && after each one. 
This allows you to handle more complex conditional logic in your render() method without repeating a lot of code.

Use a Ternary Expression for Conditional Rendering
Before moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the ternary operator. 
The ternary operator is often utilized as a shortcut for if/else statements in JavaScript. They're not quite as robust as traditional if/else statements,
but they are very popular among React developers. One reason for this is because of how JSX is compiled, if/else statements can't be inserted directly into JSX code.
You might have noticed this a couple challenges ago — when an if/else statement was required, it was always outside the return statement.
Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX.
Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here's the basic syntax:
condition ? expressionIfTrue : expressionIfFalse;

Render Conditionally from Props
So far, you've seen how to use if/else, &&, and the ternary operator (condition ? expressionIfTrue : expressionIfFalse) to make conditional decisions about what to 
render and when. However, there's one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props.
Using props to conditionally render code is very common with React developers — that is, they use the value of a given prop to automatically
make decisions about what to render.
In this challenge, you'll set up a child component to make rendering decisions based on props. You'll also use the ternary operator, but you can see how 
several of the other concepts that were covered in the last few challenges might be just as useful in this context.

Change Inline CSS Conditionally Based on Component State
At this point, you've seen several applications of conditional rendering and the use of inline styles. Here's one more example that combines both of these topics. 
You can also render CSS conditionally based on the state of a React component. To do this, you check for a condition, 
and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method.
This paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly
(which is very common with jQuery, for example). In that approach, you must keep track of when elements change and also handle the actual manipulation directly. 
It can become difficult to keep track of changes, potentially making your UI unpredictable. When you set a style object based on a condition, 
you describe how the UI should look as a function of the application's state. There is a clear flow of information that only moves in one direction.
This is the preferred method when writing applications with React.

Use Array.map() to Dynamically Render Elements
Conditional rendering is useful, but you may need your components to render an unknown number of elements.Often in reactive programming,
a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. 
Programmers need to write their code to correctly handle that unknown state ahead of time. Using Array.map() in React illustrates this concept.
For example, you create a simple "To Do List" app. As the programmer, you have no way of knowing how many items a user might have on their list.
You need to set up your component to dynamically render the correct number of list elements long before someone using the program decides that today is laundry day.

Give Sibling Elements a Unique Key Attribute
The last challenge showed how the map method is used to dynamically render a number of elements based on user input. 
However, there was an important piece missing from that example. When you create an array of elements, each one needs a key attribute set to a unique value.
React uses these keys to keep track of which items are added, changed, or removed. 
This helps make the re-rendering process more efficient when the list is modified in any way.
Note: Keys only need to be unique between sibling elements, they don't need to be globally unique in your application.
The code editor has an array with some front end frameworks and a stateless functional component named Frameworks().

Use Array.filter() to Dynamically Filter an Array
The map array method is a powerful tool that you will use often when working with React. Another method related to map is filter,
which filters the contents of an array based on a condition, then returns a new array. For example,
if you have an array of users that all have a property online which can be set to true or false, you can filter only those users that are online by writing:
let onlineUsers = users.filter(user => user.online);

Render React on the Server with renderToString
So far, you have been rendering React components on the client. Normally, this is what you will always do. 
However, there are some use cases where it makes sense to render a React component on the server. 
Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. 
In fact, React provides a renderToString() method you can use for this purpose.
There are two key reasons why rendering on the server may be used in a real world app. 
First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. 
This may not be ideal for search engines that are trying to index the content of your pages so people can find you. 
If you render the initial HTML markup on the server and send this to the client, 
the initial page load contains all of the page's markup which can be crawled by search engines. Second, this creates a faster initial page load experience because 
the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load.

1.5 Redux =========================================================================================================================================================
Create a Redux Store
Redux is a state management framework that can be used with a number of different web technologies, including React.
In Redux, there is a single state object that's responsible for the entire state of your application.
This means if you had a React app with ten components, and each component had its own local state,the entire state of your app would be defined by a single state object
housed in the Redux store. This is the first important principle to understand when learning Redux: 
the Redux store is the single source of truth when it comes to application state.
This also means that any time any piece of your app wants to update state, it must do so through the Redux store. 
The unidirectional data flow makes it easier to track state management in your app.
The Redux store is an object which holds and manages application state. There is a method called createStore() on the Redux object, 
which you use to create the Redux store. This method takes a reducer function as a required argument. The reducer function is covered in a later challenge,
and is already defined for you in the code editor. It simply takes state as an argument and returns state.

Get State from the Redux Store
The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current state held in the Redux 
store object with the getState() method.

Define a Redux Action
Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. 
An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, 
then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in.
While the data is optional, actions must carry a type property that specifies the 'type' of action that occurred.
Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store. 
The store then conducts the business of updating state based on the action that occurred.
Writing a Redux action is as simple as declaring an object with a type property.

Define an Action Creator
After creating an action, the next step is sending the action to the Redux store so it can update its state.In Redux, you define action creators to accomplish this.
An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.

Dispatch an Action Event
dispatch method is what you use to dispatch actions to the Redux store. 
Calling store.dispatch() and passing the value returned from an action creator sends an action back to the store.
Recall that action creators return an object with a type property that specifies the type of action that has occurred. 
Then the method dispatches an action object to the Redux store. Based on the previous challenge's example, the following lines are equivalent,
and both dispatch the action of type LOGIN:
store.dispatch(actionCreator());
store.dispatch({ type: 'LOGIN' });

Handle an Action in the Store
After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a reducer function. 
Reducers in Redux are responsible for the state modifications that take place in response to actions. A reducer takes state and action as arguments,
and it always returns a new state. It is important to see that this is the only role of the reducer. It has no side effects — it never calls an API endpoint 
and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.
Another key principle in Redux is that state is read-only. In other words, the reducer function must always return a new copy of state and never modify state directly.
Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. 





































