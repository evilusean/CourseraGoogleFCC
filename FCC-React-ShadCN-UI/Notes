Start:18July2024
End:

ShadCN UI Official Docs:
https://ui.shadcn.com/docs
https://ui.shadcn.com/docs/installation
https://ui.shadcn.com/docs/installation/next

FCC - Mastering ShadCN UI Components:
https://www.freecodecamp.org/news/mastering-shadcn-ui-components/
https://www.youtube.com/watch?v=oidnyW71W0A
FCC - ShadCN With NextJS 14:
https://www.freecodecamp.org/news/shadcn-with-next-js-14/

Install = 0:45 ===========================================================================================================================================================================================================================
https://ui.shadcn.com/docs/installation
https://ui.shadcn.com/docs/installation/next
npx create-next-app@latest recipsean --typescript --tailwind --eslint #installs shadcn with react, next js, tailwind, and typescript in the 'RecipSean' repo from the terminal in current working directory
cd recipsean #don't forget to change directory to newly created app folder
npx shadcn-ui@latest init #after creating the app with npx above, use this to initialize shadcn opseans = Default / Slate / CSS Variables for colors = Yes
if you are using shadcn, you should always install it at the begining of the development process, if you use the same naming conventions like naming a folder 'components' shadcn will overwrite it on install
'npm run build' #build for testing
'npm run dev' #start the testing server

ShadCN Accordian = 3:35 ==================================================================================================================================================================================================================
First Component :
https://ui.shadcn.com/docs/components/accordion
Accordion = Dropdown list when clicked, with smooth animations
ShadCN Components will have a preview, After looking at the preview and deciding you want that component, you can then scroll down to the 'Installation' either through the CLI or Manual 
  After installing it, you can alter it to suit your own needs, 
npx shadcn-ui@latest add accordion #will install accordian through CLI, will create a components folder in 'src/app/components/ui/accordion.tsx'
'tailwind.config.js' #after installing the component, you will need to update tailwindcss.config for the keyframes(animation) copy and paste can be found on 'https://ui.shadcn.com/docs/components/accordion'
'import' after installing the component, and updating tailwindconfig, add the import, copy and paste can be found on 'https://ui.shadcn.com/docs/components/accordion'
'usage' after insstalling the component, and updating tailwindconfig, and adding the import, it will show you how to add the new component to your project/app (below is example)
<Accordion type="single" collapsible>
  <AccordionItem value="item-1">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
</Accordion>
Created new folder for building components, 'src/app/SHADCN/' and used React snippet 'rfce' to create a functional component
In order to make more than one, do below - ShadCN takes one parent component, and then many children components, compare/juxtapose above with below to see the differences, you can control styling from the div:
<div className='w-[400px] p-4'>
<Accordion type="single" collapsible>
  <AccordionItem value="item-1">
    <AccordionTrigger>Seans A Team</AccordionTrigger>
    <AccordionContent>
      Testing the Dropdown component, my first ShadCN component, This is very cool, 
    </AccordionContent>
  </AccordionItem>
  <AccordionItem value="item-2">
    <AccordionTrigger>Seans B Team</AccordionTrigger>
    <AccordionContent>
      Sean Team 6(RIP) - CARTHAGO DELENDA EST - Ceterum (autem) censeo Carthaginem esse delendam ("Furthermore, I consider Carthage to need to be destroyed") - Based Cato
    </AccordionContent>
  </AccordionItem>
</Accordion>
</div>

SHADCN - Alert = 11:15 =================================================================================================================================================================================================================
https://ui.shadcn.com/docs/components/alert
Just a plain box outlined with a messsage(different variations, can be made red with big red text), many different types:
npx shadcn-ui@latest add alert #through CLI will install a new component in 'src/app/components/ui/alert.tsx'
If you want to change icons, go to below site:
https://lucide.dev/icons/
Can be used to give messages to the users, or an error alert message

SHADCN - Alert Dialog = 25:55 ===========================================================================================================================================================================================================
https://ui.shadcn.com/docs/components/alert-dialog
Creates a popup dialog with buttons when you click some text
Going to make the title / text dialog as dynamic so you can use the same code, but just change the props to change the content
Made reuseable with props, can use other components in TS with 'function MyAlertDialog({title, content, text}: {title: string, content: React.ReactNode, text: React.ReactNode}) { ... }'
'React.ReactNode' #will allow us to use other components in our typescript, or strings, etc very versatile Typescript above

SHADCN - Image Ratio = 39:15 =============================================================================================================================================================================================================
Aspect Ratio ? for videos / maintaing a certain aspect ratio for an image/video player
Copy + Paste - same deal as before - add an image, 
You can change 16 / 9 aspect ratio, className="..." src="..."
you will need to add props, width={450} height={200}, but the aspect ratio messes this up, this tut guy just rambled for 20 mins
'fill' you can add instead of height/width, when you want image controlled by parent container
after adding 'fill' you can change the aspect ratio manually, <AspectRatio = { 3 / 2 } >

SHADCN - Avatar = 57:30 ==================================================================================================================================================================================================================































