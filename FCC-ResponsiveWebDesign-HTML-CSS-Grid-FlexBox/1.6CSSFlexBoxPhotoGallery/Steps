Step 1
Begin with your standard HTML boilerplate. Add a DOCTYPE declaration, an html element, a head element, and a body element.
Add the lang attribute to the opening <html> tag with en set as the value.

Step 2
Within your head element, add a meta tag with the name set to viewport and the content set to width=device-width, initial-scale=1.
Also add a meta tag with the charset set to UTF-8.

Step 3
Within your head element, add a title element with the text set to Photo Gallery, and a link element to add your styles.css file to the page.

Step 4
Add a header element within the body element and assign a class of header to it.
Inside the header, create an h1 with css flexbox photo gallery as the text.

Step 5
Below your .header element, create a new div element and assign it a class of gallery. This div will act as a container for the gallery images.
Inside that .gallery element, create nine img elements.

Step 6
Next, give each img a src attribute according to its order in the document. 
The first img should have a src of https://cdn.freecodecamp.org/curriculum/css-photo-gallery/1.jpg. 
The rest should be the same, except replace the 1 with the number the img is in the document.

Step 7
In order to better visualize how your elements are sized, adding a border can be helpful.
Give your .gallery element a width of 50% and a border set to 5px solid red.
Then give your img elements a width of 100%, padding set to 5px, and a border set to 5px solid blue.

Step 8
Notice how the blue image border extends beyond the red gallery border. This is due to the way browsers calculate the size of container elements.
The box-sizing property is used to set this behavior. By default, the content-box model is used. With this model, when an element has a specific width,
that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values.
Try setting box-sizing to content-box explicitly, with the global * selector. At this point, you will not see any changes, because you are using the default value.

Step 9
The border-box sizing model does the opposite of content-box. The total width of the element, including padding and border, 
will be the explicit width set. The content of the element will shrink to make room for the padding and border.
Change the box-sizing property to border-box. Notice how your blue image borders now fit within your red gallery border.

Step 10
Now that you have figured out your box-sizing approach, you can clean up the CSS you added to see the changes.
Remove your .gallery and img selectors, and all rules within.

Step 11
Now your images are too big.
Create a .gallery img selector to target them. Give them all a width of 100% and a max-width of 350px.
Also set the height property to 300px to keep your images a uniform size.

Step 12
Remove the margin from your body element, set the font-family to sans-serif, and give it a background-color of #f5f6f7 as the value.

Step 13
Align your .header text in the center. Make the text uppercase using the text-transform property with uppercase as the value.
Give it a padding of 32px on all sides. Set the background to #0a0a23 and the text to #fff as the color values.
Add a border-bottom with 4px solid #fdb347 as the value.

Step 14
Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.
To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.
Create a .gallery selector and make it a flex container.

Step 15
Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:
row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

Try the different values to see how they affect the layout.

When you are done, set an explicit flex-direction of row on the .gallery element.































