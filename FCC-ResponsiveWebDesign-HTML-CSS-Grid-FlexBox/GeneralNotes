Start: Nov 06 2023
1.1 ===============================================================================================================================Learn HTML by Building a Cat Photo App
HTML elements have opening tags like <h1> and closing tags like </h1>.
The h1 through h6 heading elements are used to signify the importance of content below them. The lower the number, the higher the importance, 
  so h2 elements have less importance than h1 elements. Only use one h1 element per page and place lower importance headings below higher importance headings.
The p element is used to create a paragraph of text on websites. 
Commenting allows you to leave messages without affecting the browser display. It also allows you to make code inactive. 
  A comment in HTML starts with <!--, contains any number of lines of text, and ends with -->. For example, the comment <!-- TODO: Remove h1 --> 
  contains the text TODO: Remove h1.
HTML5 has some elements that identify different content areas. These elements make your HTML easier to read and help with Search Engine Optimization (SEO) and 
  accessibility.
Identify the main section of this page by adding a <main> opening tag before the h1 element, and a </main> closing tag
elements inside the main element. This is called nesting. Nested elements should be placed two spaces further
  to the right of the element they are nested in. This spacing is called indentation and it is used to make HTML easier to read.
You can add images to your website by using the img element. img elements have an opening tag without a closing tag. 
A tag for an element without a closing tag is known as a self-closing tag.
HTML attributes are special words used inside the opening tag of an element to control the element's behavior. The src attribute in an img element specifies the image's
  URL (where the image is located).
All img elements should have an alt attribute. The alt attribute's text is used for screen readers to improve accessibility and is displayed if the image fails to load.
You can link to another page with the anchor (a) element. For example, <a href='https://freecodecamp.org'></a> would link to freecodecamp.org.
A link's text must be placed between the opening and closing tags of an anchor (a) element. 
You can turn any text into a link, such as the text inside of a p element. <p>I think <a href="https://www.freecodecamp.org">freeCodeCamp</a> is great.</p>
Before adding any new content, you should make use of a section element to separate the cat photos content from the future content.
Use list item (li) elements to create items in a list.
A figure caption (figcaption) element is used to add a caption to describe the image contained within the figure element. 
For example, <figcaption>A cute cat</figcaption> adds the caption A cute cat.
Emphasize a word in the figcaption element by wrapping it in an emphasis em element.
The code for an ordered list (ol) is similar to an unordered list, but list items in an ordered list are numbered when displayed.
After the last img element, add a <figcaption> element with the text Cats hate other cats. Inside the <figure> element
The strong element is used to indicate that some text is of strong importance or urgent.
Now you will add a web form to collect information from users. add a form element.
The action attribute indicates where form data should be sent. For example, 
  <form action="/submit-url"></form> tells the browser that the form data should be sent to the path /submit-url.
The input element allows you several ways to collect data from a web form. Like img elements, input elements are self-closing and do not need closing tags.
There are many kinds of inputs you can create using the type attribute. You can easily create a password field, reset button,
  or a control to let users select a file from their computer.
In order for a form's data to be accessed by the location specified in the action attribute, you must give the text field a name attribute and assign it a value 
  to represent the data being submitted. For example, you could use the following syntax for an email address text field: <input type="text" name="email">.
Placeholder text is used to give people a hint about what kind of information to enter into an input. For example, <input type="text" placeholder="Email address">.
To prevent a user from submitting your form when required information is missing, you need to add the required attribute to an input element.
  There's no need to set a value to the required attribute. Instead, just add the word required to the input element, making sure there is space between it and other
  attributes.
Use the button element to create a clickable button. For example, <button>Click Here</button> creates a button with the text Click Here.
The id attribute is used to identify specific HTML elements. Each id attribute's value must be unique from all other id values for the entire page.
The fieldset element is used to group related inputs and labels together in a web form. fieldset elements are block-level elements meaning that they appear on a new line
The legend element acts as a caption for the content in the fieldset element. It gives users context about what they should enter into that part of the form.
Forms commonly use checkboxes for questions that may have more than one answer. For example, here's a checkbox with the option of tacos: <input type="checkbox"> tacos.
There's another way to associate an input element's text with the element itself. You can nest the text within a label element and add a for attribute with the 
  same value as the input element's id attribute.
Like radio buttons, form data for selected checkboxes are name / value attribute pairs. While the value attribute is optional, it's best practice to include it with
  any checkboxes or radio buttons on the page.
In order to make a checkbox checked or radio button selected by default, you need to add the checked attribute to it. There's no need to set a value to the 
  checked attribute. Instead, just add the word checked to the input element, making sure there is space between it and other attributes.
The title element determines what browsers show in the title bar or tab for the page.
<html lang="en">
All pages should begin with <!DOCTYPE html>. This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.
You can set browser behavior by adding self-closing meta elements in the head. Here's an example:<meta attribute="value">

1.2 =========================================================================================================================Learn Basic CSS by Building a Cafe Menu
Start off with : <!DOCTYPE html> <html lang="en"></html>
The title is one of several elements that provide extra information not visible on the web page, but it is useful for search engines or how the page gets displayed.
Inside the head element, nest a meta element with an attribute named charset set to the value utf-8 to tell the browser how to encode characters for the page.
<meta charset="utf-8">
Up until now, you have been limited regarding the presentation and appearance of the content you create. 
To start taking control, add a style element within the head element.<style></style>
You can add style to an element by specifying it in the style element and setting a property for it like this: element { property: value; }
<style> h1 {text-align: center}</style>
 You can add the same group of styles to many elements by creating a list of selectors. Each selector is separated with commas like this:
selector1, selector2 {
  property: value;
}
You have styled three elements by writing CSS inside the style tags. This works, but since there will be many more styles,
  it's best to put all the styles in a separate file and link to it.
<link rel="stylesheet" type="text/css" href="styles.css"></link>
For the styling of the page to look similar on mobile as it does on a desktop or laptop, you need to add a meta element with a special content attribute.
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this.
#menu {
  width: 300px;
}
Comments in CSS look like this: /* comment here */
You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element.
 you could use an image of coffee beans for the background of the page.
body {
background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)
}
article elements commonly contain multiple elements that have related information.
p elements are block-level elements, so they take up the entire width of their parent element.
To get them on the same line, you need to apply some styling to the p elements so they behave more like inline elements. To do that, start by adding a class attribute
  with the value item 
.item p { display:inline-block }
If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. 
  This is because the width of the p elements on the left side can only take up 50% of the space.
You can give your menu some space between the content and the sides with various padding properties.
The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices.
  Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.
You can change the font-family of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it.
You can use an hr element to display a divider between sections of different content.
The default properties of an hr element will make it appear as a thin light grey line. You can change the height of the line by specifying a value for the height property.
You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.
You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.
You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.
There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions.
  Negative values are created using a - in front of the value.
































