Start: Nov 06 2023
1.1 ===============================================================================================================================Learn HTML by Building a Cat Photo App
HTML elements have opening tags like <h1> and closing tags like </h1>.
The h1 through h6 heading elements are used to signify the importance of content below them. The lower the number, the higher the importance, 
  so h2 elements have less importance than h1 elements. Only use one h1 element per page and place lower importance headings below higher importance headings.
The p element is used to create a paragraph of text on websites. 
Commenting allows you to leave messages without affecting the browser display. It also allows you to make code inactive. 
  A comment in HTML starts with <!--, contains any number of lines of text, and ends with -->. For example, the comment <!-- TODO: Remove h1 --> 
  contains the text TODO: Remove h1.
HTML5 has some elements that identify different content areas. These elements make your HTML easier to read and help with Search Engine Optimization (SEO) and 
  accessibility.
Identify the main section of this page by adding a <main> opening tag before the h1 element, and a </main> closing tag
elements inside the main element. This is called nesting. Nested elements should be placed two spaces further
  to the right of the element they are nested in. This spacing is called indentation and it is used to make HTML easier to read.
You can add images to your website by using the img element. img elements have an opening tag without a closing tag. 
A tag for an element without a closing tag is known as a self-closing tag.
HTML attributes are special words used inside the opening tag of an element to control the element's behavior. The src attribute in an img element specifies the image's
  URL (where the image is located).
All img elements should have an alt attribute. The alt attribute's text is used for screen readers to improve accessibility and is displayed if the image fails to load.
You can link to another page with the anchor (a) element. For example, <a href='https://freecodecamp.org'></a> would link to freecodecamp.org.
A link's text must be placed between the opening and closing tags of an anchor (a) element. 
You can turn any text into a link, such as the text inside of a p element. <p>I think <a href="https://www.freecodecamp.org">freeCodeCamp</a> is great.</p>
Before adding any new content, you should make use of a section element to separate the cat photos content from the future content.
Use list item (li) elements to create items in a list.
A figure caption (figcaption) element is used to add a caption to describe the image contained within the figure element. 
For example, <figcaption>A cute cat</figcaption> adds the caption A cute cat.
Emphasize a word in the figcaption element by wrapping it in an emphasis em element.
The code for an ordered list (ol) is similar to an unordered list, but list items in an ordered list are numbered when displayed.
After the last img element, add a <figcaption> element with the text Cats hate other cats. Inside the <figure> element
The strong element is used to indicate that some text is of strong importance or urgent.
Now you will add a web form to collect information from users. add a form element.
The action attribute indicates where form data should be sent. For example, 
  <form action="/submit-url"></form> tells the browser that the form data should be sent to the path /submit-url.
The input element allows you several ways to collect data from a web form. Like img elements, input elements are self-closing and do not need closing tags.
There are many kinds of inputs you can create using the type attribute. You can easily create a password field, reset button,
  or a control to let users select a file from their computer.
In order for a form's data to be accessed by the location specified in the action attribute, you must give the text field a name attribute and assign it a value 
  to represent the data being submitted. For example, you could use the following syntax for an email address text field: <input type="text" name="email">.
Placeholder text is used to give people a hint about what kind of information to enter into an input. For example, <input type="text" placeholder="Email address">.
To prevent a user from submitting your form when required information is missing, you need to add the required attribute to an input element.
  There's no need to set a value to the required attribute. Instead, just add the word required to the input element, making sure there is space between it and other
  attributes.
Use the button element to create a clickable button. For example, <button>Click Here</button> creates a button with the text Click Here.
The id attribute is used to identify specific HTML elements. Each id attribute's value must be unique from all other id values for the entire page.
The fieldset element is used to group related inputs and labels together in a web form. fieldset elements are block-level elements meaning that they appear on a new line
The legend element acts as a caption for the content in the fieldset element. It gives users context about what they should enter into that part of the form.
Forms commonly use checkboxes for questions that may have more than one answer. For example, here's a checkbox with the option of tacos: <input type="checkbox"> tacos.
There's another way to associate an input element's text with the element itself. You can nest the text within a label element and add a for attribute with the 
  same value as the input element's id attribute.
Like radio buttons, form data for selected checkboxes are name / value attribute pairs. While the value attribute is optional, it's best practice to include it with
  any checkboxes or radio buttons on the page.
In order to make a checkbox checked or radio button selected by default, you need to add the checked attribute to it. There's no need to set a value to the 
  checked attribute. Instead, just add the word checked to the input element, making sure there is space between it and other attributes.
The title element determines what browsers show in the title bar or tab for the page.
<html lang="en">
All pages should begin with <!DOCTYPE html>. This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.
You can set browser behavior by adding self-closing meta elements in the head. Here's an example:<meta attribute="value">

1.2 =========================================================================================================================Learn Basic CSS by Building a Cafe Menu
Start off with : <!DOCTYPE html> <html lang="en"></html>
The title is one of several elements that provide extra information not visible on the web page, but it is useful for search engines or how the page gets displayed.
Inside the head element, nest a meta element with an attribute named charset set to the value utf-8 to tell the browser how to encode characters for the page.
<meta charset="utf-8">
Up until now, you have been limited regarding the presentation and appearance of the content you create. 
To start taking control, add a style element within the head element.<style></style>
You can add style to an element by specifying it in the style element and setting a property for it like this: element { property: value; }
<style> h1 {text-align: center}</style>
 You can add the same group of styles to many elements by creating a list of selectors. Each selector is separated with commas like this:
selector1, selector2 {
  property: value;
}
You have styled three elements by writing CSS inside the style tags. This works, but since there will be many more styles,
  it's best to put all the styles in a separate file and link to it.
<link rel="stylesheet" type="text/css" href="styles.css"></link>
For the styling of the page to look similar on mobile as it does on a desktop or laptop, you need to add a meta element with a special content attribute.
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this.
#menu {
  width: 300px;
}
Comments in CSS look like this: /* comment here */
You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element.
 you could use an image of coffee beans for the background of the page.
body {
background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)
}
article elements commonly contain multiple elements that have related information.
p elements are block-level elements, so they take up the entire width of their parent element.
To get them on the same line, you need to apply some styling to the p elements so they behave more like inline elements. To do that, start by adding a class attribute
  with the value item 
.item p { display:inline-block }
If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. 
  This is because the width of the p elements on the left side can only take up 50% of the space.
You can give your menu some space between the content and the sides with various padding properties.
The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices.
  Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.
You can change the font-family of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it.
You can use an hr element to display a divider between sections of different content.
The default properties of an hr element will make it appear as a thin light grey line. You can change the height of the line by specifying a value for the height property.
You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.
You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.
You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.
There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions.
  Negative values are created using a - in front of the value.

1.3 ===========================================================================================================Learn CSS colours by Building a Set of Coloured Markers:
Remember that the title element gives search engines extra information about the page. It also displays the content of that title element in two more ways:
in the title bar when the page is open
in the browser tab for the page when you hover on it. Even if that tab is not active, once you hover on the tab, the title text is displayed.
You can have multiple self-closing meta elements on a web page. Each meta element adds information about the page that cannot be expressed by other HTML elements
<meta name="viewport" content="width=device-width, initial-scale=1.0"> #your page looks the same on all devices.
Your marker would look better if it was centered on the page. An easy way to do that is with the margin shorthand property.
In the last project, you set the margin area of elements separately with properties like margin-top and margin-left.
The margin shorthand property makes it easy to set multiple margin areas at the same time.
To center your marker on the page, set its margin property to auto. 
Multiple classes can be added to an element by listing them in the class attribute and separating them with a space. 
  For example, the following adds both the animal and dog classes to a div element.
  <div class="animal dog">
There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black)
  model used in print. rgb(0, 0, 0) #RGB model
Each red, green, and blue value is a number from 0 to 255. 0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color.
Tertiary colors are created by combining a primary with a nearby secondary color.
Notice that the red and cyan colors are very bright right next to each other. This contrast can be distracting if it's overused on a website, and can make text hard
to read if it's placed on a complementary-colored background.
It's better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page.

A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they're really just another form of RGB 
values.
Hex color values start with a # character and take six characters from 0-9 and A-F. 
The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, #4B5320.
You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).

The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.
If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.
Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values.
Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.

You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.
A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors
are used.
One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an 
image as a value.

The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:
linear-gradient(gradientDirection, color1, color2, ...);
gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the 
transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.

Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more 
transparent, and you can see through the glass to the other side.
With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 
1.0, or 100%, the element will be completely opaque like it is by default.
Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a
color is.
You've already set sleeve's opacity with a named color and the opacity property, but you can add an alpha channel to the other CSS color properties.
You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.
The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:
rgba(redValue, greenValue, blueValue, alphaValue);
You can also use an alpha channel with hsl and hex colors.
the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. 
For example, your marker elements are all stacked on top of each other.
To position two div elements on the same line, set their display properties to inline-block.
All HTML elements have borders, though they're usually set to none by default. With CSS, you can control all aspects of an element's border, and set the border 
on all sides, or just one side at a time. For a border to be visible, you need to set its width and style.
Borders have several styles to choose from. You can make your border a solid line, but you can also use a dashed or dotted line if you prefer. 
Solid border lines are probably the most common.
Your border should be visible now. If no color is set, black is used by default.
But to make your code more readable, it's better to set the border color explicitly.
The border-left shorthand property lets you to set the left border's width, style, and color at the same time.
Here is the syntax: border-left: width style color;

add a slight shadow to each marker to make them look even more realistic.
The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:
box-shadow: offsetX offsetY color;
Here's how the offsetX and offsetY values work:
both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change.
The height and width of the shadow is determined by the height and width of the element it's applied to. You can also use an optional spreadRadius value to spread out
the reach of the shadow.
Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:
box-shadow: offsetX offsetY blurRadius color;
If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.
But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:
box-shadow: offsetX offsetY blurRadius spreadRadius color;
Like blurRadius, spreadRadius defaults to 0 if it isn't included.

1.3 ===========================================================================================================Registration/Survey Forms:
The vh unit stands for viewport height, and is relative to 1% of the height of the viewport.
The method attribute specifies how to send form-data to the URL specified in the action attribute. The form-data can be sent via a GET request as URL 
parameters (with method="get") or via a POST request as data in the request body (with method="post").
As the form will have three distinct sections, add three fieldset elements within the form element.
The rem unit stands for root em, and is relative to the font size of the html element.
As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, 
add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other. = label {display: block; margin: 0.5rem 0;}}
Following accessibility best practices, link the input elements and the label elements together using the for attribute.
<label for="first-name">Enter Your First Name: <input id="first-name"/></label>
Specifying the type attribute of a form element is important for the browser to know what kind of data it should expect.
If the type is not specified, the browser will default to text.
To make the form more interactive, add the required attribute to the input elements in the first fieldset.
Now, if you try to submit the form without filling in the required fields, you will see an error message.
Certain type attribute values come with built-in form validation. For example, type="email" requires that the value be a valid email address.
Add custom validation to the password input element, by adding a minlength attribute with a value of 8. 
Doing so prevents inputs of less than 8 characters being submitted. minlength=8
With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.
Add a pattern attribute to the password input element to require the input match: 
pattern="[a-z0-5]{8,}" #regular expression which matches eight or more lowercase letters or the digits 0 to 5
To relate the radio inputs, give them the same name attribute with a value of account-type. Now, it is not possible to select both radio inputs at the same time.
<input type="radio" name="account-type" />
<legend>Account type (required)</legend> #legend used to write in fieldset
Linking for labels with input Id's:<label for="terms-and-conditions"> <input id="terms-and-conditions" type="checkbox" required />
  I accept the <a href="https://www.freecodecamp.org/news/terms-of-service/">terms and conditions</a></label>

Submitting the form with an option selected would not send a useful value to the server. 
As such, each option needs to be given a value attribute. Without which, the text content of the option will be submitted to the server.
<option value="4">Other</option>

1.5 ===========================================================================================================CSS Flex Box Rothko Painting:
CSS Box Model Image: https://cdn.freecodecamp.org/curriculum/css-box-model/diagram-3.png
content is surrounded by a space called padding, similar to how bubble wrap separates an item from the box around it.
Think of the border like the cardboard box your item was shipped in.
Margin is the area outside of the box, and can be used to control the space between other boxes or elements.

1.6 =========================================================================================================== CSSFlexBoxPhotoGallery:
Notice how the blue image border extends beyond the red gallery border. This is due to the way browsers calculate the size of container elements.
The box-sizing property is used to set this behavior. By default, the content-box model is used. With this model, when an element has a specific width,
that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values.
Try setting box-sizing to content-box explicitly, with the global * selector. At this point, you will not see any changes, because you are using the default value.
 * {  box-sizing: content-box; } # * is the global selector
The border-box sizing model does the opposite of content-box. The total width of the element, including padding and border, will be the explicit width set. 
The content of the element will shrink to make room for the padding and border.

Align your .header text in the center. Make the text uppercase using the text-transform property with uppercase as the value.
Give it a padding of 32px on all sides. Set the background to #0a0a23 and the text to #fff as the color values.
Add a border-bottom with 4px solid #fdb347 as the value.
.header { text-align: center; text-transform: uppercase; padding: 32px; background: #0a0a23; color: #ffff; border-bottom: 4px solid #fdb347;}

Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.
To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.
.gallery { display: flex;}
Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:
row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.
{flex-directiob: row}
The flex-wrap property determines how your flex items behave when the flex container is too small.
Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.
The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.
The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical.
Notice how some of your images have become distorted. This is because the images have different aspect ratios. 
Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave.

Your images need some space between them.
The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. 
The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. 

The alt image attribute should describe the image content. Screen readers announce the alternative text in place of images. 
If the image can't be loaded, this text is presented in place of the image


1.7 =========================================================================================================== 1TypographyNutritionLabel:
If you inspect your .label element with your browser's developer tools, you may notice that it's actually 288 pixels wide instead of 270. 
This is because, by default, the browser includes the border and padding when determining an element's size.
To solve this, reset the box model by creating a * selector and giving it a box-sizing property of border-box. * { box-sizing: border-box;}

Horizontal spacing between equally important elements can increase the readability of your text. Wrap the text 2/3 cup (55g) in a span element.

The rem unit stands for root em, and is relative to the font size of the html element.
Create a .small-text selector and set the font-size to 0.85rem, which would calculate to roughly 13.6px

The :not pseudo-selector can be used to select all elements that do not match the given CSS rule.
div:not(#example) {
  color: red;
}

1.8 =========================================================================================================== Accesibility Quiz:
You may be familiar with the meta element already; it is used to specify information about the page, such as the title, description, keywords, and author.
Give your page a meta element with an appropriate charset value.
The charset attribute specifies the character encoding of the page, and, nowadays, UTF-8 is the only encoding supported by most browsers.
Continuing with the meta elements, a viewport definition tells the browser how to render the page. 
Including one betters visual accessibility on mobile, and improves SEO (search engine optimization).
Add a viewport definition with a content attribute detailing the width and initial-scale of the page.
<meta name="viewport" content="width=device-width, initial-scale=1.0">
Another important meta element for accessibility and SEO is the description definition. 
The value of the content attribute is used by search engines to provide a description of your page.
Lastly in the head, the title element is useful for screen readers to understand the content of a page. Furthermore, it is an important part of SEO.
Give your page a title that is descriptive and concise.

A useful property of an SVG (scalable vector graphics) is that it contains a path attribute 
which allows the image to be scaled without affecting the resolution of the resultant image.

The child combinator selector > is used between selectors to target only elements that match the second selector and are a direct child of the first selector.
This can be helpful when you have deeply nested elements and want to control the scope of your styling.
nav > ul {
  display: flex;
  justify-content: space-evenly;}

To increase the page accessibility, the role attribute can be used to indicate the purpose behind an element on the page to assistive technologies. 
The role attribute is a part of the Web Accessibility Initiative (WAI), and accepts preset values.

Every region role requires a label, which helps screen reader users understand the purpose of the region. 
One method for adding a label is to add a heading element inside the region and then reference it with the aria-labelledby attribute.
<section role="region" aria-labelledby="student-info">
          <h2 id="student-info">Student Info</h2></section>

#Unorderered list of self referenced HTML tags to parts of document
<ul><li><a href="#student-info">INFO</a></li><li><a href="#html-questions">HTML</a></li><li><a href="#css-questions">CSS</a></li>        </ul>
It is important to link each input to the corresponding label element. This provides assistive technology users with a visual reference to the input.
This is done by giving the label a for attribute, which contains the id of the input.
Keeping in mind best-practices for form inputs, give each input an appropriate type and name attribute. Then, give the first input a placeholder attribute.
Even though you added a placeholder to the first input element in the previous lesson, this is actually not a best-practice for accessibility; 
too often, users confuse the placeholder text with an actual input value - they think there is already a value in the input.

The .sr-only text is still visible. There is a common pattern to visually hide text for only screen readers to read.
This pattern is to set the following CSS properties:
position: absolute;
width: 1px;
height: 1px;
padding: 0;
margin: -1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
white-space: nowrap;
border: 0;

Although not required for label elements with a nested input, it is still best-practice to explicitly link a label with its corresponding input element.
If you click on the radio inputs, you might notice both inputs within the same true/false fieldset can be selected at the same time.
Group the relevant inputs together such that only one input from a pair can be selected at a time. name="samename"

<br />The br tags will allow each part of the address to be on its own line and are useful for presenting address elements properly.

2.0 =========================================================================================================== Pesudo Selectors Balance Sheet:
Below your existing div element, add a new div element with a class set to table-wrap. This will be the container for your tables.
Within that, add three table elements. You will be using CSS to style these into a single table, 
HTML tables use the caption element to describe what the table is about. 
The caption element should always be the first child of a table, but can be positioned with the caption-side CSS property.
The thead and tbody elements are used to indicate which portion of your table is the header, and which portion contains the primary data or content.
Add a thead and tbody to your first table, below the caption element.
<table>
<caption>Assets</caption><thead></thead><tbody></tbody>
</table>
The tr element is used to indicate a table row. Add a tr element within your thead element. In your new tr element, add a td element, followed by three th elements.
The td element indicates a data cell, while the th element indicates a header cell.

The CSS you are about to write is a common set of properties used to ensure elements are completely hidden visually.
The span[class~="sr-only"] selector will select any span element whose class includes sr-only. Create that selector, and give it a border property set to 0.
span[class~="sr-only"] {border: 0}
The CSS clip property is used to define the visible portions of an element.   clip: rect(1px,1px,1px,1px);

The :first-of-type pseudo-selector is used to target the first element that matches the selector.
h1 .flex span:first-of-type {font-size: 0.7em;}
The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the selector. 
h1 .flex span:last-of-type {font-size: 1.2em;}

Before you start diving in to the table itself, your span elements are currently bolded. Create a span:not(.sr-only) 
selector and give it a font-weight property set to normal.
The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, any of your span elements that do not have 
the sr-only class. This ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten.
span:not(.sr-only) {font-weight: normal;}

you can use the !important keyword to ensure these properties are always applied, regardless of order or specificity. position: absolute !important;

The [attribute="value"] selector targets any element that has an attribute with a specific value. Create a tr[class="total"] selector
to target specifically your tr elements with the total class. Give it a bottom border of 4px double #0a0a23 and make the font bold.
tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

The key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total.
The second will select tr elements where the class includes total.

The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type.





















