eStart : 19March2025 

'sh questionnaire.sh' # you need a prefix with 'sh' similar to './' to run a shell script 'sh' stands for shell
'bash questionnaire.sh' # to run it in 'bash' born again shell
'which bash' # '/usr/bin/bash' where bash lives, 'which' shows where a program is 
'#!<path_to_interpreter>' # shebang shebang oh baby she move she move I go crazy, she rook like a butterfly but sting like a bee -
'#!/bin/bash' #tell the computer to run from this path -  tell your computer which interpreter to use - add it to the top of your script
'./questionnaire.sh' #this is what I've been using for years to run my shell scripts
'ls -l <file name>' #will list all privileges for the file 
-rw-r--r--. All but the first character (-) describe permissions different users have with the file. r means read, w means write, x means execute
'chmod +x questionnaire.sh' # in the terminal to give everyone executable permissions.
'VARIABLE_NAME=VALUE' #Bash has variables, functions, and other things you might be familiar with. You can create a variable with VARIABLE_NAME=VALUE. 
  There cannot be any spaces around the equal (=) sign. If a variable has any spaces in it, place double quotes around it. 
'$VARIABLE_NAME' #To use a variable, place '$' in front of it like this: 
'read VARIABLE_NAME' #you want to be able to accept input from a user. You can do that with 'read' like this: 
'echo Hello $NAME.' #to print the name, notice how theres no quote marks or escape characters, I guess you can do it raw in bash
'man echo' #use 'manual' pages to get info about the command 'echo' since 'echo --help' doesn't work
'echo -e "\n~~ Questionnaire ~~\n"' # '-e' flag enables escape characters like '\n' escape character for new line
'touch countdown.sh' #create a new file with touch
'echo $*' #will print whatever the arguments are when running the script for example './countdown.sh arg1 arg2 arg3' will print 'arg1 arg2 arg3'
'echo $1' #will print out the first argument given(there is no variable named '1')
'help' #type JUST 'help' in the bash shell and it will show you ALL available commands
'if' statements syntax (notice the fi at the end? fwhy?) :
  if [[ CONDITION ]]
  then
    STATEMENTS
  else
    STATEMENTS
  fi
Your program is expecting an integer to count down from as its argument. You can compare integers inside the brackets ([[ ... ]]) of your if with 
-eq (equal), -ne (not equal), -lt (less than), -le (less than or equal), -gt (greater than), -ge (greater than or equal).
Change your if condition to check if your first argument is less than 5.
  if [[ $1 -lt 5 ]]
  then
    echo true
  else
    echo false
  fi






























