Start : 21March2025

Once the virtual Linux machine is finished loading, start the CodeRoad extension by:
Clicking the "hamburger" menu near the top left of the VSCode window,
Going to the "View" menu,
Clicking on the "Command Palette" option,
and running the "CodeRoad: Start" command
'psql --username=freecodecamp --dbname=postgres' #login info
CREATE TABLE <table_name>(); #don't forget the ';' or '()' for the create table statement
ALTER TABLE <table_name> ADD COLUMN <column_name> <TYPE> <CONSTRAINTS>; #to add a column to a table, I just did this 2 days ago and already forgot
ALTER TABLE <table_name> ADD FOREIGN KEY(<column_name>) REFERENCES <referenced_table_name>(<referenced_column_name>); #set a foreign key
ALTER TABLE students ADD FOREIGN KEY(major_id) REFERENCES majors(major_id); # will set the foreign key in the 'students' table that will reference the 'majors' table with column 'majors_id'
ALTER TABLE majors_courses ADD FOREIGN KEY(course_id) REFERENCES courses(course_id); #will use the conjunction table add the foreign key from 'courses' table primary key 'course_id'
  before adding a foreign key to another table, it MUST exist as a primary or unique key in another table - you can combine 2 foreign keys to create a unique key -
  There's one thing missing. This table doesn't have a primary key. The data from courses.csv will go in this table. A single major will be in it multiple times, and same with a course. 
  So neither of them can be a primary key. But there will never be a row with the same two values as another row. So the two columns together, are unique. 
  You can create a composite primary key that uses more than one column as a unique pair like this: ALTER TABLE <table_name> ADD PRIMARY KEY(<column_name>, <column_name>); 
  Add a composite primary key to the table using the two columns.
ALTER TABLE majors_courses ADD PRIMARY KEY(major_id, course_id); #will create a unique key by combing 2 foreign keys in a conjunction table
INSERT INTO majors(major) VALUES('Database Administration'); #how to insert into a created table 'majors' in the column 'major' add the VALUES, this was just one column
INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Rhea', 'Kellems', 1, 2.5); #how to insert multiple columns at a time 
'insert_data.sh' #creating a script to insert data instead of typing it out like above for each student
'cat courses.csv >> insert_data.sh' #will take all the data from 'courses.csv' and add it to 'insert_data.sh'
#Instead of printing the content, you can pipe that output into a while loop so you can go through the rows one at a time. It looks like this:
  cat courses.csv | while read MAJOR COURSE
  do
    <STATEMENTS>
  done
'declare -p IFS' #the MAJOR variable is only being set to the first word. There's a default IFS variable in bash. IFS stands for "Internal Field Separator".
  #This variable is used to determine word boundaries. It defaults to spaces, tabs, and new lines. This is why the MAJOR variable was set to only the first word on each line from the data. 
'IFS=","' #Between the while and read commands, set the IFS to a comma like this:  Now, it should use the comma in the data to separate words instead of spaces. 
cat courses.csv | while IFS="," read MAJOR COURSE
do
  echo $MAJOR $COURSE
done
#also added courses to the same line 
It helps to plan out what you want to happen. For each loop, you will want to add the major to the database if it isn't in there yet. 
  Same for the course. Then add a row to the majors_courses table. Add these single line comments in your loop in this order: 
  get major_id, if not found, insert major, get new major_id, get course_id, if not found, insert course, get new course_id, insert into majors_courses.
You used the psql command to log in and interact with the database. You can use it to just run a single command and exit. Above your loop, add a PSQL variable that looks like this: 
'PSQL="psql -X --username=freecodecamp --dbname=students --no-align --tuples-only -c"' #This will allow you to query your database from your script. 
  The important parts are the username, dbname, and the -c flag that is for running a single command and exiting. The rest of the flags are for formatting.






















































