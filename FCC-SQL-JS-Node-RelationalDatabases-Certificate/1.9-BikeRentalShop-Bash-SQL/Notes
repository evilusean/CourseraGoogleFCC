Start : 28March2025

Clicking the "hamburger" menu near the top left of the VSCode window,
Going to the "View" menu,
Clicking on the "Command Palette" option,
and running the "CodeRoad: Start" command
'psql --username=freecodecamp --dbname=postgres' #login credentials
CREATE TABLE bikes(); #don't forget the '()' 
ALTER TABLE bikes ADD COLUMN available BOOLEAN NOT NULL DEFAULT TRUE; # will set the default value of the boolean to true
ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column); #adding a foreign key with referenced table
Make sure that you create the table before you reference it as a foreign key, like below, create the column first and THEN reference it with the foreign ID :
  ALTER TABLE rentals ADD COLUMN bike_id INT NOT NULL;
  ALTER TABLE rentals ADD FOREIGN KEY(bike_id) REFERENCES bikes(bike_id);
ALTER TABLE rentals ADD COLUMN date_rented DATE NOT NULL DEFAULT NOW(); #this will create a 'DATE' data(date-A)type that has a default time of 'NOW' - pretty useful
INSERT INTO table_name(column_name, column_name) VALUES(value, value); #add data manually syntax
FUNCTION() { <CODE TO RUN> } #basic syntax for a bash function
Case Statements (IF statements) Syntax for bash :
  case EXPRESSION in
    PATTERN) STATEMENTS ;;
    PATTERN) STATEMENTS ;;
    PATTERN) STATEMENTS ;;
    *) STATEMENTS ;;
  esac
If 'PATTERN' '1' is pressed it will return the function 'RENT_MENU'... etc - each '#)' represents a key input :
    case $MAIN_MENU_SELECTION in
      1) RENT_MENU ;;
      2) RETURN_MENU ;;
      3) EXIT ;;
      *) MAIN_MENU ;;
    esac
IF statement Syntax :
  if [[ <CONDITION> ]]
  then
    <STATEMENTS>
  fi
Use this to query a DB using select statements, prerequisite for sign in to use SELECT statements :
  PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"
Example Query using above info :
  AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")
Query the DB in postgreSQL looking for available bikes :
  UPDATE bikes SET available = false WHERE available = true;
If no bikes are found, return to main menu bash script IF statement '-z' flag  :
  if [[ -z $AVAILABLE_BIKES ]]
  then
    # send to main menu
  fi
Split Terminal (login + bikes table) - with the second split in projects folder running the script './bike-shop.sh'
Instead of directly printing the list, pipe the output into a while loop that reads each line. Here's how that looks:
  echo "$AVAILABLE_BIKES" | while read <VAR_1> <VAR_2> <VAR_3> <VAR_4> <VAR_5>
  do
    <STATEMENTS>
  done
  #It will read the first line of your AVAILABLE_BIKES variable into the five variables. Each variable being the next word in the line.
    Read each line into variables, BIKE_ID BAR TYPE BAR SIZE. In the <STATEMENTS> area, use echo to print the BIKE_ID, TYPE, and SIZE variables, in that order.
- ERROR - I took a break, and lost all progress - broke around 40% - need to start over - Took a few days to get caught up on Japanese, starting over on 02April2025
'[[ a =~ [0-9] ]]; echo $?' #use this to see if a user input a number, a regular expression to number check instead of a function, will check the letter 'a' and return a '1' for false
'if [[ ! $BIKE_ID_TO_RENT =~ ^[0-9]+$ ]]then MAIN_MENU "That is not a valid bike number."' #if the user types something that isnt a number to the variable '$BIKE_ID_TO_RENT' returns to MAIN_MENU














