Start : 07April2025
https://www.freecodecamp.org/learn/relational-database/learn-git-by-building-an-sql-reference-object/build-an-sql-reference-object
Clicking the "hamburger" menu near the top left of the VSCode window,
Going to the "View" menu,
Clicking on the "Command Palette" option,
and running the "CodeRoad: Start" command
'git init' #create a git repository in whatever directory you are currently in from the terminal, it will create a '.git' file in that directory
'git status' # to see the status of where you are. - if anything hasn't been added, git will know the file changes, you first 'add' then 'commit' 
'git checkout -b <new_branch>' #You can create and go to a new branch. The '-b' stands for "branch". Use that command to switch to a new branch named 'new_branch'
'git add <file_name>' #will add the new file before the git commit, First you need to add it to the staging area like this, will be a tracked file before the commit
'git commit -m "Initial commit"' #To commit them, you can use this to commit. The '-m' stands for "message". Often times, the first commit of a repo will have the message "Initial commit".
  Commit messages often start with 'fix:' or 'feat:', among others, to help people understand what your commit was for
'git log' #view commit history 
'git diff' #take a look at any unsaved changes 'q' to quit (will be alot, if you have a small terminal 'enter' to scroll down)
'git branch' #to see the current branches in your repo, you should try to avoid making changes to the 'main' branch of your repo, best practice
  you often don't want to make commits directly to the main branch of a repo. This branch will be for some new changes. 
  What you will do is make the changes and commits here, then merge them into the main branch when they are ready. 
'git branch branch_name' #branches often start with fix/ or feat/, among others, like commit messages, but they use a forward slash and can't contain spaces.
'git branch feat/add-create-table-reference' #Create a new branch named feat/add-create-table-reference
'git checkout branch_name' #syntax to switch branches with git
'git log --oneline' #will show a shortened git commit history, much shorter, each commit takes up a single line
'git merge <branchname>' #You can use git merge branch_name to bring changes from a branch into the branch you are currently on. Merge the changes from your feature branch into the main branch.
'git merge feat/add-create-table-reference' #You created the feat/add-create-table-reference branch, made a commit, and now it's ready to be added to the main branch.
  






































