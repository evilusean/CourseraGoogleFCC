Start : 12March2025

Each project is it's own DB to work with, going to seperate the notes into each one - then centralize here

12March2025 - Learn Bash by Building a Boilerplate ===========================================================================================================================================
The terminal allows you to send text commands to your computer that can manipulate the file system, run programs, automate tasks, and much more.
In this 170-lesson course, you will learn terminal commands by creating a website boilerplate using only the command line.
https://gitpod.io/workspaces # log in with github account
https://freecodecam-learnbashby-hx2fxtvj2i1.ws-us118.gitpod.io/
# after installing a few extensions in VS code, you can now run the gitpod project in VSCode on linux via SSH shell, 
had a bunch of files to start tutorial with in source control, commited them(super slow), still commiting, added 'TUTORIAL.md' since that seems to be the main file
It's telling me to find a 'package.json' and a 'node_modules' file that doesn't exist, also still commiting.. seems broke, but idk, new tool
-Clicking the "hamburger" menu near the top left of the VSCode window,
-Going to the "View" menu,
-Clicking on the "Command Palette" option,
-and running the "CodeRoad: Start" command
#figured it out, needed to run 'CodeRoad: Start' at the top, not commit, the commmit was broken because it was waiting for a message - that took an embarassing long time to figure out
`pwd` stands for "print working directory".
`ls` stands for "list"
  'ls -l' #you can add the '-l' long flag to show more details, like time created, and privileges
  'ls -a' # 'ls --all' shows all files, including hidden ones
`cd` stands for "change directory" 
'more <filename>' = You can see what's in a file with more <filename>. Use it to view what's in the package.json
'clear' = clear terminal
'cd ../..' = You can go back two folders with cd ../.. Each set of dots represents another folder level. 
'mkdir' = make directory
'touch <filename>' = create a new file
'cp <file> <destination>' = copies a (or multiple) files to <destination>
  'cp -r <file> <destination>' = will copy recursively, so you can copy folders instead of just files
'rm <filename>' = removes file
  'rm -r' = 'r' is recursive flag, be careful you can destroy your OS doing this
'mv <filename> <new_filename>' = mv stands for "move", it can rename or move something.
'find' = to find things or view a file tree. Enter find to view the file tree of the website folder to see all the files and folders within it.
'find <folder_name>' = to display the tree of a different folder.
'find -name <filename>' = search for a filename
'rmdir' = remove directory
'echo <text> >> <filename>' You can print to a file instead of the terminal with '>>'

14March2025 - Learn Relational Databases by Building a Mario Database ========================================================================================================================
https://www.freecodecamp.org/learn/relational-database/learn-relational-databases-by-building-a-mario-database/build-a-mario-database
View -> Command Pallet -> Start with 'CoadRoad : Start' 
'psql --username=freecodecamp --dbname=postgres' #login credentials for tutorial, after signing in, gives you a new prompt 'postgres=>' 
\l # list, while signed into the new postgreSQL db, by using the credentials above, will show a list of all databases
CREATE DATABASE database_name; #a way to create a new database - The capitalized words are keywords telling PostgreSQL what to do. The name of the database is the lowercase word. 
  Note that all commands need a semi-colon at the end. - the keywords are also CAP SENSITIVE, need to be capitalized 
  If you don't get a message after entering a command, it means it's incomplete and you likely forgot the semi-colon.
\c database_name #You can connect to a database by entering \c database_name. You need to connect to add information. , the prompt will change to 'database_name'
\d #display the tables of the currently connected to DB
  \d table_name #You can view more details about a table by adding the table name after the display command like this: \d table_name
CREATE TABLE table_name(); #similar to creating a database, Note that the parenthesis are needed for this one. It will create the table in the database you are connected to
ALTER TABLE table_name ADD COLUMN column_name DATATYPE; #Tables need columns to describe the data in them, yours doesn't have any yet. Here's an example of how to add one
ALTER TABLE table_name DROP COLUMN column_name; #will drop a column (delete it)
VARCHAR = A common data type is VARCHAR. It's a short string of characters. You need to give it a maximum length when using it like this: VARCHAR(30).
ALTER TABLE table_name RENAME COLUMN column_name TO new_name; # Here's how you can rename a column
INSERT INTO table_name(column_1, column_2) VALUES(value1, value2); # Rows are the actual data in the table. You can add one like this, strings must be in ' single quotes
SELECT columns FROM table_name;  #You can view the data in a table by querying it with the SELECT statement
SELECT * from table_name; #view all data from table_name, '*' = all
DELETE FROM table_name WHERE condition; #Here's an example of how to delete a row
DELETE FROM second_table WHERE username='Luigi'; #deletes from the 'second_table' the row where username='Luigi', all data on the row where username='Luigi' will be deleted, not just username
DROP TABLE table_name; #will drop(delete) a table from your database
ALTER DATABASE database_name RENAME TO new_database_name; #You can rename a database like this:
ALTER TABLE characters ADD COLUMN character_id SERIAL; #The SERIAL type will make your column an INT with a NOT NULL constraint, and automatically increment the integer when a new row is added.
ALTER TABLE characters ADD COLUMN name VARCHAR(30)NOT NULL; 
  #Add a column to characters called name. Give it a data type of VARCHAR(30), and a constraint of NOT NULL. Add a constraint by putting it right after the data type.
Adding rows one at a time is quite tedious. Here's an example of how you could have added the previous three rows at once:
  INSERT INTO characters(name, homeland, favorite_color)
  VALUES('Mario', 'Mushroom Kingdom', 'Red'),
  ('Luigi', 'Mushroom Kingdom', 'Green'),
  ('Peach', 'Mushroom Kingdom', 'Pink');
UPDATE table_name SET column_name=new_value WHERE condition; # You can change a value like this
SELECT columns FROM table_name ORDER BY column_name; #order columns by 
SELECT * FROM characters ORDER BY character_id; #will order all colums from characters by ascending character_id
ALTER TABLE table_name ADD PRIMARY KEY(column_name); #  add a primary key. It's a column that uniquely identifies each row in the table. Here's an example of how to set a PRIMARY KEY
  You should set a primary key on every table and there can only be one per table.
ALTER TABLE table_name DROP CONSTRAINT constraint_name; # It would have been better to use character_id for the primary key. Here's an example of how to drop a constraint:
ALTER TABLE more_info ADD COLUMN weight NUMERIC(4,1); # 
  Add a weight column. Give it a type of NUMERIC(4, 1). That data type is for decimals. NUMERIC(4, 1) has up to four digits and one of them has to be to the right of the decimal.
ALTER TABLE table_name ADD COLUMN column_name DATATYPE REFERENCES referenced_table_name(referenced_column_name); #
  To know what row is for a character, you need to set a foreign key so you can relate rows from this table to rows from your characters table. 
  Here's an example that creates a column as a foreign key:
ALTER TABLE more_info ADD COLUMN character_id INT REFERENCES characters(character_id); 
  #creates a new column named 'character_id' that references our unique identifier PRIMARY KEY on the 'characters' table from the column 'character_id' as a FOREIGN KEY on 'more_info' table
ALTER TABLE table_name ADD UNIQUE(column_name); #There's your foreign key at the bottom. These tables have a "one-to-one" relationship. 
  One row in the characters table will be related to exactly one row in more_info and vice versa. Enforce that by adding the UNIQUE constraint to your foreign key. Here's an example
ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL; #The column should also be NOT NULL since you don't want to have a row that is for nobody.
ALTER TABLE more_info ALTER COLUMN character_id SET NOT NULL; 
ALTER TABLE sounds ADD COLUMN filename VARCHAR(40) NOT NULL UNIQUE; #adding 2 constraints, 'not null' and 'unique'
ALTER TABLE table_name ADD COLUMN column_name DATATYPE CONSTRAINT REFERENCES referenced_table_name(referenced_column_name);
ALTER TABLE sounds ADD COLUMN character_id INT NOT NULL REFERENCES characters(character_id);
  # You want to use character_id as a foreign key again. 
  This will be a "one-to-many" relationship because one character will have many sounds, but no sound will have more than one character. Here's the example again:
INSERT INTO sounds(filename, character_id) VALUES('yay.wav', 3), ('woo-hoo.wav', 3); #inputting multiple audios at once
"Many-to-many" relationships usually use a junction table to link two tables together, forming two "one-to-many" relationships.
  Your characters and actions table will be linked using a junction table. Create a new table called character_actions. It will describe what actions each character can perform.
ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column);
ALTER TABLE character_actions ADD FOREIGN KEY(character_id) REFERENCES characters(character_id);
  #The foreign keys you set before were added when you created the column. You can set an existing column as a foreign key like this:
ALTER TABLE table_name ADD PRIMARY KEY(column1, column2);  #Every table should have a primary key. 
  #Your previous tables had a single column as a primary key. This one will be different. You can create a primary key from two columns, known as a composite primary key.
ALTER TABLE character_actions ADD PRIMARY KEY(character_id, action_id);
SELECT columns FROM table_1 FULL JOIN table_2 ON table_1.primary_key_column = table_2.foreign_key_column;
  You can see the character_id there so you just need to find the matching id in the characters table to find out who it's for. Enter a join command to see all the info from both tables
  Or... You added that as a foreign key, that means you can get all the data from both tables with a JOIN command: 
SELECT * FROM characters FULL JOIN more_info ON characters.character_id = more_info.character_id;
SELECT * FROM character_actions FULL JOIN characters ON character_actions.character_id = characters.character_id FULL JOIN actions ON character_actions.action_id = actions.action_id;
  SELECT columns FROM junction_table
  FULL JOIN table_1 ON junction_table.foreign_key_column = table_1.primary_key_column
  FULL JOIN table_2 ON junction_table.foreign_key_column = table_2.primary_key_column;
    #This shows the "one-to-many" relationship. You can see that some of the characters have more than one row because they have many sounds.
    How can you see all the info from the characters, actions, and character_actions tables? Here's an example that joins three tables:

 : 17March2025 - Building A Celestial Bodies PostgreSQL Database ========================================================================================================================
https://www.freecodecamp.org/learn/relational-database/build-a-celestial-bodies-database-project/build-a-celestial-bodies-database
Step 1: Complete the project
The project runs in a virtual machine, complete the user stories described in there and get all the tests to pass to finish step 1.
Important: After you pass all the project tests, save a dump of your database into a universe.sql file so you can complete step 
2. There will be instructions how to do that within the virtual machine.
Login to Gitpod with your GitHub account if you aren't already
Once the virtual Linux machine is finished loading, start the CodeRoad extension by:
Clicking the "hamburger" menu near the top left of the VSCode window,
Going to the "View" menu,
Clicking on the "Command Palette" option,
and running the "CodeRoad: Start" command
Follow the instructions in CodeRoad to complete the course
psql --username=freecodecamp --dbname=postgres #login 
pg_dump -cC --inserts -U freecodecamp universe > universe.sql #instead of finishing it in one multi hour session, how to 'dump eet' and save
InstructSeans :
Instructions
For this project, you need to log in to PostgreSQL with psql to create your database. Do that by entering psql --username=freecodecamp --dbname=postgres in the terminal. 
  Make all the tests below pass to complete the project. Be sure to get creative, and have fun!
Don't forget to connect to your database after you create it 😄
Here's some ideas for other column and table names: description, has_life, is_spherical, age_in_millions_of_years, planet_types, galaxy_types, distance_from_earth.
Notes:
If you leave your virtual machine, your database may not be saved. You can make a dump of it by entering pg_dump -cC --inserts -U freecodecamp universe > universe.sql in a bash terminal 
  (not the psql one). It will save the commands to rebuild your database in universe.sql. The file will be located where the command was entered. 
  If it's anything inside the project folder, the file will be saved in the VM. You can rebuild the database by entering psql -U postgres < universe.sql in a terminal where the .sql file is.
If you are saving your progress on freeCodeCamp.org, after getting all the tests to pass, follow the instructions above to save a dump of your database. 
  Save the universe.sql file in a public repository and submit the URL to it on freeCodeCamp.org.
Complete the tasks below : 
You should create a database named universe
  CREATE DATABASE universe;
Be sure to connect to your database with \c universe. Then, you should add tables named galaxy, star, planet, and moon
  \c universe
Each table should have a primary key
Each primary key should automatically increment
Each table should have a name column
You should use the INT data type for at least two columns that are not a primary or foreign key
You should use the NUMERIC data type at least once
You should use the TEXT data type at least once
You should use the BOOLEAN data type on at least two columns
  CREATE TABLE galaxy (
      galaxy_id SERIAL PRIMARY KEY,
      name VARCHAR(50) UNIQUE NOT NULL,
      age_in_billions_of_years NUMERIC(5,1),
      diameter_in_light_years INT NOT NULL,
      number_of_stars INT,
      is_spiral BOOLEAN NOT NULL,
      has_black_hole BOOLEAN
  );
Each "star" should have a foreign key that references one of the rows in galaxy
  CREATE TABLE star (
      star_id SERIAL PRIMARY KEY,
      name VARCHAR(50) UNIQUE NOT NULL,
      galaxy_id INT REFERENCES galaxy(galaxy_id) NOT NULL,
      temperature_in_kelvin INT,
      mass_solar_units NUMERIC(8,2) NOT NULL,
      is_binary BOOLEAN,
      has_planets BOOLEAN NOT NULL,
      spectral_type TEXT
  );
Each "planet" should have a foreign key that references one of the rows in star
  CREATE TABLE planet (
      planet_id SERIAL PRIMARY KEY,
      name VARCHAR(50) UNIQUE NOT NULL,
      star_id INT REFERENCES star(star_id) NOT NULL,
      orbital_period_in_days INT,
      diameter_in_km INT NOT NULL,
      has_atmosphere BOOLEAN,
      is_habitable BOOLEAN NOT NULL,
      description TEXT,
      distance_from_star_in_au NUMERIC(10,2)
  );
Each "moon" should have a foreign key that references one of the rows in planet
  CREATE TABLE moon (
      moon_id SERIAL PRIMARY KEY,
      name VARCHAR(50) UNIQUE NOT NULL,
      planet_id INT REFERENCES planet(planet_id) NOT NULL,
      diameter_in_km INT,
      distance_from_planet_in_km INT NOT NULL,
      is_spherical BOOLEAN,
      has_water BOOLEAN NOT NULL,
      surface_description TEXT
  );
Your database should have at least five tables
  CREATE TABLE asteroid (
      asteroid_id SERIAL PRIMARY KEY,
      name VARCHAR(50) UNIQUE NOT NULL,
      diameter_in_km INT NOT NULL,
      is_potentially_hazardous BOOLEAN,
      orbit_crosses_earth BOOLEAN NOT NULL,
      composition TEXT,
      discovery_year INT
  );
Each table should have at least three rows
  INSERT INTO galaxy (name, age_in_billions_of_years, diameter_in_light_years, number_of_stars, is_spiral, has_black_hole)
  VALUES 
      ('Milky Way', 13.6, 100000, 4000, TRUE, TRUE),
      ('Andromeda', 10.1, 220000, 1000, TRUE, TRUE),
      ('Triangulum', 10.0, 60000, 4000, TRUE, FALSE),
      ('Centaurus A', 13.3, 60000, 1000, FALSE, TRUE),
      ('Whirlpool', 0.4, 60000, 1000, TRUE, FALSE),
      ('Sombrero', 13.25, 50000, 1000, FALSE, TRUE);
The galaxy and star tables should each have at least six rows
  INSERT INTO galaxy (name, age_in_billions_of_years, diameter_in_light_years, number_of_stars, is_spiral, has_black_hole)
  VALUES 
      ('Milky Way 2', 13.6, 100000, 4000, TRUE, TRUE),
      ('Andromeda Galaxy', 10.1, 220000, 1000, TRUE, TRUE),
      ('Triangulum Galaxy', 10.0, 60000, 400, TRUE, FALSE),
      ('Centaurus A Galaxy', 13.3, 60000, 100, FALSE, TRUE),
      ('Whirlpool Galaxy', 0.4, 60000, 1000, TRUE, FALSE),
      ('Sombrero Galaxy', 13.25, 50000, 100, FALSE, TRUE);
  INSERT INTO star (name, galaxy_id, temperature_in_kelvin, mass_solar_units, is_binary, has_planets, spectral_type)
  VALUES 
      ('Sun', 1, 5778, 1.00, FALSE, TRUE, 'G2V'),
      ('Proxima Centauri', 1, 3042, 0.12, TRUE, TRUE, 'M5.5Ve'),
      ('Betelgeuse', 1, 3500, 11.60, FALSE, FALSE, 'M1-2Ia-Iab'),
      ('Sirius', 1, 9940, 2.02, TRUE, FALSE, 'A0mA1Va'),
      ('Alpha Centauri A', 1, 5790, 1.10, TRUE, TRUE, 'G2V'),
      ('Vega', 1, 9602, 2.10, FALSE, TRUE, 'A0Va');
The planet table should have at least 12 rows
  INSERT INTO planet (name, star_id, orbital_period_in_days, diameter_in_km, has_atmosphere, is_habitable, description, distance_from_star_in_au)
  VALUES 
      ('Earth', 1, 365, 12742, TRUE, TRUE, 'Blue planet with diverse ecosystems', 1.00),
      ('Mars', 1, 687, 6779, TRUE, FALSE, 'Red planet with thin atmosphere', 1.52),
      ('Venus', 1, 225, 12104, TRUE, FALSE, 'Hot planet with thick atmosphere', 0.72),
      ('Mercury', 1, 88, 4879, FALSE, FALSE, 'Small rocky planet closest to the Sun', 0.39),
      ('Jupiter', 1, 4333, 139820, TRUE, FALSE, 'Largest gas giant in our solar system', 5.20),
      ('Saturn', 1, 10759, 116460, TRUE, FALSE, 'Gas giant with prominent ring system', 9.58),
      ('Uranus', 1, 30687, 50724, TRUE, FALSE, 'Ice giant with tilted axis', 19.22),
      ('Neptune', 1, 60190, 49244, TRUE, FALSE, 'Blue ice giant with strong winds', 30.05),
      ('Proxima b', 2, 11, 12000, TRUE, TRUE, 'Potentially habitable exoplanet', 0.05),
      ('Kepler-186f', 6, 130, 11000, TRUE, TRUE, 'Earth-sized exoplanet in habitable zone', 0.40),
      ('HD 209458 b', 6, 3.5, 94000, TRUE, FALSE, 'Hot Jupiter exoplanet', 0.05),
      ('TRAPPIST-1e', 5, 6, 9200, TRUE, TRUE, 'Rocky exoplanet in habitable zone', 0.03);
The moon table should have at least 20 rows
  INSERT INTO moon (name, planet_id, diameter_in_km, distance_from_planet_in_km, is_spherical, has_water, surface_description)
  VALUES 
      ('Luna', 1, 3474, 384400, TRUE, TRUE, 'Cratered surface with maria'),
      ('Phobos', 2, 22, 9376, FALSE, FALSE, 'Irregular potato-shaped moon'),
      ('Deimos', 2, 12, 23463, FALSE, FALSE, 'Small irregular moon'),
      ('Io', 5, 3643, 421700, TRUE, FALSE, 'Volcanic active surface'),
      ('Europa', 5, 3122, 671034, TRUE, TRUE, 'Icy surface with subsurface ocean'),
      ('Ganymede', 5, 5268, 1070412, TRUE, TRUE, 'Largest moon in solar system'),
      ('Callisto', 5, 4821, 1882709, TRUE, TRUE, 'Heavily cratered surface'),
      ('Titan', 6, 5150, 1221870, TRUE, TRUE, 'Thick atmosphere and liquid methane'),
      ('Enceladus', 6, 504, 238020, TRUE, TRUE, 'Icy moon with water geysers'),
      ('Mimas', 6, 396, 185539, TRUE, FALSE, 'Death Star-like crater'),
      ('Tethys', 6, 1062, 294619, TRUE, TRUE, 'Large impact crater'),
      ('Dione', 6, 1123, 377396, TRUE, TRUE, 'Bright icy moon'),
      ('Rhea', 6, 1527, 527108, TRUE, TRUE, 'Second largest moon of Saturn'),
      ('Iapetus', 6, 1469, 3560820, TRUE, FALSE, 'Two-toned coloration'),
      ('Miranda', 7, 472, 129390, TRUE, FALSE, 'Varied and extreme surface features'),
      ('Ariel', 7, 1158, 190900, TRUE, TRUE, 'Bright surface with few craters'),
      ('Umbriel', 7, 1169, 266000, TRUE, FALSE, 'Dark surface with many craters'),
      ('Titania', 7, 1578, 436300, TRUE, TRUE, 'Largest moon of Uranus'),
      ('Oberon', 7, 1523, 583500, TRUE, TRUE, 'Heavily cratered surface'),
      ('Triton', 8, 2707, 354759, TRUE, TRUE, 'Retrograde orbit with nitrogen geysers');
Each table should have at least three columns
  INSERT INTO asteroid (name, diameter_in_km, is_potentially_hazardous, orbit_crosses_earth, composition, discovery_year)
  VALUES 
      ('Ceres', 939, FALSE, FALSE, 'Rocky with water ice', 1801),
      ('Vesta', 525, FALSE, FALSE, 'Basaltic surface', 1807),
      ('Apophis', 370, TRUE, TRUE, 'Silicate rock', 2004);
The galaxy, star, planet, and moon tables should each have at least five columns
At least two columns per table should not accept NULL values
At least one column from each table should be required to be UNIQUE
All columns named name should be of type VARCHAR
Each primary key column should follow the naming convention table_name_id. For example, the moon table should have a primary key column named moon_id
Each foreign key column should have the same name as the column it is referencing
'\q' to quit PostgreSQL terminal then type 'pg_dump -cC --inserts -U freecodecamp universe > universe.sql' to save the commands for tutorial






















































