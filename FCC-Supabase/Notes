Start : 05May2025

0:40 - Intro ===================================================================================================================================================================================
Supabase = Powerful Free Open Source Alternative to Google's Firebase (It's PostgreSQL) - Can build modern, secure webapps with SupaBase - Realtime DB's, API's, Supabase Auth(SDK)
  Create Tables(SQL, Policies, Row-Level Security), Notificiation System, Storage System, One Click BackEnd-As-A-Service(fast), Email Templates, User Management/Recover Password, 
  Read/Insert/Delete, Subscriptions, Relations(DB), Functions, Schemas, Storage, Logs, Extensions, Realtime, Edge-Functions, Webhooks

4:15 - Create A Project ========================================================================================================================================================================
https://supabase.com/
Free Tier = Totally free to start (up to 500mb of DB & 1GB of file storage) - 2GB of bandwith - 0Auth Providers - 50,000 monthly users - up to 50MB file uploads - 500K edge function invokes
PostgreSQL Edge Functions allow you to run an application on the backend 
'Instant API' - The Supabase Documentation generates the code you need for the front end with an SDK/API for each function you might want to use
Top Left Corner on Supabase.com -> Click 'Start Your Project'(or Sign In) -> Head to Dashboard -> Create an OrganizASean 
Create Project (Max of 2 Projects on Free Tier) -> Select an OrganizASean -> Create a DB PW(a5-Can be Generated + Copy and Paste) -> Region -> Create
Left Hand Side(after project is created) on Dashboard = Gives you a Table/SQL editor, DB, Auth, Storage, Edge Functions, Reports, Logs, API Docs, Settings
https://supabase.com/docs
SQL Editor = Scripts for 'Create Table'(in PostgreSQL) 'Add Column' and more, there are 'Quick Start' Scripts that will set up very difficult parts for you, like :
  'Slack Clone'(with Row Level Security & all policies required), 'To Do App',  'User Management Starter'
Authentication Providers = A supa long list(heh), with all the big names like google, github, email, apple, phone, linkedin*ptuh*, FB, twitter, twitch, etc, etc - this is supa useful(heh)
  Famous Last Words : "I'll just roll my own Auth"
Email Templates = For Signup, Invite, Magic Link, Change Email PW, Reset Password
Storage = Assets (Images, Documents, Whatever)
Edge Functions = Similar to Server Actions
Reports = Backend Reports for your 5 daily users
Logs = Not just for lumberjacks, saves all the stuff you need to run your API
API Docs = Tells you how to run the API

15:55 - Tables ==================================================================================================================================================================================
Supabase works with PostgreSQL - In PostgreSQL each DB has many tables - To work with tables in Supabase use the dashboard 'Table Editor' on the left hand side
When you first open the 'Table Editor' on the left hand side there is a 'schema' dropdown : Auth, extensions, graphql, public, realtime, storage, vault
'New Table' -> Select a 'Name', RLS(Row Level Security) is enabled by default, 'Policies' (needed to query data if using RLS), 'RealTime', 
  Each table is just a row and columns, 'Columns'(id, primary key, datatypes, all that good stuff), and 'Foreign Keys'
Best practice is to write in 'Snake Case' snake_case is a naming convention where words are separated by underscores and all letters are lowercase
'import data via spreadsheet' option as well, if you already have a table format figured out, you can import it into supabase
Create Table 'clients'
He changes the 'id' from an 'int8' to a 'uuid' (universally unique identifier = random numbers)
'created_at' is a 'timestamp' function 'now()' that will just take the datetime of when a client was created/added for the default value
add a column 'email' Type 'text' - since you do not want a client without an email click the 'settings' next to the column and select 'Is Nullable' and uncheck it, 
  check 'Is Unique' so you don't have different clients with the same email
When you create a table, it isn't final, you can insert/add rows and columns after it is created
You can 'Refresh' just a table, sort, filter, all using supabase instead of writing queries, you can use the GUI dashboard in your browser
Create Table 'orders' with 'id' = 'uuid', 'generate_random' + 'created_at' = 'timestamp', 'now()' + 'client_id' = 'uuid', <foreign key>, not nullable + 'price' = 'numeric' + 'address' = 'text'

30:40 - RLS(Row Level Security) =================================================================================================================================================================
RLS - Allows Usage of DB using policies, the user has to configure all the access by writing security policies to the tables, allows you to choose who writes and reads what rows on a table
To Create a new policy : 'Authentication' (left hand side) -> 'Policies' -> 'Create Policy' (right hand side of the table you want to create a policy on
  There are templates, like 'SELECT', 'INSERT', 'UPDATE', 'DELETE', and more - You can also create your own policies from scratch using SQL
https://supabase.com/docs/guides/database/postgres/row-level-security
'Target Roles' = Every user can have a role, like 'anon', 'authenticated', 'admin', etc - so you can restrict access and only give it to those who should have it
'CREATE POLICY "policy_name" ON public.clients FOR SELECT USING ( true ); #basic syntax for creating a policy that allows ANY and EVERY user to enable read access for all users
'create policy "policy_name" on "public"."clients" as PERMISSIVE for INSERT to authenticated with check (  true  ); #basic syntax for allowing only authenticated users to insert
'create policy "Enable update for users based on email" on "public"."clients" as PERMISSIVE for UPDATE to public using (  (select auth.jwt()) ->> 'email' = email with check ((select );'
  #basic syntax for creating a policy that allows update access for users based on the emails
'create policy "Enable delete for users based on user_id" on "public"."clients" as PERMISSIVE for DELETE to public using (  (select auth.uid()) = user_id);
  #basic syntax for a policy that allows delete based on the users id, will require them to have a 'user_id'(named exactly that) as a column on the table
*FUTURE SEAN* If you make a mistake, and mess up, your tables could be public, don't be '"that guy"'
The templates, actually allow you to change the access(auth) and type(INSERT vs DELETE), but keep the format, so you can change a 'Enable delete for users based on user_id' into a SELECT
RLS is used for securing your database and supabase instance 

44:50 - Authentication =========================================================================================================================================================================
Helps to log in/log out to session and then access whatever tables you have been given access to through security policies
'Authentication' (left hand menus) -> 'Manage' 'Users' -> 'Add User' (top right - sends an invitation email - this is not meant for production and rate limited)
You can 'Invite' a user to join through email in the top right corner - this email will ask you to confirm on localhost:3000
There is also an SQL script template called 'User Management'
Providers = Email/Phone/Apple/Google/LinkedIn/Github/FB/etc - read the docs to connect them, for each one you need to go on their app/website, and create something then connect it to the DB
-He had an app he built previously to test the login authentication, but didn't leave a link -
'project settings' -> 'API' -> 'Project API Key' = gives you access to your DB's api key/secret so you can use it in projects
if you log in with a 'Magic Link' you don't need any password, just send the email and click the URL, and you are connected to your DB
Read the API docs for adding signup/login/whatever features to your app
'import { supabase } from  "@/supabase"; #import into your app
If you use the supabase SDK, you save a tonne of time, and don't need to work on the authentication system for your apps

53:50 - User Management ========================================================================================================================================================================
with supabase you have several ways to signup/login users - each user has a unique ID 'user_id', reference it anywhere in your DB - you can then use this 'user_id' to fetch data from tables
You can also sign up with a phone/sms - or a third party OAuth

59:15 - Recover Password =======================================================================================================================================================================
It's very common to forget your password, supabase has a method to help you to recover your password - it will send them a link in their email and allow them to change it, and save the new PW
https://supabase.com/docs/reference/kotlin/auth-resetpasswordforemail
'supabase.auth.resetPasswordForEmail(email = "example@email.com")' # the code you need to reset an email, that's it, one line
In your app, you will need to create a recover page, add that one line of code, it triggers supabase to send the email, you don't have to set any of that up, 
You should add a simple function/grep that checks if an email is in the correct format or not 
It sends the user a log in link which then sends the user to a new password form and 'Update User' to save the new password to the DB - this should be a new route(/page) that changes the PW
'Authentication' (left hand side bar) -> 'Email Templates' -> 'Reset Password' = Allows you to customize each email sent to users for a password reset, using the new route(/path/page/url)
the development url will be different from the production url (localhost:3000) - future sean will need to change these

1:04:35 - E-mail Templates =====================================================================================================================================================================
send emails for the user to confirm when they sign up, major changes, subscriptions - templates allow you to choose what gets sent out to the users for each event
'Confirm Signup', 'Invite User', 'Magic Link', 'Change Email Address', 'Reset Password' are the 5 built in templates in supabase
You can insert your own html into the emails, also have a 'Message Variables' in the format of {{ .ConfirmationURL }} {{ .SiteURL }} {{ .Email }}, etc.
The defaults for each Template Email are all the same at the beginning, so change them up, run it through chatgpt for a standard email - it's done in html, so you can do inline styling(css)
Yopmail = A disposible Email, a fake temporary/anonymous email inbox, you can use it for testing your apps, or signing up for miscellaneous garbage, deleted every 24 hours : 
https://yopmail.com/en/ 

1:11:30 - URL config ============================================================================================================================================================================
When a user signs up through your frontend application, or gets invited to join, there is a redirection that is triggered from the button in the email
'Authentication' -> 'URL Configuration' 
When in production you can't use 'localhost:3000', allows you to change the 'Site URL' 
There is also 'Redirect URL's for post authentication, you can add a domain that will allow a list of domains to ineract with your authentication services for your project

1:13:55 - Read, Insert or Delete ================================================================================================================================================================
Supabase Core Feature - CRUD Elements inside your DB table -
'SQL Editor' = Where you can insert orders into your table(we previously created this table a while ago) - Use a script to insert dummy data/orders - then you can fetch on your app
'SQL Editor' (Left hand side menu) -> 'Create New Query' ('Create New Snippet' Supabase updated their UI) -> 'Rename Query' (It will be under on the left hand side under 'Private')
He just copied and pasted a list of fake orders - TLDR - I am not typing all that out
To allow his app to read the new dummy data input to the DB, he had to add a new policy for authenticated users to view the orders
'API Docs' = Will allow you to copy and paste code that will allow you to retrieve your data from your tables - There will be a section named 
'API Docs' -> 'Tables and Views' -> 'orders'(or whatever your table is named) = Supabase autogenerates orders and will allow you to copy and paste snippets that will select based on the 
  column you want to grab for your app, for example to get data for ID : 
  'let { data: orders, error } = await supabase #aync function
    .from('orders') #from table 'orders'
    .select('id')' #will select all the 'id' from the 'orders' table 
#Read all rows from the orders table, and return all :
  'let { data: orders, error } = await supabase
    .from('orders')
    .select('*')'
After you get the correct snippet from the API Docs, simply copy and paste it into your app, don't forget to 'import { supabase }'
To only grab the columns replace the '.select('*')' star with the columns you want to grab like '.select('id, name')'
If you scroll down on the API Docs, you can also implement pagination, so you aren't pulling ALL the rows, 
'.range(0, 9)' # will only grab the orders '0' to '9' 
How to filter your search results :
  // Filters
  .eq('column', 'Equal to')
  .gt('column', 'Greater than')
  .lt('column', 'Less than')
  .gte('column', 'Greater than or equal to')
  .lte('column', 'Less than or equal to')
  .like('column', '%CaseSensitive%')
  .ilike('column', '%CaseInsensitive%')
  .is('column', null)
  .in('column', ['Array', 'Values'])
  .neq('column', 'Not equal to')
  // Arrays
  .contains('array_column', ['array', 'contains'])
  .containedBy('array_column', ['contained', 'by'])
  // Logical operators
  .not('column', 'like', 'Negate filter')
  .or('some_column.eq.Some value, other_column.eq.Other value')
'.eq('name', 'Sean')' #will only pull the orders for Sean by filtering results with '.eq' equals
How to Insert A Row (also found in API Docs) : 
  'const { data, error } = await supabase
    .from('orders')
    .insert([
      { some_column: 'someValue', other_column: 'otherValue' },
    ])
    .select()'
Insert Many Rows :
  const { data, error } = await supabase
    .from('orders')
    .insert([
      { some_column: 'someValue' },
      { some_column: 'otherValue' },
    ])
    .select()
Update Matching Rows (the '.eq' equals the value you want to match and then replace/update, choose the column and value to update with '.update' :
  'const { data, error } = await supabase
    .from('orders')
    .update({ other_column: 'otherValue' })
    .eq('some_column', 'someValue')
    .select()'
Best practice seems to be to place all of these in 'try {} catch (error) {}' blocks
Make sure you update your policies for each new action you need the backend to do, because of RLS(Row level security) in the 'Authentication' Tab under 'Policies'
Delete matching rows (deletes a row that matches the '.eq' equals from the 'orders' table) :
  'const { error } = await supabase
    .from('orders')
    .delete()
    .eq('some_column', 'someValue')'

1:32:00 - Subscribe to Events ============================================================================================================================================================
In Supabase you can subscribe to the changes of a table - Why would you need to do that? for different apps - chat 'Subscribe' to the list of messages, return the new updated chats
Subscribe to all events(changes to the 'orders' table) :
  'const orders = supabase.channel('custom-all-channel')
    .on(
      'postgres_changes',
      { event: '*', schema: 'public', table: 'orders' },  #for any event that is public on the table 'orders'
      (payload) => {
        console.log('Change received!', payload) '# return that to your front end app
      }
    )
    .subscribe()' 
To Enable this feature, you need to enable 'Real Time' 
'Database' (left hand side menu) -> 'Replication' -> 'Supabase_realtime' -> Select what you want (Insert, Update, Delete, Truncate) + 'Source'

1:40:15 - Relations ======================================================================================================================================================================
'Database' (left hand side of dashboard) -> 'Tables' -> (Select table you want to create a relation/foreign key in) -> 'Edit'(click the column that you want to reference another table) -> 
  'Add Foreign Key Relation' -> (select the table you want to reference) -> (Select the column you want to reference) 
Read referenced tables (Foreign key) : 
  'let { data: orders, error } = await supabase
    .from('orders')
    .select(`
      some_column,
      other_table (
        foreign_key
      )
    `)' # fetch your 'orders' with another table 'clients' that references the foreign key, allows you to pull data from the 'clients' table and use it with your 'orders'
Enable policies 'Read Access on Clients' for RLS so that you can read the foreign keys 

1:45:15 - Functions ======================================================================================================================================================================
In postgres you can create 'Functions' which can be triggered on 'Insert', 'Update', 'Delete' and other steps on your application - 
  A set of SQL and precedural commands, such as declarations, assignments, loops, flow-of-control stored on the database server and can be involved using the SQL interface
'SQL Editor' (left hand side dash) -> 'Scripts' #write a custom script or use a template
'Database' -> 'Functions' -> 'Create New Function' (requires a name, schema(public, auth, etc) and a Return Type(void, int, etc), can add an argument, and definition is the script) 
'PLPGSQL' = These functions are written in a new language called 'plpgsql'
'const { data, error } = await supbase.rpc('increment', { row_id : '1 })....' # '.rpc' how to call a function in your app, will run the 'increment' function on the '1' row

1:52:00 - Triggers =======================================================================================================================================================================
'Triggers' = Not just for perpetually unhappy '"liberals"' - Database callback functions, which are automatically performed/invoked when a specific DB event occurs
'Database' (left hand side) -> ' Triggers'  -> 'Create a New Trigger' (name, conditions to fire trigger(insert, update, delete), table, events, trigger type,orientation, function) 
There will be a trigger for each schema, with a name, and table they act on - use snake_case by default - uses plpgsql language
-- Example: Update salary_log when salary is updated :
  create function update_salary_log()
  returns trigger
  language plpgsql
  as $$
  begin
    insert into salary_log(employee_id, old_salary, new_salary)
    values (new.id, old.salary, new.salary);
    return new;
  end;
  $$;
  create trigger salary_update_trigger
  after update on employees
  for each row
  execute function update_salary_log();
'Table Editor' -> (select a table) ->  'Schema' = you can see every schema attached to that table (like if you add auth to a table, it will have an auth schema, etc) 

2:00:50 - Schemas =========================================================================================================================================================================
'Schema' = a name container for database objects such as tables, views, sequences, indexes, functions - a way to organize the seperations and DB objects 
  A name space that contains one or more objects - 'Public' is the default schema - you can organize/seperate parts of your app by schemas - also used for managing permissions
'Table Editor' -> 'Schema' = Will allow you to select different schemas (Auth, public, etc) 
Permissions : Each client can have their own schema to keep their data seperate and organized, to manage and secure yuor database
'CREATE SCHEMA sales;' #basic syntax for creating a schema in supabase

2:05:00 - Storage =========================================================================================================================================================================
'Storage' (left hand side of dashboard) -> 'New Bucket' = That's it, that's all you need to store documents/images/whatever
Storage Bucket names bust be lowercase
'Public Buckets' = Anyone can read any object without authentication - when you upload a file, it has a URL, anyone with access to it can use it - even though it's public still uses RLS
'Create Folder' = You can organize your buckets - You can also sort by, view as
How to create policies for storage buckets : 
https://supabase.com/docs/guides/storage/security/access-control
  'ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;
  CREATE POLICY objects_select_policy ON storage.objects FOR SELECT
    USING (auth.role() = 'authenticated');' # how to create policies from the 'SQL EDITOR', will need one for each 'INSERT' 'DELETE' 'SELECT' 'UPDATE'
After adding the RLS, you can then use your buckets on your frontend to upload files on your backend like below :
  'const { data, error } = await supabase.storage.from('avatars').upload
  (`avatar_${Date.now()}.png`, file)
  showOverlay.value = false
  if (error) {
    console.log(error)
    return
    }
  imagUrl.value = URL.createObjectURL(file) #basic Syntax to upload a file using the supabase API/SDK on the frontend, avatar can be <changed>, just a placeholder
You can choose which bucket you upload to, who can do it, and in one block of code connect your front end to your backend with RLS

2:12:50 - Logs ============================================================================================================================================================================
'Logs' = Tracks all events that happen on the backend, subscriptions, connections, uploads, whatever, with timestamps
'Log' (Left hand side of dash) -> 'Logs Explorer' = Where you can query your logs, save your queries for future sean, and templates 
With logs you can debug your app, see why it failed, 'FATAL' errors are highlighted in redm you can sort by when a user logs in as an admin user for security with timestamps/most recent
You can also use logs for optimization, see which queries are taking the longest, most frequently used endpoints, most used features, 
'Refresh' is in realtime and shows you how many new events have happened since you last refreshed
Sort by Severity(only errors), 'No Errors', or Logs(all)
Has a chart for visual representation
You can download logs as a CSV file - Logs are only retained for a duration of 3 months depending on the plan that your project is on - Free(1 Day)/Pro(7 Days)/Enterprise(90Days)
  Future sean could just write a script to download them, but again, that's a future sean problem, step 1) escape canada, step 2) get paid
'Logs' -> 'Postgres' = Go here to debug, it will have your most recent logs, don't need to write a query

2:19:10 - Extensions =======================================================================================================================================================================
One of the best advantages of postgresql is that it's extensible, the user can add aditional functionalities to it through extensions
'Database' (left hand on dash) -> 'Extensions' = Where you can find the extensionsion, and enable them, contains GraphQL, JWT(json webtoken), PGCrypto(encryption), 
  PG_NET (Async HTTP), PG_Cron(cron job scheduler), etc, etc - Theres alot of them, most of them are made by the community of supa based boyz
https://supabase.com/docs/guides/database/extensions
You can search for extensions in the docs

2:24:40 - Realtime =========================================================================================================================================================================
'Realtime' = will allow you to get updates in real time on your app
'Database' -> 'Tables' -> 'Edit' (select table you want to enable) -> 'Enable Realtime' = Broadcast changes on the table to authorized subscribers
RLS = Don't forget to enable the RLS policies so it works

2:30:05 - Edge Functions ===================================================================================================================================================================
'Edge Functions' = Serverless Functions = server side Typescript functions, distributed globally at the edge - close to your users. 
  They can be used for listening to webhooks or integrating your Supabase project with third parties
Say you want to do a payment with stripe on your frontend app, would need to create an API between your client and stripe to trigger the payment intent, 
  normally to do this, you would create a node application to deploy somewhere, this is alot of work, you can get the same functionality out of an edge function
You can also use this edge function to create a bot for discord/twitter/telegram - Serverless and help you deploy very quickly
'Edge Functions' (left hand of dash) -> (Copy and paste code from here to your app)
https://supabase.com/docs/guides/functions
https://github.com/supabase/supabase/tree/master/examples/edge-functions/supabase/functions
Notable Edge Functions : OpenAI - OpenGraph - HuggingFace - AI Image Generation - Stripe - ElevenLabs(STT-TTS) - Github - Location - Send Email (Resend/SMTP) - Telegram Bot -  Redis 
Future Sean, projects on free tier will get auto-disabled if no use (I want to create 2 AI projects with supbase Edge functions) :  
  You can create a CRON job within each project that runs an arbitrary query once per week to prevent Supabase from pausing these projects
'supabase functions new hello-world' # terminal command, basic syntax to use in a terminal, will create a new supabase folder in your app, 'supabase/functions/hello-world'
  inside this is an 'index.ts' with a deno server that is imported, and commented out a way to invoke your function, 
After creating the edge function in your app, now you need to deploy it to your Supabase DB with :
'supabase login' #  terminal command, first login, generate a token using your admin from dash on by clicking the link it gives you
'supabase functions deploy helo-world --project-ref...' # terminal command, will be copy and pasted from the Edge Function on your dash, run this to deploy your new Edge Function
After doing all of the above, you can now see your new edge function in your dashboard on Supabase
You will need to be authorized to use your function or disable this feature by changing the Edge Function Settings for your new function and disabling 'Enforce JWT Verification'(unsafe)
You can also use an edge function to return / fetch all posts 
'supabase link --project-ref <password> -p' # terminal command, take the password you were given on project creation and use that to link to your DB
'supabase secrets set --env_file ./supabase/functions/hello-world/.env' #  terminal command, Also create a '.env' file in your function folder to authenticate aswell
View edge functions as a deno server that you can call at any time to do a specific operation, this deno server can do anything a backend could do, stripe/api/call/async/etc

2:44:15 - Webhooks =========================================================================================================================================================================
'Webhooks' = a way for 2 API's to connect together and exchange some data to communicate everytime there is an event
  can be used to trigger serverless fimctopms pr semd reqiests to an HTTP endpoint
'Database' (left hand of dash) -> 'Webhooks' -> 'Enable Webhooks' -> 'Create Webhooks' 
Create an endpoint with an API on your front end - you can also call a supabase edge function or use an http request for your webhook, will trigger on certain conditions you choose

2:49:55 - Self-host or Local dev ===========================================================================================================================================================
You can self host a supabase instance - you can run supabase locally,
'brew install supabase/tap/supabase' # terminal command, will install supabase locally on any soydevs macbook 
'supabase login' # terminal command, login with the generated token
'mkdir <project>' # create a directory
'supabase init' # terminal command, initialize the supabase instance
'supabase start' # terminal command, will start supabase on your local machine, you will need docker 
'studio url' (after typing 'supabase start' and starting your docker instance of supabase) -> Dashboard (same as the one one supabase.com)
some things are missing, but most of the functionality is intact, this is pretty cool, future sean might want this after building a homelab that does not sleep 
In order for your app backend to work, you will need to keep it running 24/7 - or else API/auth/etc will not work, it's almost easier to spend the 25$ for pro instead of self hosting
After running a project on local, you can always migrate to the supabase cloud, check the docs for migrating a local
https://supabase.com/docs/guides/deployment/database-migrations













