Start : 05May2025

0:40 - Intro ===================================================================================================================================================================================
Supabase = Powerful Free Open Source Alternative to Google's Firebase (It's PostgreSQL) - Can build modern, secure webapps with SupaBase - Realtime DB's, API's, Supabase Auth(SDK)
  Create Tables(SQL, Policies, Row-Level Security), Notificiation System, Storage System, One Click BackEnd-As-A-Service(fast), Email Templates, User Management/Recover Password, 
  Read/Insert/Delete, Subscriptions, Relations(DB), Functions, Schemas, Storage, Logs, Extensions, Realtime, Edge-Functions, Webhooks

4:15 - Create A Project ========================================================================================================================================================================
https://supabase.com/
Free Tier = Totally free to start (up to 500mb of DB & 1GB of file storage) - 2GB of bandwith - 0Auth Providers - 50,000 monthly users - up to 50MB file uploads - 500K edge function invokes
PostgreSQL Edge Functions allow you to run an application on the backend 
'Instant API' - The Supabase Documentation generates the code you need for the front end with an SDK/API for each function you might want to use
Top Left Corner on Supabase.com -> Click 'Start Your Project'(or Sign In) -> Head to Dashboard -> Create an OrganizASean 
Create Project (Max of 2 Projects on Free Tier) -> Select an OrganizASean -> Create a DB PW(a5-Can be Generated + Copy and Paste) -> Region -> Create
Left Hand Side(after project is created) on Dashboard = Gives you a Table/SQL editor, DB, Auth, Storage, Edge Functions, Reports, Logs, API Docs, Settings
https://supabase.com/docs
SQL Editor = Scripts for 'Create Table'(in PostgreSQL) 'Add Column' and more, there are 'Quick Start' Scripts that will set up very difficult parts for you, like :
  'Slack Clone'(with Row Level Security & all policies required), 'To Do App',  'User Management Starter'
Authentication Providers = A supa long list(heh), with all the big names like google, github, email, apple, phone, linkedin*ptuh*, FB, twitter, twitch, etc, etc - this is supa useful(heh)
  Famous Last Words : "I'll just roll my own Auth"
Email Templates = For Signup, Invite, Magic Link, Change Email PW, Reset Password
Storage = Assets (Images, Documents, Whatever)
Edge Functions = Similar to Server Actions
Reports = Backend Reports for your 5 daily users
Logs = Not just for lumberjacks, saves all the stuff you need to run your API
API Docs = Tells you how to run the API

15:55 - Tables ==================================================================================================================================================================================
Supabase works with PostgreSQL - In PostgreSQL each DB has many tables - To work with tables in Supabase use the dashboard 'Table Editor' on the left hand side
When you first open the 'Table Editor' on the left hand side there is a 'schema' dropdown : Auth, extensions, graphql, public, realtime, storage, vault
'New Table' -> Select a 'Name', RLS(Row Level Security) is enabled by default, 'Policies' (needed to query data if using RLS), 'RealTime', 
  Each table is just a row and columns, 'Columns'(id, primary key, datatypes, all that good stuff), and 'Foreign Keys'
Best practice is to write in 'Snake Case' snake_case is a naming convention where words are separated by underscores and all letters are lowercase
'import data via spreadsheet' option as well, if you already have a table format figured out, you can import it into supabase
Create Table 'clients'
He changes the 'id' from an 'int8' to a 'uuid' (universally unique identifier = random numbers)
'created_at' is a 'timestamp' function 'now()' that will just take the datetime of when a client was created/added for the default value
add a column 'email' Type 'text' - since you do not want a client without an email click the 'settings' next to the column and select 'Is Nullable' and uncheck it, 
  check 'Is Unique' so you don't have different clients with the same email
When you create a table, it isn't final, you can insert/add rows and columns after it is created
You can 'Refresh' just a table, sort, filter, all using supabase instead of writing queries, you can use the GUI dashboard in your browser
Create Table 'orders' with 'id' = 'uuid', 'generate_random' + 'created_at' = 'timestamp', 'now()' + 'client_id' = 'uuid', <foreign key>, not nullable + 'price' = 'numeric' + 'address' = 'text'

30:40 - RLS(Row Level Security) =================================================================================================================================================================
RLS - Allows Usage of DB using policies, the user has to configure all the access by writing security policies to the tables, allows you to choose who writes and reads what rows on a table
To Create a new policy : 'Authentication' (left hand side) -> 'Policies' -> 'Create Policy' (right hand side of the table you want to create a policy on
  There are templates, like 'SELECT', 'INSERT', 'UPDATE', 'DELETE', and more - You can also create your own policies from scratch using SQL
https://supabase.com/docs/guides/database/postgres/row-level-security
'Target Roles' = Every user can have a role, like 'anon', 'authenticated', 'admin', etc - so you can restrict access and only give it to those who should have it
'CREATE POLICY "policy_name" ON public.clients FOR SELECT USING ( true ); #basic syntax for creating a policy that allows ANY and EVERY user to enable read access for all users
'create policy "policy_name" on "public"."clients" as PERMISSIVE for INSERT to authenticated with check (  true  ); #basic syntax for allowing only authenticated users to insert
'create policy "Enable update for users based on email" on "public"."clients" as PERMISSIVE for UPDATE to public using (  (select auth.jwt()) ->> 'email' = email with check ((select );'
  #basic syntax for creating a policy that allows update access for users based on the emails
'create policy "Enable delete for users based on user_id" on "public"."clients" as PERMISSIVE for DELETE to public using (  (select auth.uid()) = user_id);
  #basic syntax for a policy that allows delete based on the users id, will require them to have a 'user_id'(named exactly that) as a column on the table
*FUTURE SEAN* If you make a mistake, and mess up, your tables could be public, don't be '"that guy"'
The templates, actually allow you to change the access(auth) and type(INSERT vs DELETE), but keep the format, so you can change a 'Enable delete for users based on user_id' into a SELECT
RLS is used for securing your database and supabase instance 

44:50 - Authentication =========================================================================================================================================================================
Helps to log in/log out to session and then access whatever tables you have been given access to through security policies
'Authentication' (left hand menus) -> 'Manage' 'Users' -> 'Add User' (top right - sends an invitation email - this is not meant for production and rate limited)
You can 'Invite' a user to join through email in the top right corner - this email will ask you to confirm on localhost:3000
There is also an SQL script template called 'User Management'
Providers = Email/Phone/Apple/Google/LinkedIn/Github/FB/etc - read the docs to connect them, for each one you need to go on their app/website, and create something then connect it to the DB
-He had an app he built previously to test the login authentication, but didn't leave a link -
'project settings' -> 'API' -> 'Project API Key' = gives you access to your DB's api key/secret so you can use it in projects
if you log in with a 'Magic Link' you don't need any password, just send the email and click the URL, and you are connected to your DB
Read the API docs for adding signup/login/whatever features to your app
'import { supabase } from  "@/supabase"; #import into your app
If you use the supabase SDK, you save a tonne of time, and don't need to work on the authentication system for your apps

53:50 - User Management ========================================================================================================================================================================
with supabase you have several ways to signup/login users - each user has a unique ID 'user_id', reference it anywhere in your DB - you can then use this 'user_id' to fetch data from tables
You can also sign up with a phone/sms - or a third party OAuth

59:15 - Recover Password =======================================================================================================================================================================
It's very common to forget your password, supabase has a method to help you to recover your password - it will send them a link in their email and allow them to change it, and save the new PW
https://supabase.com/docs/reference/kotlin/auth-resetpasswordforemail
'supabase.auth.resetPasswordForEmail(email = "example@email.com")' # the code you need to reset an email, that's it, one line
In your app, you will need to create a recover page, add that one line of code, it triggers supabase to send the email, you don't have to set any of that up, 
You should add a simple function/grep that checks if an email is in the correct format or not 
It sends the user a log in link which then sends the user to a new password form and 'Update User' to save the new password to the DB - this should be a new route(/page) that changes the PW
'Authentication' (left hand side bar) -> 'Email Templates' -> 'Reset Password' = Allows you to customize each email sent to users for a password reset, using the new route(/path/page/url)
the development url will be different from the production url (localhost:3000) - future sean will need to change these

1:04:35 - E-mail Templates =====================================================================================================================================================================
send emails for the user to confirm when they sign up, major changes, subscriptions - templates allow you to choose what gets sent out to the users for each event
'Confirm Signup', 'Invite User', 'Magic Link', 'Change Email Address', 'Reset Password' are the 5 built in templates in supabase
You can insert your own html into the emails, also have a 'Message Variables' in the format of {{ .ConfirmationURL }} {{ .SiteURL }} {{ .Email }}, etc.
The defaults for each Template Email are all the same at the beginning, so change them up, run it through chatgpt for a standard email - it's done in html, so you can do inline styling(css)
Yopmail = A disposible Email, a fake temporary/anonymous email inbox, you can use it for testing your apps, or signing up for miscellaneous garbage, deleted every 24 hours : 
https://yopmail.com/en/ 

1:11:30 - URL config ============================================================================================================================================================================



























