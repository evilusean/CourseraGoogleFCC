Start:26Jun2024
End: 29Jun2024

1 Basics = 2:00 ======================================================================================================================================================================================================================
Three.JS transforms code into awesome visual experiences - 
Download Starter Template - https://github.com/bobbyroe/getting-started-with-threejs
Download VS Code / Download 'Live Server' Extension for VSCode - 
  Start 'Live Server' - Bottom Right Hand Corner of VSCode 'Go Live' 
<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.161.0/build/three.module.js",
          "jsm/": "https://cdn.jsdelivr.net/npm/three@0.161.0/examples/jsm/"
        }
			}
#Above is an import map, a convenient way to define your JS import paths, first time I've seen this. 
ThreeJS needs 3 things for a scene: A renderer, A camera, and an Object
import * as THREE from "three"; #first import Three.js
const w = window.innerWidth; #get width 
const h = window.innerHeight; #get height
const renderer = new THREE.WebGLRenderer({ antialias: true}) #create a renderer
renderer.setSize(w, h); #get window size
document.body.appendChild(renderer.domElement); #dom=html page, will append the canvas element to the dom, this is the easier way 
#Another way to do above, is to create a canvas element inside your HTML and use that to set up the render
const camera = new THREE.PerspectiveCamera(75, w / h, 0.1, 1000); #next create a camera, requires 4 things to make a perspective camera: field of view(75 degrees), an aspect(width / height), a near(0.1), and a far(1000)
camera.position.z = 2; #set the position at '2' on the Z axis
const scene = new THREE.Scene(); #next, set the scene, so above, you can see we have 'Renderer' 'Camera' and we are missing the object..
#The above code will always need to be setup in some manner, no matter what you are doing, so might as well git good at it, that's the core of ThreeJS
renderer.render(scene, camera); #will render our first scene.. a blank black screen.. Success!
#Primitives = Built in ThreeJS Geometry(Euclidean Vs Platonic shapes), below is one
const geo = new THREE.IcosahedronGeometry(1.0, 2); #1.0 = size, 2 = detail
const mat = new THREE.MeshBasicMaterial({ color: 0xccff }) #how to add a mesh - basic material is just a color, only requires what color you want as an arg
const mesh = new THREE.Mesh(geo. mat); #combine the geometry and mesh into one object
scene.add(mesh) #add the newly created object to our previously built scene
#all of the above code to create a blue squareish ball on screen, requires a 'Renderer' 'Camera' and 'Object' and each object requires a 'Geometry' and 'Mesh' - Also need a 'Viewport'(aspect ratio) for the canvas/scene

#next we are creating an animation, wrapping the render call in a function, you can repeatedly render
function animate(t = 0) {
    requestAnimationFrame(animate); #how it animates, through an API 'requestAnimationFrame(animate)' pass name of function as an argument, by default will be called every second
    mesh.scale.setScalar(Math.cos(t * 0.001) + 1.0) //Will cause the orb to shrink and expand over and over again
    renderer.render(scene, camera);
}
animate(); #ensure you call the function, to start the animation

'MeshBasicMaterial' does not interact with lights, 'MeshStandardMaterial' does
const hemiLight = new THREE.HemisphereLight(0xffffff, 0x000000); #will add a light (White = top , Black = bottom)
const mat = new THREE.MeshBasicMaterial({ flatShading: true, }) #wiill remove smooth shading and show a sphere object, you can reduce or increase the amounts of faces by changing below
const geo = new THREE.IcosahedronGeometry(1.0, 2); #change the '2' to add or remove faces from the object
const wireMat = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true }); #wireframe: true will create a wire mesh, that is solid lines along the faces/vertices, which are see through
mesh.add(wireMesh); #notice how we used 'mesh.add' instead of 'scene.add' this will add it to our previously named mesh variable(contains a geo and a material) as a child, and will create a wire overlay over the old mesh
wireMesh.scale.setScalar(1.01); #will make the wire mesh slightly larger than the old mesh to avoid clipping/flickering, by scaling it up slightly
const hemiLight = new THREE.HemisphereLight(0x0099ff, 0xaa5500); #changed the colour of the white geo by adding a blue light on top and orange light on bottom, aesthetic

import { OrbitControls } from "jsm/controls/OrbitControls.js"; #Will allow you to orbit around 
const controls = new OrbitControls(camera, renderer.domElement); #will allow you to orbit around with mouse, scroll in with middle

2 Earth = 19:00 =========================================================================================================================================================================================================================
Earth Moon Meshes/Textures:
https://planetpixelemporium.com/earth.html

I will just be explaining what each part does, what I downloaded was already finished, don't need to build much, gonna be doing a moon project here next after this tut, so should pay attention
const geometry = new THREE.IcosahedronGeometry(1, 12); #for a round shape, use 1 unit and a detail of '12'
const loader = new THREE.TextureLoader(); //In order to use a texture(picture) we need to create a loader so we can apply it to the mesh
  earthMesh.rotation.y += 0.002; //Starts the earth rotation

const earthGroup = new THREE.Group(); //instead of adding to the scene, add to the earthgroup, so you can change all with one 
earthGroup.rotation.z = -23.4 * Math.PI / 180; //Earth tilt
scene.add(earthGroup); //add the earthgroup to the scene

const geometry = new THREE.IcosahedronGeometry(1, 12); //1 unit, with a detail of 12(faces/resolution)
const material = new THREE.MeshPhongMaterial({
  map: loader.load("./textures/00_earthmap1k.jpg"), //will load the earth textures we downloaded
  specularMap: loader.load("./textures/02_earthspec1k.jpg"), //uses the loader we previously created 
  bumpMap: loader.load("./textures/01_earthbump1k.jpg"),
  bumpScale: 0.04,
});
// material.map.colorSpace = THREE.SRGBColorSpace;
const earthMesh = new THREE.Mesh(geometry, material);
earthGroup.add(earthMesh); // Adds to the earthGroup we created above, instead of adding to scene, so we add the earthgroup to the scene, so if we change one, we can change them all

3 Fly Through A WireFrame WormHole = 38:30 ==============================================================================================================================================================================================
WireFrame WormHole AEffect - 
Spline = Representation of a line in 3D space tp create geometry
Mostly a finished work, took notes from tut and put them in with the 'index.js' explaining line by line what each part of the code does for future reference

4 Transition Effect = 1:00:00 ===========================================================================================================================================================================================================
Transition effect = Features 2 different scenes that are just smoothly transitioned between with different transitions, appears that there are more scenes, with colors randomized, wire mesh -> shell material 
This one is largely completed as well, just going to take notes/comments on that 'index.html' explaining what each line does, for future sean

5 Add Physics to Three.js with Rapier = 1:08:30 =========================================================================================================================================================================================
Rapier Physics Enginer = Fast Stable Web Assembly Module + ThreeJS - with a few lines of JS, dynamic collisions and forces to ThreeJS Scenes
Foundational setup to linking collisional bodies with 3D Objects
Process = Start Simple - ThreeJS scene with a single object, add more geometry, wire up mouse controls, add alight to the mouse, add rapier physics enginer, add post processing(the bloom effect)
Going to take notes in the files
