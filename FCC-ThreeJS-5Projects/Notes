Start:26Jun2024
End:

1 Basics = 2:00 ======================================================================================================================================================================================================================
Three.JS transforms code into awesome visual experiences - 
Download Starter Template - https://github.com/bobbyroe/getting-started-with-threejs
Download VS Code / Download 'Live Server' Extension for VSCode - 
  Start 'Live Server' - Bottom Right Hand Corner of VSCode 'Go Live' 
<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.161.0/build/three.module.js",
          "jsm/": "https://cdn.jsdelivr.net/npm/three@0.161.0/examples/jsm/"
        }
			}
#Above is an import map, a convenient way to define your JS import paths, first time I've seen this. 
ThreeJS needs 3 things for a scene: A renderer, A camera, and an Object
import * as THREE from "three"; #first import Three.js
const w = window.innerWidth; #get width 
const h = window.innerHeight; #get height
const renderer = new THREE.WebGLRenderer({ antialias: true}) #create a renderer
renderer.setSize(w, h); #get window size
document.body.appendChild(renderer.domElement); #dom=html page, will append the canvas element to the dom, this is the easier way 
#Another way to do above, is to create a canvas element inside your HTML and use that to set up the render
const camera = new THREE.PerspectiveCamera(75, w / h, 0.1, 1000); #next create a camera, requires 4 things to make a perspective camera: field of view(75 degrees), an aspect(width / height), a near(0.1), and a far(1000)
camera.position.z = 2; #set the position at '2' on the Z axis
const scene = new THREE.Scene(); #next, set the scene, so above, you can see we have 'Renderer' 'Camera' and we are missing the object..
#The above code will always need to be setup in some manner, no matter what you are doing, so might as well git good at it, that's the core of ThreeJS
renderer.render(scene, camera); #will render our first scene.. a blank black screen.. Success!
#Primitives = Built in ThreeJS Geometry(Euclidean shapes), below is one
const geo = new THREE.IcosahedronGeometry(1.0, 2); #1.0 = size, 2 = detail
const mat = new THREE.MeshBasicMaterial({ color: 0xccff }) #how to add a mesh - basic material is just a color, only requires what color you want as an arg
const mesh = new THREE.Mesh(geo. mat); #combine the geometry and mesh into one object
scene.add(mesh) #add the newly created object to our previously built scene
#all of the above code to create a blue squareish ball on screen, requires a 'Renderer' 'Camera' and 'Object' and each object requires a 'Geometry' and 'Mesh' - Also need a 'Viewport'(aspect ratio) for the canvas/scene

#next we are creating an animation, wrapping the render call in a function, you can repeatedly render
function animate(t = 0) {
    requestAnimationFrame(animate); #how it animates, through an API 'requestAnimationFrame(animate)' pass name of function as an argument, by default will be called every second
    mesh.scale.setScalar(Math.cos(t * 0.001) + 1.0) //Will cause the orb to shrink and expand over and over again
    renderer.render(scene, camera);
}
animate(); #ensure you call the function, to start the animation

'MeshBasicMaterial' does not interact with lights, 'MeshStandardMaterial' does
const hemiLight = new THREE.HemisphereLight(0xffffff, 0x000000); #will add a light (White = top , Black = bottom)
const mat = new THREE.MeshBasicMaterial({ flatShading: true, }) #wiill remove smooth shading and show a sphere object, you can reduce or increase the amounts of faces by changing below
const geo = new THREE.IcosahedronGeometry(1.0, 2); #change the '2' to add or remove faces from the object















