npx @ create-next-app@13.4.13 #creates app in selected folder(run in terminal) uses version 13.4.13, so we don't have any compatibility problems and spend 4 hours debugging every 15 mins(cough... laravel)
added some vscode extensions: ES7 React/Redux/React Native snippets by dsznajder + ESLint + Prettier(formats code on save) + tailwind CSS intelliSense
ctrl+shift+P to open settings menu, go to 'Preferences Open Settings(UI)' and search 'formatter', change Default Formatter to prettier, and check format on save

npm run dev in terminal to start project
start off in global.css, delete all except @tailwind imports
go to page.js, remove everything, now trying out the snippet libary
'rafce' #type rafce to boilerplate a default page
ctrl+shift+L = highlight some text, press ctrl+shift+L and it will highlight all instances of that text, can change all at once
rename all instances of 'page' to 'dashboard'
create new folder in src / app called 'TicketPage', inside is 'page.jsx', also renamed our src / app 'page.js' to 'page.jsx'
Routing in react can work through how you laid out your folder structure
const TicketPage = () => {
  return <div>TicketPage</div>;
};

export default TicketPage;
#will automatically route http://localhost:3000/TicketPage to your 'page.jsx' inside of your 'TicketPage' folder, very cool
created a new folder inside 'TicketPage' folder called [id], moved our 'page.jsx' inside that folder, and added params 
const TicketPage = ({ params }) => {
  return <div>TicketPage {params.id}</div>;
};

export default TicketPage;
#using our new [id] folder, will allow us to type in http://localhost:3000/TicketPage/12345 and it will return a page with 'TicketPage 12345' based on whatever id we input, very nice

if you don't want routing enabled, simply wrap your folder in (parenthesis), such as for our (components) folder we created, it won't set up routing for that
created Nav.jsx in our (components) folder, 'rafce' will create boilerplate code for it
==========================================================================ERROR==========================================================================================================================================
How to fix eslint red error messages:
https://stackoverflow.com/questions/68163385/parsing-error-cannot-find-module-next-babel
#create in root: '.babel.rc' file
{
  "presets": ["next/babel"],
  "plugins": []
}
#add to 'eslint.rc.json' file
{
  "extends": ["next/babel", "next/core-web-vitals"]
}

13:00====================================================================================================================================================================================================================
layout.js #import { Inter } from 'next/font/google' allows you to use google fonts directly, contains some meta data title/descriptsean
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
#default layout.js, it displays each 'page' as children, if you want <Nav /> to show up in every page, you can add it here, like below, don't foget to import, now it will show up on every page of project
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Nav />
        {children}
      </body>
    </html>
  );
}
15:00====================================================================================================================================================================================================================
we are going to install some libraries for our project, 
npm install @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome #installs fortawesome/fontawesome icons for our project
'tailwind.config.js' # allows us to set up our default colors, use standardized color names we can create, and we can change them later in our project if we want
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        nav: "#18222f",
        page: "#2b3441",
        card: "#47566a",
        "card-hover": "#4f5e74",
        "default-text": "#f1f3f5",
        "blue-accent": "#0084d4",
        "blue-accent-hover": "#009fff",
      },
    },
  },
  plugins: [],
};

18:00===================================================================================================================================================================================================================
inside our 'layout.js' file we need to fix a few things, when you are loading in icons sometimes they load in very large, and redefine back down, to fix that we can, import and sub in CSS (add below):
import { config } from "@fortawesome/fontawesome-svg-core";
import "@fortawesome/fontawesome-svg-core/styles.css";
config.autoAddCss = false;

21:00===================================================================================================================================================================================================================
<div className="flex-grow overflow-y-auto bg-page text-default-text"> #flex-grow = expands the main page to fill up the whole page, bg-page/text-default-text  will use the preset we created in our tailwind.config.js above
<nav className="flex justify-between bg-nav p-4"> #justify-between = will split content horizontally, instead of flex-col which stacks content

31:00===================================================================================================================================================================================================================





















































