npx @ create-next-app@13.4.13 #creates app in selected folder(run in terminal) uses version 13.4.13, so we don't have any compatibility problems and spend 4 hours debugging every 15 mins(cough... laravel)
added some vscode extensions: ES7 React/Redux/React Native snippets by dsznajder + ESLint + Prettier(formats code on save) + tailwind CSS intelliSense
ctrl+shift+P to open settings menu, go to 'Preferences Open Settings(UI)' and search 'formatter', change Default Formatter to prettier, and check format on save

npm run dev in terminal to start project
start off in global.css, delete all except @tailwind imports
go to page.js, remove everything, now trying out the snippet libary
'rafce' #type rafce to boilerplate a default page
ctrl+shift+L = highlight some text, press ctrl+shift+L and it will highlight all instances of that text, can change all at once
rename all instances of 'page' to 'dashboard'
create new folder in src / app called 'TicketPage', inside is 'page.jsx', also renamed our src / app 'page.js' to 'page.jsx'
Routing in react can work through how you laid out your folder structure
const TicketPage = () => {
  return <div>TicketPage</div>;
};

export default TicketPage;
#will automatically route http://localhost:3000/TicketPage to your 'page.jsx' inside of your 'TicketPage' folder, very cool
created a new folder inside 'TicketPage' folder called [id], moved our 'page.jsx' inside that folder, and added params 
const TicketPage = ({ params }) => {
  return <div>TicketPage {params.id}</div>;
};

export default TicketPage;
#using our new [id] folder, will allow us to type in http://localhost:3000/TicketPage/12345 and it will return a page with 'TicketPage 12345' based on whatever id we input, very nice

if you don't want routing enabled, simply wrap your folder in (parenthesis), such as for our (components) folder we created, it won't set up routing for that
created Nav.jsx in our (components) folder, 'rafce' will create boilerplate code for it
==========================================================================ERROR==========================================================================================================================================
How to fix eslint red error messages:
https://stackoverflow.com/questions/68163385/parsing-error-cannot-find-module-next-babel
#create in root: '.babel.rc' file
{
  "presets": ["next/babel"],
  "plugins": []
}
#add to 'eslint.rc.json' file
{
  "extends": ["next/babel", "next/core-web-vitals"]
}

13:00====================================================================================================================================================================================================================
layout.js #import { Inter } from 'next/font/google' allows you to use google fonts directly, contains some meta data title/descriptsean
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
#default layout.js, it displays each 'page' as children, if you want <Nav /> to show up in every page, you can add it here, like below, don't foget to import, now it will show up on every page of project
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Nav />
        {children}
      </body>
    </html>
  );
}
15:00====================================================================================================================================================================================================================
we are going to install some libraries for our project, 
npm install @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome #installs fortawesome/fontawesome icons for our project
'tailwind.config.js' # allows us to set up our default colors, use standardized color names we can create, and we can change them later in our project if we want
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        nav: "#18222f",
        page: "#2b3441",
        card: "#47566a",
        "card-hover": "#4f5e74",
        "default-text": "#f1f3f5",
        "blue-accent": "#0084d4",
        "blue-accent-hover": "#009fff",
      },
    },
  },
  plugins: [],
};

18:00===================================================================================================================================================================================================================
inside our 'layout.js' file we need to fix a few things, when you are loading in icons sometimes they load in very large, and redefine back down, to fix that we can, import and sub in CSS (add below):
import { config } from "@fortawesome/fontawesome-svg-core";
import "@fortawesome/fontawesome-svg-core/styles.css";
config.autoAddCss = false;

21:00===================================================================================================================================================================================================================
<div className="flex-grow overflow-y-auto bg-page text-default-text"> #flex-grow = expands the main page to fill up the whole page, bg-page/text-default-text  will use the preset we created in our tailwind.config.js above
<nav className="flex justify-between bg-nav p-4"> #justify-between = will split content horizontally, instead of flex-col which stacks content

31:00===================================================================================================================================================================================================================
Created new components "DeleteBlock.jsx" "TicketCard.jsx" "PriorityDisplay.jsx" "ProgressDisplay.jsx" "StatusDisplay.jsx"

41:00===================================================================================================================================================================================================================
<div className="ml-auto"> #will automatically give it the correct margin-left to slide it over to the right
<div className="flex flex-col bg-card hover:bg-card-hover rounded-md shadow-lg p-3 m-2"> #will use our preset tailwind.config.js, hover:bg-card-hover = will change color on hover
<hr className="h-px border-0 bg-page mb-2" /> #bg-page = will make background color the same color as page, mb-2 = margin bottom 2
<p className="whitespace-pre-wrap"> #Use whitespace-pre-wrap to preserve newlines and spaces within an element. Text will be wrapped normally.
Our <h4> and <p> tag look exactly the same, we can fix this by going back into our 'globals.css'(we previously deleted everything in here at start)
@layer base {
  h1,
  h2,
  h3,
  h4 {
    @apply font-bold;
  }
  h1 {
    @apply text-4xl;
  } #fixed all our css one's with ',' apply to all and h1 {} is targetted to <h1>
<div className="flex-grow"></div> # flex-grow = will ensure that all cards are the same size regardless of how much text inside
to individually edit each component styling, attach a <div className=""> with your tailwind CSS stylings
<div className="p-5"> #padding-5
<div className="lg:grid grid-cols-2 xl:grid-cols-4"> #responsive design built in to tailwind lg:grid = if large screen grid, grid-cols-2 = create 2 grid columns, xl:grid-cols-4 = if xl screen 4 columns
  # if a small screen, take up the entire screen with tickets, no grid

51:00===================================================================================================================================================================================================================
Basic responsive layout completed, now to set up the database, using mongo DB atlas, and mongoose- which allows you to have data integrity
Mongo DB = in mongo, you don't define types like you do in a traditional database
npm i mongodb mongoose #installs mongodb and mongoose from root directory 
https://www.mongodb.com/atlas/database
set up an account, created our first mongoDB, connected to IP, downloaded VSCode extension, created .env.local file, stored our PW and account name, 
went to collections -> new DB named 'TicketDB.tickets', need to create our model of DB,
MONGODB_URI = mongodb+srv://evilusean:<password>@cluster0.ep7lzo3.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0 #mongodb connection code, username:<password>, replace <PW> with given one
?retryWrites=true&w=majority&appName=Cluster0 #end part can be removed, and replaced with whatever you called your new database
MONGODB_URI = mongodb+srv://evilusean:<PW>@cluster0.ep7lzo3.mongodb.net/TicketDB
after that, we created a new folder in src / app called '(models)', created a new file called 'ticket.js'
  import mongoose, { Schema } from "mongoose"; #import new db tools into ticket.js
  mongoose.connect(process.env.MONGODB_URI) #connects to the variable we set up in '.env.local'
  mongoose.Promise = global.Promise
const ticketSchema = new Schema (
    {
        title: String,
        description: String,
        category: String,
        Priority: Number,
        status: String,
        active: Boolean,
    },
    {
        timestamps: true,
    }
); #sets up our data integrity, you can count on a ticket being created a certain way
const Ticket = mongoose.models.Tickets || mongoose.model("Ticket", ticketSchema); #grabs our ticket if it is already created, ||OR creates it if it doesn't exist

61:00=====================================================================================================================================================================================================================
Unknown at rule @apply / Unknown at rule @tailwind # 11 error messages, yellow, doesn't break any code, didn't fix, can't find the settings.json file stack overflow told me to find
https://byby.dev/at-rule-tailwind

Now we are going to create our API, created new folder in src / app / 'api' - new filed called 'route.js' - filename is important for this, NextJS knows that it is an API call to reach out to DB
we are going to create a form that allows people to add data, and attach it to the request, and pass it to the ticket
import Ticket from "../(models)/Ticket"; #imports our model we just created for our DB
import { NextResponse } from "next/server"; 

export async function POST(req) {#exports our async function post request
    try {
        const body = await req.json() #awaits whatever was on request.json
        const ticketData = body.formData #using that formData, we will create our ticketData
        await Ticket.create(ticketData) #mongoose function that awaits for our ticketData to be create, our ticket will then be created

        return NextResponse.json ({message: "Ticket Created!",},  {status: 201}); #sends a response, that ticket was created, sends a status code of 201, which means successfully created
    } catch (error) {
        return NextResponse.json {message: "Error", error},  {status: 500}; #will catch any errors and send a message back, with the error message, and a 500 status code - because it failed
    }
}#backend setup for our ticketData creation
src / app / (components) / new file 'TicketForm.jsx' Now we will need to build a form that will allow us to create tickets :
"in client"; # it uses server side JS by default, you need to explicitly state that you want to use client side JS at the top if you need to
import { useRouter } from "next/navigation"; #make sure you don't auto import the first one, this one is in the "next/navigation", the first import is from "next/router"
import React, { useState } from "react"; #state management on client side
const TicketForm = () => {
    const startingTicketData = {
        title: "",
        description: "",
        priority: 1,
        progress: 0,
        status: "not started",
        category: "Hardware Problem",
    }#will be used to create the starting state with default inputs, we are going to update the state and keep track of that and pass that data eventually to API to create the ticket
const [formData, setForm] = useState(startingTicketData); #create a variable, with API formData, and setForm data, useState(startingTicketData); = will give us our starting state from above
<input id="title" name="title" type="text" onChange={handleChange} required={true} value={formData.title} /> #creates an input for text

1:11:00===================================================================================================================================================================================================================
const TicketForm = () => {
  const handleChange = (e) => {
    const value = e.target.value; #creates a variable value from the targeted .value on form
    const name = e.target.name; #creates a variable name from the targeted .name on form

    setFormData((prevState) => ({ #sets the form of previous state
      ...prevState, #everything from the previous state
      [name]: value, #only changes the [name] value, 
    }));
  };

        <textarea
          id="description"
          name="description"
          type="text"
          onChange={handleChange}
          required={true}
          value={formData.description}
          rows="5" #rows = 5, will create a large box for you to input text, instead of on a single line
        /> #creates a textarea 5 rows deep for text input

<label>Category</label>
        <select
          name="category"
          value={formData.category}
          onChange={handleChange}
        >
          <option value="Hardware Problem">Hardware Problem</option>
          <option value="Software Problem">Software Problem</option>
          <option value="Project">Project</option>
        </select> #creates a dropdown menu with three options

1:26:00=================================================================================================================================================================================================================
  const handleSubmit = (e) => { #(e) =  going to get an event
    e.preventDefault(); #prevents page refresh(default)
    const res = await fetch("api/Tickets", { #constant response = await fetch
        method: 'POST', #POST method
        body: JSON.stringify({formData}), #pass the data to the post method through JSON stringify method
        "content-type": "application/json" #json type
    })
    if (!res.ok){ #if response not ok, throw an error
        throw new Error("Failed to create Ticket.")
    }
    router.refresh() #if it doesn't throw an error, the router will refresh the page,
    router.push("/") #after the refresh, it will push back to the default page
  };

import { useRouter } from "next/navigation"; #router import
const router = useRouter() #creates a router variable

Error:
File '/media/sean/SeanDrive/Code/CourseraGoogleFCC/FCC-TicketingApp-NextJS-MongoDB-Talwind-CSS/ticket-app/app/api/route.js' not found.
  The file is in the program because:
    Matched by default include pattern '**/*'
Fixed: replaced everything within jsconfig.js with below, for some reason it was targetting our (models) folder
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

New Error:
Unhandled Runtime Error
ReferenceError: setFormData is not defined

Source
app/(components)/TicketForm.jsx (13:4) @ setFormData

  11 | const name = e.target.name;
  12 |
> 13 | setFormData((prevState) => ({
     |^
  14 |   ...prevState,
  15 |   [name]: value,
  16 | }));
Fixed:
const [formData, setFormData] = useState(startingTicketData); #accidently wrote setForm instead of setFormData

DB not updating, problem started around 1:29:00, could be the MONGODB_URI, going back in tutorial to double check,  ~55:00 mongo DB setup, 
Potential problems files: .env.local / route.js / Ticket.js / TicketForm.jsx
onSubmit={handleSubmit} #was previously a string 'handleSubmit' - we done goofed, I think that should fix it, found by checking console, just tested, DB works!
1:30:00===================================================================================================================================================================================================================
Ctrl + Shift + I = brings up debugging console


















