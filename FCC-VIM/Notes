Start: 01September2024

Why to use VIM? : Greater Output and Focus / Less Movement to accomplish task - every time you move the mouse, you lose focus and time / On every linux machine by default /
  Some programs like the 'man' command will use vi-style commands for navigation - sometimes you need to use vim - knowing the basic commands is useful for future sean
Learning Expectations + Goals : 
  1) Understand the History and evolution of vim : This will explain the origin of syntax and commands - Why does this command exist? history explains present - will help you remember
  2) see how powerful and portable VIM can be : if you adopt it as a primary editor - risk wrist Vs Carpal tunnel, programming is notoriously hard on wrists, less movement = less dmg
  3) Fluency in the core VIM commands for everyday scenarios for development or DevOps
Do people hate VIM? : Skill Issue, It's not that hard. Build muscle memory. "People fear what they don't understand and hate what they can't conquer" 
PDP-7 = Programmed Data Processor-7 = Created in 1964, a micro-computer created by big DEC(Digital Equipment Corporation) - had no OS, only tools
11:03 - Unix : 1969 UNIplexed Information Computing System(UNIX) - written in C(created by Dennis Ritchie)- created by Bell Labs in 1969 - Bell Labs = Subsidiary of AT&T
14:30 - Unix Emulated : 1972 - No VI/VIM yet-
19:40 - What is Ed? : 1963 Ed is a text editor built for UNIX OS = 'Ed'itor - line oriented text editor, hard to use because you could not visually see editing in your text file(no terminal back then)
  Teletype Machines = like a typewriter, where you enter the input and the output would print out on paper 'Print' command would literally print on paper
  Almost any edition of UNIX will always have 'Ed' - single letters for input commands 'a' = input mode(append) '.' = while in input mode, the period would commit entries
  '1,$p' #enter command mode, and print, '1' = first line ',' = range operator '$' =regex for last line 'p' for print 
  'wq <filename.txt>' #would write and quit filename, this is where vim got :wq
  'ed hello.txt' #to enter a text file
33:30 - What is EX? : 1976 'EX'tended = a line oriented editor created in 1976 that improved the feature set of 'Ed'
  More extensive Commands, history, and undo, multi buffer support, visual mode
  'Em' = A better version of 'Ed' created by George Couloris that could take advantage of video displays, Billy Joel added it to the BSD(Berkley Software Distribution v1.1) in 1978
  ':' = Ex syntax starts to use the ':' colon to declare commands, 'command mode' 
  ':vi' # Visual Mode, added in that allowed users to see the document while they entered commands - no longer needed to enter in line by line
FreeBSD = Software that is still around today, non-copyleft license, powers MacOS, can be commercialized. just watched a video on this yesterday : https://www.youtube.com/watch?v=NKHzcXwTdB4
https://www.freebsd.org/
  Starts looking like 'VIM' to get back to command mode, type ':'
  'k' goes up
  'j' goes down
  'i' goes to insert mode 'esc' back to normal mode
50:00 - What is VI? Vi is a text editor built for the UNIX OS, when BSD 2.0 was being released 'Ex' was renamed to 'Vi' - Visual mode was now just the default mode
  Vi at the time was not considered a lightweight, small portable editor, barely being able to fit into the memory of a PDP-11 or PDP-7
1:10:00 - Finally figures out how to install - <Time Wasted> * <Users Watched> = <Amount of time wasted>. It's just disrespectful, thousands, potentially millions of hours wasted.
Tut - Spent 20 minutes installing vi, why do none of these dudes know how to edit? It only took 2 VM's and 2 OS'. 20 minutes to show 'h' go left 'l' go right.. I feel cheated
1:12:00 - What is Vim? : 1991 - Written by Bram Moolenaar a clone of VI - Stands for 'VI(Improved)' that greatly improved the programs functionality
  Added in syntax highlighting, plugin support, multi level undos, multiple new modes, enhanced search and replace, split windows and tabs, command line history, autocompletion, and more.
  Vim is often set as the default editor in many OS, "How do I exit vim? 'esc' ':q!'"
  Vim has a built in tutorial for beginners called 'vimtutor' which is usually installed along with vim, but is a seperate executable, can be run with a shell command
1:13:45 - VimTutor Vim Help : Read through it, tells you how to use vim, lots of reading
  ':help' easier way to learn vim commands - the docs 
1:22:35 - VimScript : A scripting language, Used to write vim configuration files, plugins and input when in command mode (Neovim uses LUA)
1:23:30 - Vim Configuration Files : Vim has 2 config files, both stored on '/home' directory called '.vimrc' and 'gvimrc'
  '.vimrc' = used for configuring vim
  '.gvimrc' = used for configuring graphical version of GVim or MacVim
  'i' = insert mode when in vim, 
  'esc' ':' + w + q = write and quit
1:33:25 - Vim Plugin Managers : Vim-plug / Pathogen /Vundle / Dien.vim / Neobundle / Volt
  Vim has not conformed to a single plugin manager and there may be plugins that only work with specific plug in manager
  Since Vim 8 you can just git clone to the correct directory for plugins
  Vimball is a self extracting archive format to install plugins and scripts
1:35:00 - What is Janus? : A distribution of plug ins and mappings for vim to quickly configure vim to provide a modern experience (NeoVimChad for non-chads)
  https://github.com/carlhuda/janus
1:48:10 - Install A plugin with Vim Plug :
  https://github.com/junegunn/vim-plug
    Follow the instructions from repo above and edit the 'vimrc' file, specify which plugins you want, then run ':PlugInstall()' in vim
  Get AI code assistant in VIM :
  https://github.com/madox2/vim-ai
2:07:00 - What is NeoVim? : 2014 A clone of VIM rewritten from the ground up to be hyperextensible (not by bram, for by bram, about bram) - works in LUA
2:13:10 - Vimium : Chrome Extension, that allows you to have VIM-like commands to control chrome web-browser (doesn't work on github/youtube)
  https://github.com/philc/vimium
  https://chromewebstore.google.com/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en
  ?       show the help dialog for a list of all available keys
  h       scroll left
  j       scroll down
  k       scroll up
  l       scroll right
  gg      scroll to top of the page
  G       scroll to bottom of the page
  d       scroll down half a page
  u       scroll up half a page
  f       open a link in the current tab
  F       open a link in a new tab
  r       reload
  gs      view source
  i       enter insert mode -- all commands will be ignored until you hit Esc to exit
  yy      copy the current url to the clipboard
  yf      copy a link url to the clipboard
  gf      cycle forward to the next frame
  gF      focus the main/top frame
Vimium Tabs:
  J, gT   go one tab left
  K, gt   go one tab right
  g0      go to the first tab. Use ng0 to go to n-th tab
  g$      go to the last tab
  ^       visit the previously-visited tab
  t       create tab
  yt      duplicate current tab
  x       close current tab
  X       restore closed tab (i.e. unwind the 'x' command)
  T       search through your open tabs
  W       move current tab to new window
  <a-p>   pin/unpin current tab
2:13:35 - Vim support in other IDE's : Most IDE's will have direct or through plugins/extensions a way to emulate VIM commands within their editors
  VSCode has a a VIM extension :
    https://github.com/VSCodeVim/Vim
  '/' = Default <Leader> Key
2:16:25 - Vim Modes : 
  Normal Mode = Default Mode, you can always return to default mode by pressing 'esc', 
  Command Line Mode : 
    ':' any time you type a colon it will be followed by a command
    '/' = Search forwards, will search the rest of your code
    '?' = Search Backwards, will search previous code for what follows '?'
  Insert Mode :
    'i' = will insert at cursor
    'I' = will insert at start of line
    'a' = insert at after current character
    'A' = Insert at end of Line
    'o' = open below
    'O' = Open above
    'c' = change*
    'C' = change at end of the line
    'c' + 'w' = change word
  Visual Mode : 'V' has two modes, visual line mode and visual mode
    'V' = Visual Mode
    'V' = Visual Line Mode
    'Ctrl' + 'V' = Visual Block Mode - A way of selecting text and doing something with that text
  Replace Mode : 
    'r' = replace a character(exits mode immediately)
    'R' = Replace mode, but will stay in it as you replace multiple characters
  Other Modes : Select Mode = similar to visual selection / Ex-mode = Sequence of commands / Terminal Job Mode = (interacting with a job in a terminal window) / Sicko Mode / Beast Mode / John Wick Mode
The Command line bar will tell you what mode you are in
2:20:20 - File Commands : Most file commands are entered via the command line and start with ':'
  ':w' = write file(save) 
  ':w <filename>' = write file at this <filename> path (save new file)
  ':w!' = attempt to force the file to save(useful for read-only files)
  ':wa' = save all files
  ':q' = quit
  ':q!' = quit force - quit without saving changes
  'qa' = quit all open files
  'Z' = quit(can be used without colon or command line mode)
2:22:15 - Motion Commands : Are shortcuts triggered in Normal mode that allow you to quickly move around your document with preceision
  '<#>g' = go to line number <#>
  'w' = go to start of next word
  'b' = move backward a word
Operator Commands: can be used with motion commands:
  'c' = change
  'd' = delete
  'y' = yank (copy)
  '~' = swap case (only if 'tildeop' is set
  'g~' = swap case
  'gu' = make lowercase
  'gq' = text formatting
  '>' = shift right
  '<' = shift left
Examples:
  'd' + 'w' = delete the current word
  'c' + '3" + 'w' = change three words
2:24:30 - Directional Motions: 
  'h' = right
  'j' = down 
  'k' = up
  'l' = right
Examples: 
  '10' + 'h' = move 10 characters left
  '25' + 'j' = move down 25 lines
'.' (while in a github repo) = will open a Github.dev editor, a similar experience to VSCode without a terminal, install Vim extension to get vim motions in github
2:29: 20 - GoTo Motions : Will go to a specific line
  'gg' = go to first line
  'G' = go to the last line
  '22' + 'gg' = go to the 22nd line from the top
  '22' + 'G' = same as above, will go to line 22, using shift 'G' instead of 'gg'
2:32:20 - Word Motions : 
  'w' = move to the start of the next word
  'e' = move to the end of the next word
  'b' = moves to the start of the last word
2:35:15 - Join Lines: 
  'J' = will join the bottom line with the current line
  '10' + 'J' = Will join the bottom ten lines with the current line
2:36:45 - Start or End of Line : (Similar to RegEx with '$' and '^')
  '$' = go to end of line, will remain on the end of line when moving with 'hjkl' movement - sticky positioning
  '^' = go to start of line , will remain on the start of line when moving with 'hjkl' movement - default positioning
2:39:05 - Replace Command : Allows you to write overtop of existing characters
  'r' = replace a single character
  'R' = enter Replace Mode, everything typed will replace current text
2:41:10 - Undo and Redo Commands : 
  'u' = will undo a text change
  'U' = undo an entire line,
  'Ctrl' + 'r' = Redo - will redo something
2:44:55 - Change Command : A way of selecting and then deleting an amount of text based on word motions
  'c' = change
  'C' = change to end of line (COL), will remove everything from where you are to end of line and put you in insert mode
  'c' + 'w" = change to end of word
  'c' + 'e' = change to end of last word
  'C' + 'gg' = change from here to the first line
  'c' + '2' + 'e' = c2e - will change the next 2 words, will remove everything from where you are and next 2 words and put you in insert mode
  'c' + '5' + 'j" = c5j - will change the next 5 lines from where you are, remove everything and put you in insert mode
2:49:00 - Delete Command : Whatever you delete will be placed into the clipboard(unnamed register), so whenever you paste, it will paste what was deleted
  'd' + 'w' = delete from the current cursor to the start of the next word
  'd' + 5 + 'w' = delete the next 5 words
  2 + 'd' + 'w' = delete from the current cursor to start of the next word
  'dd' = delete the current line
  'D' = Delete to end of line (EOL)
  5 + 'dd' = delete five lines
  'x' = delete currently selected character
  4 + 'x' = delete next 4 characters
2:52:50 - Yank and Paste Commands : 
  'y' = Will Copy text into the unnamed register(different than 'Ctrl' + 'Shift' + 'V'
  'yw' = yank current word
  'yy' = yank a line
  'Y' = yank current line
  'p' = Paste before(below)
  'P' = Paste after(above)
2:56:00 - Insert and Append Commands :
  'i' = will enter insert mode, to the left of the cursor box, allowing you to add text to the document
  'I' = will enter Insert mode, at the start of the line
  'a' = append, will enter insert mode to the right of the cursor
  'A' = Append, at the end of the line, will enter insert mode at end of line
2:59:25 - Line Insert Command : Allows you to quickly create a new line above or below the current line and enter insert mode
  'o' = enter the new line below and enter insert mode
  'O' = enter the new line above and enter insert mode 
3:01:00 - Find Command : lets you quickly find and move to a search result (regular expressions work)
  '/' = '/hello' would search forward for the first instance of the word 'hello' in your code
  '?' = '?hello' search backward from the current posiition for word 'hello'
  'n' = next match
  'N' = previous match
  '/hello/s-2' = places the cursor 2 characters before the start of match
  '/hello/e' = places cursor at end of match
  '/hello/e+4' = places cursor at four characters after end of match 
  '/hello/+3' = offsets by 3 lines
3:04:50 - Substitute Command : lets you replace text in a file using a regular expression 
  ':.s/hello/world/' = '.' is for current line, will tell you to find all instances of 'hello' and 's' subistitute/replace it with 'world'
  ':2s/hello/world/i' = '2' on line 2 replace all instances of 'hello' and substitute it for 'world' 'i' and ignore casing
  ':2,5s/hello/world/g' = '2,5' for lines 2 to 5, reokace all occurences of 'hello' for 'world' 'g' global means all
  ':1,$s/hello/world/g' = '1,$' from line 1 to the end of document, substitute all instances of the word hello for world 'g' globally all occurences
  '%s/hello/world/g' = short cut for above 
3:11:00 - '\' Leader Key : default is '\', used for triggering user or plugin defined shortcuts
  '\cc' = NerdCommenter Plugin, used for commenting out currently selected line(depends on what plugins/scripts you have installed)
  'nnoremap <Leader>b :buffers<CR>:buffer<Space>' = change the 'vimrc' file to remap leader key(or any) 
3:14:50 - Visual Mode - Allows you to select text through either yanking, deleting, or manipulation
  'v' = visual mode will allow you to select multiple characters - press 'v' and then any motion afterwards to select from where your cursor was
  'V' = visual Line Mode =  allows you to select whole line at a time - just move up or down
  'CtrL' + 'v' = visual block mode - allows you to select vertically and by line - press 'c' ('a'/'i' doesnt work) after selecting - so you can add multi line comments or delete multi line
  'c' = c to change(delete currently selected then go to insert mode)
  'y' = yank to unnamed register 
  'p' = to paste from unnamed register
  'gv' = grab last visual mode(if you missclick or lose your last visual mode - will allow you to undo)
3:18:50 - Indentation Command : The Leading Whitespace can be adjusted based on tab size(indentation)
  '>' = indent line outward(to the right)
  '<' = indent line inward (to the left)
    You can use count modified for number of indents - Useful to use visual mode to select your line









