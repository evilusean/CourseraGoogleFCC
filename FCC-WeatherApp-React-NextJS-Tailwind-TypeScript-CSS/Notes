(0:00:13) Introduction =============================================================================================================================================================================================================
Responsive, dynamic app with react components
https://www.youtube.com/watch?v=KkC_wYM_Co4&ab_channel=freeCodeCamp.org
OpenWeatherAPI: 
https://openweathermap.org/api 
Repo:
https://github.com/whoisseth/weather-app-nextjs
Next.js:
https://nextjs.org/docs
Next.js interactive tutorial:
https://nextjs.org/learn
Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations.
Under the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration.

Features:
API, Next JS(React Framework), Todays Weather(3 hour intervals), Weekly Forecast, Weather Description(Visibility, Humidity, Wind Speed, Air Pressure, Sunrise time, Sunset time)
  weekly forecast, search function, current location, fully responsive

(0:03:45) Install/Remove boilerplate=================================================================================================================================================================================================
npx create-next-app@latest weatherapp #use nextjs to install with node, created our first nextJS project
Typescript = Yes, ESLint = yes, Tailwind CSS = Yes, src/directory = yes, app router = yes, import alias = no
367 dependancies installed, no errors
cd weatherapp #change directory to newly created nextJS app
code . #opens our current directory in VSCode
npm run dev #test our new app, it works, localhost:3000
removed everything from page.tsx, and globals.css 

07:33 Creating and styling the navigation component==================================================================================================================================================================================
created 'components' file in src / app , created Navbar.tsx
<nav className='shadow-sm sticky top-0 left-0 z-50 bg-white'> #added shadow, sticky to top, positioned at top left, and a background of white
<div className="h-[80px] w-full flex justify-between items-center max-w-7x1 px-3 mx-auto"> #created a duv with height of 80px, width=full, flex, justify between, items center, max width 7x1, padding=3, margin x of auto
  mx-auto #margin x auto, will automatically center your container on the x axis
<p className="flex items-center justify-center gap-2"></p> #added a paragraph with flex, items-center, justify content center, gap-2 Use gap-{size} to change the gap between both rows and columns in grid and flexbox layouts.
<h2 className="text-gray-500 text-3x1"> #added header tag with gray text, and text size of 3x1
import Navbar from "./components/Navbar"; #added our Navbar to our page.tsx with an import statement
<div className="flex flex-col gap-4 bg-gray-100 min-h-screen"> #gave our background a gray background, flex display, flex of column, minimum height of the screen
For Our Logo(Sun)-we will need icons, we can get icons for our projects here:
https://react-icons.github.io/react-icons/
Ctrl + Shift + `(backtick) = open a new terminal window in VSCode
npm install react-icons --save #installs react-icons in your project, you can now use them, use the website search feature above to find your icon you wish to use
After installing react-icons through the terminal, search through what you need for your project in top left search function
import { BiSolidSun } from "react-icons/bi"; #sun we selected
<BiSolidSun /> #How we can add sun to our project, after importing it
After placing it, we now need to style our new icon,
<BiSolidSun className="text-3x1 mt-1 text-yellow-500"/>
I can already tell our font-size is way too small, but it seems to scale with whatever I place in the navbar div, staying the same, maybe the guy who made tutorial is using a very low res monitor
  will need to come back and fix it after, tailwindCSS for ants, can add font-size in globals.css after we finish building, can keep this for now,
https://v2.tailwindcss.com/docs/font-size
Added 2 more icons for location

22:27 Using event handlers and passing props in React form handling=================================================================================================================================================================
type Props = {
    className?: string;
    value: string;
    onChange:React.ChangeEventHandler<HTMLInputElement> | undefined;
    onSubmit: React.FormEventHandler<HTMLFormElement> | undefined;
}
#The value prop is used to set the value of the input field, the onChange prop is used to handle changes to the input field, and the onSubmit prop is used to handle form submissions.
The SearchBox component returns a form element with an input field and a button. The input field is given the value prop, which sets its value to the current value of the value prop passed to the component. 
The input field is also given the onChange prop, which handles changes to the input field. The button is given the onSubmit prop, which handles form submissions.
When the user enters text into the input field, the onChange prop is called with the new value of the input field. This causes the value prop of the component to be updated, which in turn causes the input
field to be re-rendered with the new value.
the className?:string; #conditional, has a question, sometimes you need a className and sometimes you don't
onChange={props.onChange} #after creating the props, you can simply hold mouse over it till a highlight pops up and copy the onChange:React.ChangeEventHandler<HTMLInputElement> | undefined;

24:45 Creating the CN function and installing required libraries====================================================================================================================================================================
'utils' created a new folder in src / app, created a new file called 'cn.ts'
npm i tailwind-merge clsx #i installs tailwind merge to merge our tailwind classes, and clsx package to pass our package classes, run the command in terminal
import clsx from "clsx"; #add imports from newly installed packages
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(...inputs))
}
The cn function is a utility function that helps you to write more concise and readable CSS code.
It takes a list of class names as its arguments and returns a single string that can be used to set the className property of an element.

29:19 Replacing the API key and accessing weather data for a specific location=====================================================================================================================================================
openweathermap.org #first create an account, after that click on username, then click on my API keys
'.env.local' after copying API key, create a new file in src directory, NEXT_PUBLIC_WEATHER_KEY = <API KEY> #replace <> with actual api key, after that you can use it globally whereever you want
  in .env.local your API key will be stored privately, so that our API key is not exposed publicly
https://openweathermap.org/api #website with documentation
Use This for this project:
https://openweathermap.org/api/geocoding-api
Use this for API call:
http://api.openweathermap.org/geo/1.0/direct?q={city name},{state code},{country code}&limit={limit}&appid={API key}
// Below Boilerplate for API Key:
// http://api.openweathermap.org/geo/1.0/direct?q={city name},{state code},{country code}&limit={limit}&appid={API key}
// Below Working Copy for API Key NEXT_PUBLIC_API_KEY found in .env.local file:
// http://api.openweathermap.org/geo/1.0/direct?q=Tokyo&appid={process.env.NEXT_PUBLIC_API_KEY}
// Above did not work, had to change the URL for the API key to pull data from the forecast endpoint:
// http://api.openweathermap.org/data/2.5/forecast?q=Tokyo,JP&appid={process.env.NEXT_PUBLIC_API_KEY}&cnt=56
// Above code cnt=56 means 56 hours of data with 3 hours of difference
// you can replace {process.env.NEXT_PUBLIC_API_KEY} with your actual API key, and paste that URL in a browser to do a manual call
Below, we did a count of 3, copied the API call we posted the URL into our browser, and asked google duet to create a type for our data, below is the result(what the heck is temp=276?-are we seriously doing kelvins?):
{
  "cod": "200",
  "message": 0,
  "cnt": 2,
  "list": [
    {
      "dt": 1709629200,
      "main": {
        "temp": 279.42,
        "feels_like": 276.07,
        "temp_min": 278.3,
        "temp_max": 279.42,
        "pressure": 1018,
        "sea_level": 1018,
        "grnd_level": 1013,
        "humidity": 88,
        "temp_kf": 1.12
      },
      "weather": [
        {
          "id": 501,
          "main": "Rain",
          "description": "moderate rain",
          "icon": "10n"
        }
      ],
      "clouds": {
        "all": 83
      },
      "wind": {
        "speed": 5.01,
        "deg": 22,
        "gust": 7
      },
      "visibility": 3929,
      "pop": 1,
      "rain": {
        "3h": 3.14
      },
      "sys": {
        "pod": "n"
      },
      "dt_txt": "2024-03-05 09:00:00"
    },
    {
      "dt": 1709640000,
      "main": {
        "temp": 278.2,
        "feels_like": 273.69,
        "temp_min": 277.31,
        "temp_max": 278.2,
        "pressure": 1017,
        "sea_level":1017,
        "grnd_level":1011,
        "humidity":92,
        "temp_kf":0.89
      },
      "weather": [
        {
          "id": 501,
          "main": "Rain",
          "description": "moderate rain",
          "icon": "10n"
        }
      ],
      "clouds": {
        "all":92
      },
      "wind": {
        "speed": 7.1,
        "deg": 352,
        "gust":9.56
      },
      "visibility":898,
      "pop":1,
      "rain": {
        "3h":4.34
      },
      "sys": {
        "pod": "n"
      },
      "dt_txt": "2024-03-05 12:00:00"
    }
  ],
  "city": {
    "id": 1850144,
    "name": "Tokyo",
    "coord": {
      "lat": 35.6895,
      "lon": 139.6917
    },
    "country": "JP",
    "population": 12445327,
    "timezone": 32400,
    "sunrise": 1709586372,
    "sunset": 1709627976
  }
}

Used ChatGPT to create below(only pasting a segment, for future Sean to see how it's done, just key value pairs with 'interface' keyword :
interface WeatherDetail {
  dt: number;
  main: {
    temp: number;
    feels_like: number;
    temp_min: number;
    temp_max: number;
    pressure: number;
    sea_level: number;
    grnd_level: number;
    humidity: number;
    temp_kf: number;
  };
// and another one
interface WeatherData {
  cod: string;
  message: number;
  cnt: number;
  list: WeatherDetail[];
  city: {
    id: number;
    name: string;
    coord: {
      lat: number;
      lon: number;
    };
    country: string;
    population: number;
    timezone: number;
    sunrise: number;
    sunset: number;
  };
}

31:27 Setting up React Query for data fetching====================================================================================================================================================================================
After succesfully recreating pipes for the API data, we now need to fetch our data
to fetch our data we are going to use a react query
Tanstack React Query V3 Official Docs:
https://tanstack.com/query/v3/
npm i react-query #used in terminal of project to install react-query
import { QueryClient, QueryClientProvider, useQuery } from 'react-query'
#first import react-query
const queryClient = new QueryClient()
#below is how you do a query using react-query
export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Example />
    </QueryClientProvider>
  )
}
next we wrapped our body in'layout.tsx' with the <QueryClientProvider client={queryClient}>
const queryClient = new QueryClient() #then we added the queryClient provided by the documentation example, pasted it outside of the return function
after attempting to run, it will throw an error, because it only works in client component, and we need to create a server component
'use client' #place this at the top to remove the first error, for the second error, you need to remove/comment out all the metadata next components from 'layout.tsx'

export default function Home() {
  function Example() {
    const { isLoading, error, data } = useQuery('repoData', () =>
      fetch('https://api.github.com/repos/tannerlinsley/react-query').then(res =>
        res.json()
      )
    )
  
    if (isLoading) return 'Loading...'
  }#next copy this from the official docs of react query and add to 'page.tsx', then ctrl+space(shortcut) on useQuery keyword to import it aswell
Next, replace their api with your api, while using the async function because you are fetching the data from an API, might take a few seconds
We are going to use Axios with React-query to fetch our data
npm i axios #installs axios
if you are using axios, you don't need to use fetch, or convert it into a json, with axios it will do it automatically
'await' keyword is the same as 'async'
useQuery<WeatherData> #will allow us to read the type of data, that we made above with 'interface WeatherData' key:value pairs
after testing, pressed F12 to look for our console.log("data", data); # we ended up getting a 401 unauthorized, need to see why 
  our{process.env.NEXT_PUBLIC_API_KEY} wouldn't work, had to break best practices and just paste my normal key, worked, fixed it with using '' back ticks and ${API_KEY} need dollar sign aswell
after testing, you can now see console.log("data", data?.city.name); #you can now autocomplete the data points you want to see from the data, here is an example of city name
if (isLoading) return <div className="flex items-center min-h-screen justify-center"> <p className="animate-bounce">Loading...</p> </div>;
  #above code makes our loading screen nicer, adds a tailwind animated bounce, and positions it in center of screen, super easy-looks nice
We are beginning to work on the layout of the next <main> section, in 2 <section> tags one for todays weather, and one for weekly forecast, each will require their own seperate logic
const firstData = data?.list[0]; #will get the date, we need to then convert it into a day readable on our page
npm install date-fns --save #installs a javascript library 'date-fns' that allows us to translate dates into a more readable format from our data fetched by API
<p>{ format(parseISO(firstData?.dt_txt ?? ''), "EEEE" )}</p> #will give the name of the day we are currently on using newly installed date-fns library

