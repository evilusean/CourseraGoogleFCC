========================================================================================================================Week 1:
HTML5:
Development Environment:
CDT(Chrome Developer Tools)=Come built in with google chrome browser
Install Node.js -> use npm(Node package manager) to install browser sync -> use browsersync/git to push to github
You can use github to host a webpage that you create, and push updates using git
Can be changed in github settings -> Pages 
You can Clone(Copy) an entire github repository in command line using git with url
command line: git status, git add, git commit, git push #all you need to publish code to github for html purposes
browser-sync start --server --directory --files "*" #browser sync used to locally host server mode of the folder you are currently in "*"=everythin
browser sync can be used for a realtime update on any html website you are working on, locally hosted on your machine without webserver
  all you need to do is save and it get's updated, don't need to refresh-saves time, good for development
Asking for help: Stack Overflow, jsfiddle.net, codepen.io

HTML=Hyper Text Markup Language
  Hypertext=Text which contains links to other texts
  Markup=To mark something up, to annotate
  Language=Syntax and semantics
    HTML= Strucute, provides the structure for the page
    CSS(Cascading Style Sheets)=Style and colour, layout, and font size
    Javascript=Behaviour, provides functionality to a page
Standards: 1997=HTML4.0 2000=XHTML 1.0 2004=WHATWGHTML 2007=WHATWG+W3C 2011=HTML5
W3C(World Wide Web Consortium)=Created initial standards for HTML 4.0 in 1997

Anatomy of HTML Tag:
Opening Tag=<p>Content="..."</p>=Closing Tag
<>=Tag p=Element
<br>=Line Break Tag <hr>=Horizontal Rule Tag, both of these tags do not have a closing tag
<p id="myId"></p> #tags/elements can have attributes, containing a name:value pair, must be unique
<p/> #self closing tag, for tags that do not contain any content

Basic HTML Document Structure:
<!doctype html> #every html should start with a <!doctype> declaration, tells browser it is rendering an html, or quirks mode
<html> #html tag contains entire html document
<head> #head tag contains items that describe the main content of the page, metadata
  <meta charset="utf-8"> #metatag, encoding, tells the browser how to interpret the characterset, no closing metatag
  <title>Coursera is Cool!</title> #title tag is required, 
</head>
<body> #body tag, root of all content in an HTML page
Coursera is SO cool! I am learning so much!
</body>
</html>

HTML Content Models:
Content Model=Behaviour that the browser applies to the elements, and to their nesting rules, which elements are allowed to be nested
Block-Level Elements=Render to begin on a new line
  May contain inline or block-level elements
  Roughly translate into Flow Content in HTML5
Inline Elements=Render on the same line
  May only contain other inline elements
  Roughly translate into Phrasing Content in HTML5
  
HTML Tags:
Semantic=Relating to meaning in language or logic
Semantic HTML element=Element that implies some meaning to the content
<h1> to <h6>	Defines HTML headings <h1> most important, largest <h6> least important, smallest
<h1> should convey the central topic, important generalized description, may help search ratings, should not be used for styling, just structure
<header> tag conveys some header information about the page,sometimes navigation
<nav> tag conveys navigation/other links
<section> within each <section> tag contains <article>(s)
<article> can also have <sections> within that
<aside> an element that contains something that is in this element that is related to the page, but not the main content
<footer> footer information of the page

Lists:
Allows you to group related content, organizational tool
<ul> unordered list tag, every item in the list is an <li> tag </li> , you can nest lists, lists within lists, appears as bullet points
<ol> ordered list tag, numbered, every item in the list is an <li> tag </li> , you can nest lists, lists within lists, appears as 1. 2. 3.

HTML Character Entity References:
'<' , '>' , '&' are the three characters you should ALWAYS escape, so they don't cause rendering issues
'<' Instead of, use '&lt;'
'>' Instead of, use '&gt;'
'&' Instead of, use '&amp;'
&copy; = â’¸ copyright symbol
&nbsp; = nonbreaking space, text beside will never wrap
&quot; = quote " in case not using UTF-8 encoding, will still appear as "

Creating Links:
<a href="same-directory.html" title="same dir link"> #href=hypertext reference, value can either be relative(internal) or absolute URL(external)
Content between closing tags is what you see when it is served, hover mouse over </a>
Best practice to add a title to each link
target="_blank" #forces the browser to open the link in a new tab
Fragment Identifier=Points to a section of the page
  <li><a href="#section1">#section1</a>
  <li><a href="#section2">#section2</a>
    <section id="section1"> #creates an id tag for section 1 which fragment id can reference and go to if clicked on
    <h2><a name="section2"> #creates an anchor tag named section 2 which can be referred to and will go to if clicked on 
SPA(Single Page Applications)

Displaying Images:
<!-- this is used to comment something out --> used to close the comment, hide/ignore the commented section and won't render
<img src="picture.jpg" width=400 height="235" alt="random text about image">
  #relative image reference of picture.jpg with a specified width of 400 by 235
<img> tag is an inline element
if you don't specify image size, when rendering(slow load) the page will jump around, if the URL is broken, the page will stay the same distance

========================================================================================================================Week 2:
CSS3(Cascading Style Sheets):
CSS is style, color, positioning, size, etc. HTML is the structure
/ #use forward slash to comment out
Anatomy of a CSS Rule:
CSS works by associating rules with an HTML element, these rules govern how the content of specified elements should be displayed
Selector=p { #selector should apply to every single paragraph tag, followed by open and closed curly braces
            color: blue; #inside curly braces is a declaration with a property:value pair
            font-size: 20px;
            width: 200px;
           }
A collection of CSS rules is called a stylesheet
Every browser comes with some default styles it applies to HTML elements, it is often your job to style these correctly
Class Selector= .blue{} #specified with a '.' and the name of the class, each element you want the class to apply to will need class="blue" in tag
id Selector= #name{} #specifying the value of the name with a '#' in front, the element with id=name will be selected and have rules applied
Grouping Selectors= div, .blue {} #groups all div and class=blue tags to follow the samme rules
Element with Class Selector= p.big {} #selects every paragraph element that has class=big
Child Selector= article > p {} #from right to left, targets every p element that is a direct child of an article element
Descendant Selector= article p {} #from right to left, target every p level that is inside every article
* { } #star selector, select every element there is and go and apply these properties to them
Pseudo Class Selectors=Target the ability to style to change if user hovers over an element/other interaction
  selector:pseudo-class {} #defined with a selector and ':' pseudo-classes :link vs :visited vs :hover vs :active vs :nth-child
header li { list-style: none; } #removes the bullet points from a list item
a:link, a:visited {text-decoration: none; background-color: green; border: 1px solid blue; color: black; display: block; width: 200px; 
  text-align: center; margin-bottom: 1px;} 
  #changes clicked/unclicked article links, removes underline, changes background color to green, creates a 1 pixel blue border, and changes text
  color to black, changes inline elements to block level elements with a width of 200 pixels, and aligns text to center, seperates by 1 pixel
a:hover, a:active {} #when a user hovers over an item, when a user clicks a button
a:hover, a:active {background-color: red; color: purple; } #when you hover over/click link changes background to red and text colours to purple
header li:nth-child(3) {} #targets the third child list item in the header element
section div:nth-child(odd) {background-color: gray;} #changes the background color to grey on all odd div elements 

Style Placement:
Your choice for placing styles, affects which style declarations will override others
In Line Styling=You can declare styles inside of the tag with <p style="text-align:center;"> for example
External Stylesheets=You can style other pages/links with <link rel="stylesheet" href="style.css">, needs to 'live' in same directory
  Best Practice, you almost always want your entire styles to be external to your html page

Conflict Resolution:
Cascading=Algorithm defining how to combine property values originating from different sources
Origin Precedence=Last Declaration Wins, processed sequentially top to bottom, external links declared at spot where it is linked to
Merge=if there is no conflict, Declarations Merge=Font size+color, etc
Inheritance=DOM(Document Object Model) Tree, if you specify something for an element in a tree, all the children(+grandchillen) will inherit 
Specificity=Most Specific Selector Combination wins; Scores; Style=".." Vs ID Vs Class, pseudoclass, attribute Vs # of elements (high)Left to right
  '!important'=add to override specifity 'scores' it doesn't matter, make this override all specificity p {color: green !important;}

Styling Text:
body {font-family: 'Times New Roman', Times, serif; color: #0000ff; font-style: italic; font-size:24px}
the reason you put more than one font is because, when you specify font family you are relying on the user to have it installed, provide options
every computer will have some type of serif or sans-serif type of font installed
Specify color using hexadecimel number color: #0000ff; <-RGB first 2 bits are red, second 2 are green, last 2 are blue, ff is highest blue value
font-weight: bold #font size, can be anywhere from 100-900 or bold
font-size: 16px; #almost every browser has a default font size of 16 pixels, relative to the viewing device, low DPI(dots per inch) 
  font-size: 120%; #takes the default size and increase it to 120%, relative size
  font-size: 2em; #equivalent to the width of 2 'M's, relative size, cumulative effect if added on to eachother
text-transform: capitalize; #controls how your text looks, capitalize, inherit, lowercase, none, uppercase, full-width
text-align: center; #controls where text aligns, center, right, left, justify, 

Box Model Layout:
Refers to the components that make up an HTML box; Margin, Border, Padding-as well as the rules that govern the box layout
#box {background-color: blue;} #creates a box with blue background
padding: 10px 10px 10px 10px; #pads 10px top 10px right 10px bottom 10px left TOPRIGHTBOTTOMLEFT or padding: 10px;
border: 5px solid black; #creates a solid black border 5pixels large
margin: 40px; #creates a margin 40pixels large on TOP RIGHT BOTTOM and LEFT
width: 300px; #lets box length be 300 pixels wide+padding+border+margin, width of content changes with the size of +padding+border+margin
box-sizing: border-box; #option, allows you to width box to an actual 300px width, instead of adding in padding+border, uninheritable property
overflow: auto; #overflow, auto adds scrolls bars, visible is default, hidden is clipped, scroll is visible scroll bars 
* { } #star selector, select every element there is and go and apply these properties to them
Cumulative Margins=Margins collapse and the box with the larger margin wins, they don't add together

Background Property:
width: 500px;
height: 500px; #creates a 500x500 square of blue for background
background-color: blue; #sets background color to blue
background-image: url("www.example.com"); #specifies an image, can be a relative or absolute URL
background-repeat: no-repeat; #no repeat shows one image instead of pasting multiple background images, other options are: repeat x, repeat y
background-position: top right; #defaults to center if only specified one property options:bottom, right, left, top
background: url("www.example.com") no-repeat right-center blue; #does the last four above in one line

Positioning Elements by Floating:
Most UI's made today are made by floating the elements
When you float elements, the document takes it out of the regular document flow
Floated Margins do not collapse
p2 {float: right;} #floats to object to the right side
section {clear: left;} #tells the browser that nothing can be floating to the left of it, options: right, both

Relative and Absolute Element Positioning:
Static Positioning=Default for all elements, except HTML-Positioning Offsets are ignored, 
p {position: relative; top: 50px; left: 50px ;} #offsets element up 50pixels and left 50 pixels, from the top and from left
  p {position: relative; top: -50px; left: -50px ;} #you can also use negative values for offset
Relative Positioning=Element is positioned relative to it's position in normal document flow-positioning offsets are; top,bottom,left,right
  like setting an anchor, element is not taken out of normal document flow-even if moved, its original spot is preserved
Absolute Positioning=All offsets(top, bottom, left, right) are relative to the position of the nearest ancestor which has position set on it,
  other than static, element is taken out of its normal document flow

Media Queries:
Allow you to group styles together and target them to a device based on some criteria(width/length/height/orientation-landscape)
@media (max-width: 767px) { p { color:blue; } }
^keyword ^media features 
each media features resolve to either true or false, 
  @media (min-width: 800px) {...}
  @media (orientation: portrait) {...}
  @media screen {...}
  @media print {...}
most common way of targetting different devices is by the width of the device
they can be combined with logical operations 'and' is most common, ',' is equivalent to 'OR'
@media (min-width:768 px) and (max-width:991px) {...} #targets a width range, any device within this range will be targeted, if not within-no apply
@media (max-width:767px) , (min-width: 992px) {...} #target any device whose width isnt larger than 767 or at least 992px in length
you must be careful not to overlap range boundaries/breakpoints
Standard Width Ranges= >1200Pixels=Large, 992-1199=Medium Sized Device, 
Bottom Left in Chrome Developer Tools is a 'Cell Phone Icon' -> Click =Shows what your website would look like on different devices




